{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"torch-choice Authors: Tianyu Du, Ayush Kanodia and Susan Athey; Contact: tianyudu@stanford.edu Acknowledgements: We would like to thank Erik Sverdrup, Charles Pebereau and Keshav Agrawal for their feedback. torch-choice is a library for flexible, fast choice modeling with PyTorch: it has logit and nested logit models, designed for both estimation and prediction. See the complete documentation for more details. Unique features: 1. GPU support via torch for speed 2. Specify customized models 3. Specify availability sets 4. Maximum Likelihood Estimation (MLE) (optionally, reporting standard errors or MAP inference with Bayesian Priors on coefficients) 5. Estimation via minimization of Cross Entropy Loss (optionally with L1/L2 regularization) Introduction Logistic Regression and Choice Models Logistic Regression models the probability that user \\(u\\) chooses item \\(i\\) in session \\(s\\) by the logistic function \\[ P_{uis} = \\frac{e^{\\mu_{uis}}}{\\Sigma_{j \\in A_{us}}e^{\\mu_{ujs}}} \\] where, \\[\\mu_{uis} = \\alpha + \\beta X + \\gamma W + \\dots\\] here \\(X\\) , \\(W\\) are predictors (independent variables) for users and items respectively (these can be constant or can vary across session), and greek letters \\(\\alpha\\) , \\(\\beta\\) and \\(\\gamma\\) are learned parameters. \\(A_{us}\\) is the set of items available for user \\(u\\) in session \\(s\\) . When users are choosing over items, we can write utility \\(U_{uis}\\) that user \\(u\\) derives from item \\(i\\) in session \\(s\\) , as \\[ U_{uis} = \\mu_{uis} + \\epsilon_{uis} \\] where \\(\\epsilon\\) is an unobserved random error term. If we assume iid extreme value type 1 errors for \\(\\epsilon_{uis}\\) , this leads to the above logistic probabilities of user \\(u\\) choosing item \\(i\\) in session \\(s\\) , as shown by McFadden , and as often studied in Econometrics. Package We implement a fully flexible setup, where we allow 1. coefficients ( \\(\\alpha\\) , \\(\\beta\\) , \\(\\gamma\\) , \\(\\dots\\) ) to be constant, user-specific (i.e., \\(\\alpha=\\alpha_u\\) ), item-specific (i.e., \\(\\alpha=\\alpha_i\\) ), session-specific (i.e., \\(\\alpha=\\alpha_t\\) ), or (session, item)-specific (i.e., \\(\\alpha=\\alpha_{ti}\\) ). For example, specifying \\(\\alpha\\) to be item-specific is equivalent to adding an item-level fixed effect. 2. Observables ( \\(X\\) , \\(Y\\) , \\(\\dots\\) ) to be constant, user-specific, item-specific, session-specific, or (session, item) (such as price) and (session, user) (such as income) specific as well. 3. Specifying availability sets \\(A_{us}\\) This flexibility in coefficients and features allows for more than 20 types of additive terms to \\(U_{uis}\\) , which enables modelling rich structures. As such, this package can be used to learn such models for 1. Parameter Estimation, as in the Transportation Choice example below 2. Prediction, as in the MNIST handwritten digits classification example below Examples with Utility Form: 1. Transportation Choice (from the Mode Canada dataset) (Detailed Tutorial) \\[ U_{uit} = \\beta^0_i + \\beta^{1} X^{itemsession: (cost, freq, ovt)}_{it} + \\beta^2_i X^{session:income}_t + \\beta^3_i X_{it}^{itemsession:ivt} + \\epsilon_{uit} \\] This is also described as a conditional logit model in Econometrics. We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case there is one user per session, so that U = S Then, - \\(X^{itemsession: (cost, freq, ovt)}_{it}\\) is a matrix of size (I x S) x (3); it has three entries for each item-session, and is like a price; its coefficient \\(\\beta^{1}\\) has constant variation and is of size (1) x (3). - \\(X^{session: income}_{it}\\) is a matrix which is of size (S) x (1); it has one entry for each session, and it denotes income of the user making the choice in the session. In this case, it is equivalent to \\(X^{usersession: income}_{it}\\) since we observe a user making a decision only once; its coefficient \\(\\beta^2_i\\) has item level variation and is of size (I) x (1) - \\(X_{it}^{itemsession:ivt}\\) is a matrix of size (I x S) x (1); this has one entry for each item-session; it is the price; its coefficent \\(\\beta^3_i\\) has item level variation and is of size (I) x (3) MNIST classification (Upcoming Detailed Tutorial) \\[ U_{it} = \\beta_i X^{session:pixelvalues}_{t} + \\epsilon_{it} \\] We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case, an item is one of the 10 possible digits, so I = 10; there is one user per session, so that U=S; and each session is an image being classified. Then, - \\(X^{session:pixelvalues}_{t}\\) is a matrix of size (S) x (H x W) where H x W are the dimensions of the image being classified; its coefficient \\(\\beta_i\\) has item level vartiation and is of size (I) x (1) This is a classic problem used for exposition in Computer Science to motivate various Machine Learning models. There is no concept of a user in this setup. Our package allows for models of this nature and is fully usable for Machine Learning problems with added flexibility over scikit-learn logistic regression We highly recommend users to go through tutorials we prepared to get a better understanding of what the package offers. We present multiple examples, and for each case we specify the utility form. Installation Clone the repository to your local machine or server. Install required dependencies using: pip3 install -r requirements.txt . Run pip3 install torch-choice . Check installation by running python3 -c 'import torch_choice; print(torch_choice.__version__)' . The installation page provides more details on installation. Example Usage - Transportation Choice Dataset In this demonstration, we setup a minimal example of fitting a conditional logit model using our package. We provide equivalent R code as well for reference, to aid replicating from R to this package. We are modelling people's choices on transportation modes using the publicly available ModeCanada dataset. More information about the ModeCanada: Mode Choice for the Montreal-Toronto Corridor . In this example, we are estimating the utility for user \\(u\\) to choose transport method \\(i\\) in session \\(s\\) as $$ U_{uis} = \\alpha_i + \\beta_i \\text{income}_s + \\gamma \\text{cost} + \\delta \\text{freq} + \\eta \\text{ovt} + \\iota_i \\text{ivt} + \\varepsilon $$ this is equivalent to the functional form described in the previous section Mode Canada with Torch-Choice # load packages. import pandas as pd import torch_choice # load data. df = pd . read_csv ( 'https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/ModeCanada.csv?token=GHSAT0AAAAAABRGHCCSNNQARRMU63W7P7F4YWYP5HA' ) . query ( 'noalt == 4' ) . reset_index ( drop = True ) # format data. data = torch_choice . utils . easy_data_wrapper . EasyDatasetWrapper ( main_data = df , purchase_record_column = 'case' , choice_column = 'choice' , item_name_column = 'alt' , user_index_column = 'case' , session_index_column = 'case' , session_observable_columns = [ 'income' ], price_observable_columns = [ 'cost' , 'freq' , 'ovt' , 'ivt' ]) # define the conditional logit model. model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'price_cost' : 'constant' , 'price_freq' : 'constant' , 'price_ovt' : 'constant' , 'session_income' : 'item' , 'price_ivt' : 'item-full' , 'intercept' : 'item' }, num_items = 4 ) # fit the conditional logit model. torch_choice . utils . run_helper . run ( model , data . choice_dataset , num_epochs = 5000 , learning_rate = 0.01 , batch_size =- 1 ) Mode Canada with R We include the R code for the ModeCanada example as well. # load packages. library(\"mlogit\") # load data. ModeCanada <- read.csv('https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/ModeCanada.csv?token=GHSAT0AAAAAABRGHCCSNNQARRMU63W7P7F4YWYP5HA') ModeCanada <- select(ModeCanada, -X) ModeCanada$alt <- as.factor(ModeCanada$alt) # format data. MC <- dfidx(ModeCanada, subset = noalt == 4) # fit the data. ml.MC1 <- mlogit(choice ~ cost + freq + ovt | income | ivt, MC, reflevel='air') summary(ml.MC1) What's in the package? Overall, the torch-choice package offers the following features: The package includes a data management module called ChoiceDataset , which is built upon PyTorch's dataset module. Our dataset implementation allows users to easily move data between CPU and GPU. Unlike traditional long or wide formats, the ChoiceDataset offers a memory-efficient way to manage observables. The package provides a (1) conditional logit model and (2) a nested logit model for consumer choice modeling. The package leverage GPU acceleration using PyTorch and easily scale to large dataset of millions of choice records. All models are trained using state-of-the-art optimizers by in PyTorch. These optimization algorithms are tested to be scalable by modern machine learning practitioners. However, you can rest assure that the package runs flawlessly when no GPU is used as well. Setting up the PyTorch training pipelines can be frustrating. We provide easy-to-use PyTorch lightning wrapper of models to free researchers from the hassle from setting up PyTorch optimizers and training loops.","title":"Home"},{"location":"#torch-choice","text":"Authors: Tianyu Du, Ayush Kanodia and Susan Athey; Contact: tianyudu@stanford.edu Acknowledgements: We would like to thank Erik Sverdrup, Charles Pebereau and Keshav Agrawal for their feedback. torch-choice is a library for flexible, fast choice modeling with PyTorch: it has logit and nested logit models, designed for both estimation and prediction. See the complete documentation for more details. Unique features: 1. GPU support via torch for speed 2. Specify customized models 3. Specify availability sets 4. Maximum Likelihood Estimation (MLE) (optionally, reporting standard errors or MAP inference with Bayesian Priors on coefficients) 5. Estimation via minimization of Cross Entropy Loss (optionally with L1/L2 regularization)","title":"torch-choice"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#logistic-regression-and-choice-models","text":"Logistic Regression models the probability that user \\(u\\) chooses item \\(i\\) in session \\(s\\) by the logistic function \\[ P_{uis} = \\frac{e^{\\mu_{uis}}}{\\Sigma_{j \\in A_{us}}e^{\\mu_{ujs}}} \\] where, \\[\\mu_{uis} = \\alpha + \\beta X + \\gamma W + \\dots\\] here \\(X\\) , \\(W\\) are predictors (independent variables) for users and items respectively (these can be constant or can vary across session), and greek letters \\(\\alpha\\) , \\(\\beta\\) and \\(\\gamma\\) are learned parameters. \\(A_{us}\\) is the set of items available for user \\(u\\) in session \\(s\\) . When users are choosing over items, we can write utility \\(U_{uis}\\) that user \\(u\\) derives from item \\(i\\) in session \\(s\\) , as \\[ U_{uis} = \\mu_{uis} + \\epsilon_{uis} \\] where \\(\\epsilon\\) is an unobserved random error term. If we assume iid extreme value type 1 errors for \\(\\epsilon_{uis}\\) , this leads to the above logistic probabilities of user \\(u\\) choosing item \\(i\\) in session \\(s\\) , as shown by McFadden , and as often studied in Econometrics.","title":"Logistic Regression and Choice Models"},{"location":"#package","text":"We implement a fully flexible setup, where we allow 1. coefficients ( \\(\\alpha\\) , \\(\\beta\\) , \\(\\gamma\\) , \\(\\dots\\) ) to be constant, user-specific (i.e., \\(\\alpha=\\alpha_u\\) ), item-specific (i.e., \\(\\alpha=\\alpha_i\\) ), session-specific (i.e., \\(\\alpha=\\alpha_t\\) ), or (session, item)-specific (i.e., \\(\\alpha=\\alpha_{ti}\\) ). For example, specifying \\(\\alpha\\) to be item-specific is equivalent to adding an item-level fixed effect. 2. Observables ( \\(X\\) , \\(Y\\) , \\(\\dots\\) ) to be constant, user-specific, item-specific, session-specific, or (session, item) (such as price) and (session, user) (such as income) specific as well. 3. Specifying availability sets \\(A_{us}\\) This flexibility in coefficients and features allows for more than 20 types of additive terms to \\(U_{uis}\\) , which enables modelling rich structures. As such, this package can be used to learn such models for 1. Parameter Estimation, as in the Transportation Choice example below 2. Prediction, as in the MNIST handwritten digits classification example below Examples with Utility Form: 1. Transportation Choice (from the Mode Canada dataset) (Detailed Tutorial) \\[ U_{uit} = \\beta^0_i + \\beta^{1} X^{itemsession: (cost, freq, ovt)}_{it} + \\beta^2_i X^{session:income}_t + \\beta^3_i X_{it}^{itemsession:ivt} + \\epsilon_{uit} \\] This is also described as a conditional logit model in Econometrics. We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case there is one user per session, so that U = S Then, - \\(X^{itemsession: (cost, freq, ovt)}_{it}\\) is a matrix of size (I x S) x (3); it has three entries for each item-session, and is like a price; its coefficient \\(\\beta^{1}\\) has constant variation and is of size (1) x (3). - \\(X^{session: income}_{it}\\) is a matrix which is of size (S) x (1); it has one entry for each session, and it denotes income of the user making the choice in the session. In this case, it is equivalent to \\(X^{usersession: income}_{it}\\) since we observe a user making a decision only once; its coefficient \\(\\beta^2_i\\) has item level variation and is of size (I) x (1) - \\(X_{it}^{itemsession:ivt}\\) is a matrix of size (I x S) x (1); this has one entry for each item-session; it is the price; its coefficent \\(\\beta^3_i\\) has item level variation and is of size (I) x (3) MNIST classification (Upcoming Detailed Tutorial) \\[ U_{it} = \\beta_i X^{session:pixelvalues}_{t} + \\epsilon_{it} \\] We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case, an item is one of the 10 possible digits, so I = 10; there is one user per session, so that U=S; and each session is an image being classified. Then, - \\(X^{session:pixelvalues}_{t}\\) is a matrix of size (S) x (H x W) where H x W are the dimensions of the image being classified; its coefficient \\(\\beta_i\\) has item level vartiation and is of size (I) x (1) This is a classic problem used for exposition in Computer Science to motivate various Machine Learning models. There is no concept of a user in this setup. Our package allows for models of this nature and is fully usable for Machine Learning problems with added flexibility over scikit-learn logistic regression We highly recommend users to go through tutorials we prepared to get a better understanding of what the package offers. We present multiple examples, and for each case we specify the utility form.","title":"Package"},{"location":"#installation","text":"Clone the repository to your local machine or server. Install required dependencies using: pip3 install -r requirements.txt . Run pip3 install torch-choice . Check installation by running python3 -c 'import torch_choice; print(torch_choice.__version__)' . The installation page provides more details on installation.","title":"Installation"},{"location":"#example-usage-transportation-choice-dataset","text":"In this demonstration, we setup a minimal example of fitting a conditional logit model using our package. We provide equivalent R code as well for reference, to aid replicating from R to this package. We are modelling people's choices on transportation modes using the publicly available ModeCanada dataset. More information about the ModeCanada: Mode Choice for the Montreal-Toronto Corridor . In this example, we are estimating the utility for user \\(u\\) to choose transport method \\(i\\) in session \\(s\\) as $$ U_{uis} = \\alpha_i + \\beta_i \\text{income}_s + \\gamma \\text{cost} + \\delta \\text{freq} + \\eta \\text{ovt} + \\iota_i \\text{ivt} + \\varepsilon $$ this is equivalent to the functional form described in the previous section","title":"Example Usage - Transportation Choice Dataset"},{"location":"#mode-canada-with-torch-choice","text":"# load packages. import pandas as pd import torch_choice # load data. df = pd . read_csv ( 'https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/ModeCanada.csv?token=GHSAT0AAAAAABRGHCCSNNQARRMU63W7P7F4YWYP5HA' ) . query ( 'noalt == 4' ) . reset_index ( drop = True ) # format data. data = torch_choice . utils . easy_data_wrapper . EasyDatasetWrapper ( main_data = df , purchase_record_column = 'case' , choice_column = 'choice' , item_name_column = 'alt' , user_index_column = 'case' , session_index_column = 'case' , session_observable_columns = [ 'income' ], price_observable_columns = [ 'cost' , 'freq' , 'ovt' , 'ivt' ]) # define the conditional logit model. model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'price_cost' : 'constant' , 'price_freq' : 'constant' , 'price_ovt' : 'constant' , 'session_income' : 'item' , 'price_ivt' : 'item-full' , 'intercept' : 'item' }, num_items = 4 ) # fit the conditional logit model. torch_choice . utils . run_helper . run ( model , data . choice_dataset , num_epochs = 5000 , learning_rate = 0.01 , batch_size =- 1 )","title":"Mode Canada with Torch-Choice"},{"location":"#mode-canada-with-r","text":"We include the R code for the ModeCanada example as well. # load packages. library(\"mlogit\") # load data. ModeCanada <- read.csv('https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/ModeCanada.csv?token=GHSAT0AAAAAABRGHCCSNNQARRMU63W7P7F4YWYP5HA') ModeCanada <- select(ModeCanada, -X) ModeCanada$alt <- as.factor(ModeCanada$alt) # format data. MC <- dfidx(ModeCanada, subset = noalt == 4) # fit the data. ml.MC1 <- mlogit(choice ~ cost + freq + ovt | income | ivt, MC, reflevel='air') summary(ml.MC1)","title":"Mode Canada with R"},{"location":"#whats-in-the-package","text":"Overall, the torch-choice package offers the following features: The package includes a data management module called ChoiceDataset , which is built upon PyTorch's dataset module. Our dataset implementation allows users to easily move data between CPU and GPU. Unlike traditional long or wide formats, the ChoiceDataset offers a memory-efficient way to manage observables. The package provides a (1) conditional logit model and (2) a nested logit model for consumer choice modeling. The package leverage GPU acceleration using PyTorch and easily scale to large dataset of millions of choice records. All models are trained using state-of-the-art optimizers by in PyTorch. These optimization algorithms are tested to be scalable by modern machine learning practitioners. However, you can rest assure that the package runs flawlessly when no GPU is used as well. Setting up the PyTorch training pipelines can be frustrating. We provide easy-to-use PyTorch lightning wrapper of models to free researchers from the hassle from setting up PyTorch optimizers and training loops.","title":"What's in the package?"},{"location":"all_model_specification/","text":"# import required dependencies. from tqdm import tqdm import numpy as np import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\") # let's get a helper def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' ) Creating ChoiceDataset Object # Feel free to modify it as you want. num_users = 10 num_items = 4 num_sessions = 500 length_of_dataset = 10000 # create observables/features, the number of parameters are arbitrarily chosen. # generate 128 features for each user, e.g., race, gender. user_obs = torch . randn ( num_users , 128 ) # generate 64 features for each user, e.g., quality. item_obs = torch . randn ( num_items , 64 ) # generate 32 features for each user item pair. useritem_obs = torch . randn ( num_users , num_items , 32 ) # generate 10 features for each session, e.g., weekday indicator. session_obs = torch . randn ( num_sessions , 10 ) # generate 12 features for each session user pair, e.g., the budget of that user at the shopping day. price_obs = torch . randn ( num_sessions , num_items , 12 ) # generate 16 useritemsession observable. usersessionitem_obs = torch . randn ( num_users , num_sessions , num_items , 16 ) We then generate random observable tensors for users, items, sessions and price observables, the size of observables of each type (i.e., the last dimension in the shape) is arbitrarily chosen. Notes on Encodings Since we will be using PyTorch to train our model, we represent their identities with consecutive integer values instead of the raw human-readable names of items (e.g., Dell 24-inch LCD monitor). Similarly, you would need to encode user indices and session indices as well. Raw item names can be encoded easily with sklearn.preprocessing.LabelEncoder (The sklearn.preprocessing.OrdinalEncoder works as well). item_index = torch . LongTensor ( np . random . choice ( num_items , size = length_of_dataset )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = length_of_dataset )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = length_of_dataset )) # assume all items are available in all sessions. item_availability = torch . ones ( num_sessions , num_items ) . bool () Step 2: Initialize the ChoiceDataset . You can construct a choice set using the following code, which manage all information for you. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , user_obs = user_obs , item_obs = item_obs , useritem_obs = useritem_obs , session_obs = session_obs , price_obs = price_obs , usersessionitem_obs = usersessionitem_obs ) What you can do with the ChoiceDataset ? print(dataset) and dataset.__str__ The command print(dataset) will provide a quick overview of shapes of tensors included in the object as well as where the dataset is located (i.e., host memory or GPU memory). print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], price_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 16], device=cpu) Confirm Correctness using the x_dict Method The port between ChoiceDataset and model classes is a method called x_dict in the dataset. The x_dict method compiles all information in the dataset into a dictionary, with observable names as keys, and all values of this dictionary are tensors with shape (length_of_dataset, num_items, *. The *` denotes the number of corresponding observables and could be different for different observable tensors. print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.useritem_obs.shape=torch.Size([10000, 4, 32]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.price_obs.shape=torch.Size([10000, 4, 12]) dict.usersessionitem_obs.shape=torch.Size([10000, 4, 16]) # check the `x_dict` indeed have what we are expecting, test 10 random records. for n in tqdm ( np . random . choice ( length_of_dataset , 10 )): u = user_index [ n ] s = session_index [ n ] for i in range ( num_items ): for k in range ( 128 ): expected = user_obs [ u , k ] got = dataset . x_dict [ \"user_obs\" ][ n , i , k ] assert expected == got for k in range ( 64 ): expected = item_obs [ i , k ] got = dataset . x_dict [ \"item_obs\" ][ n , i , k ] assert expected == got for k in range ( 32 ): expected = useritem_obs [ u , i , k ] got = dataset . x_dict [ \"useritem_obs\" ][ n , i , k ] assert expected == got for k in range ( 10 ): expected = session_obs [ s , k ] got = dataset . x_dict [ \"session_obs\" ][ n , i , k ] assert expected == got for k in range ( 12 ): expected = price_obs [ s , i , k ] got = dataset . x_dict [ \"price_obs\" ][ n , i , k ] assert expected == got for k in range ( 16 ): expected = usersessionitem_obs [ u , s , i , k ] got = dataset . x_dict [ \"usersessionitem_obs\" ][ n , i , k ] assert expected == got print ( \"all good!\" ) 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:17<00:00, 1.74s/it] all good! Build a CLM Model from time import time from torch_choice.model import ConditionalLogitModel from torch_choice import run model = model = ConditionalLogitModel ( formula = '(user_obs|item) + (item_obs|user) + (useritem_obs|constant) + (session_obs|item) + (price_obs|constant) + (usersessionitem_obs|constant) + (intercept|item)' , dataset = dataset , num_users = num_users , num_items = num_items ) model ConditionalLogitModel( (coef_dict): ModuleDict( (user_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=128, 384 trainable parameters in total, device=cpu). (item_obs[user]): Coefficient(variation=user, num_items=4, num_users=10, num_params=64, 640 trainable parameters in total, device=cpu). (useritem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=32, 32 trainable parameters in total, device=cpu). (session_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=10, 30 trainable parameters in total, device=cpu). (price_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=12, 12 trainable parameters in total, device=cpu). (usersessionitem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=16, 16 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[user_obs[item]] with 128 parameters, with item level variation. X[item_obs[user]] with 64 parameters, with user level variation. X[useritem_obs[constant]] with 32 parameters, with constant level variation. X[session_obs[item]] with 10 parameters, with item level variation. X[price_obs[constant]] with 12 parameters, with constant level variation. X[usersessionitem_obs[constant]] with 16 parameters, with constant level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu start_time = time () run ( model , dataset , num_epochs = 10 , learning_rate = 0.01 , model_optimizer = \"Adam\" , batch_size =- 1 ) print ( 'Time taken:' , time () - start_time ) GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (user_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=128, 384 trainable parameters in total, device=cpu). (item_obs[user]): Coefficient(variation=user, num_items=4, num_users=10, num_params=64, 640 trainable parameters in total, device=cpu). (useritem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=32, 32 trainable parameters in total, device=cpu). (session_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=10, 30 trainable parameters in total, device=cpu). (price_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=12, 12 trainable parameters in total, device=cpu). (usersessionitem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=16, 16 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[user_obs[item]] with 128 parameters, with item level variation. X[item_obs[user]] with 64 parameters, with user level variation. X[useritem_obs[constant]] with 32 parameters, with constant level variation. X[session_obs[item]] with 10 parameters, with item level variation. X[price_obs[constant]] with 12 parameters, with constant level variation. X[usersessionitem_obs[constant]] with 16 parameters, with constant level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], price_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 16], device=cpu) [Validation dataset] None [Test dataset] None /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/setup.py:201: UserWarning: MPS available but not used. Set `accelerator` and `devices` using `Trainer(accelerator='mps', devices=1)`. rank_zero_warn( /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/configuration_validator.py:108: PossibleUserWarning: You defined a `validation_step` but have no `val_dataloader`. Skipping val loop. rank_zero_warn( | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 1.1 K ------------------------------------------------ 1.1 K Trainable params 0 Non-trainable params 1.1 K Total params 0.004 Total estimated model params size (MB) /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:224: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 10 which is the number of cpus on this machine) in the `DataLoader` init to improve performance. rank_zero_warn( Epoch 9: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 44.40it/s, loss=7.1e+04, v_num=44] `Trainer.fit` stopped: `max_epochs=10` reached. Epoch 9: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 39.46it/s, loss=7.1e+04, v_num=44] Time taken for training: 0.9634578227996826 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -56230.62890625, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------------|-------------:|------------:|--------------:|--------------:|:---------------| | user_obs[item]_0 | -0.0889893 | 139.667 | -0.000637154 | 0.999492 | | | user_obs[item]_1 | -0.0341076 | nan | nan | nan | | | user_obs[item]_2 | -0.0982556 | nan | nan | nan | | | user_obs[item]_3 | 0.0670713 | 18.9429 | 0.00354071 | 0.997175 | | | user_obs[item]_4 | 0.0836471 | nan | nan | nan | | | user_obs[item]_5 | 0.0925889 | nan | nan | nan | | | user_obs[item]_6 | 0.0884399 | 37.105 | 0.0023835 | 0.998098 | | | user_obs[item]_7 | -0.0993338 | nan | nan | nan | | | user_obs[item]_8 | 0.0396195 | nan | nan | nan | | | user_obs[item]_9 | -0.000340273 | 24.0647 | -1.41399e-05 | 0.999989 | | | user_obs[item]_10 | 0.0980912 | 65.7966 | 0.00149082 | 0.99881 | | | user_obs[item]_11 | 0.0712994 | 25.9504 | 0.00274752 | 0.997808 | | | user_obs[item]_12 | -0.0654005 | nan | nan | nan | | | user_obs[item]_13 | 0.0673973 | nan | nan | nan | | | user_obs[item]_14 | 0.0940802 | nan | nan | nan | | | user_obs[item]_15 | -0.0938857 | 30.5794 | -0.00307023 | 0.99755 | | | user_obs[item]_16 | -0.0425794 | 47.2045 | -0.000902021 | 0.99928 | | | user_obs[item]_17 | 0.0794171 | 44.3518 | 0.00179062 | 0.998571 | | | user_obs[item]_18 | -0.0998146 | nan | nan | nan | | | user_obs[item]_19 | 0.0852862 | 6.97753 | 0.012223 | 0.990248 | | | user_obs[item]_20 | 0.05898 | nan | nan | nan | | | user_obs[item]_21 | -0.0854324 | nan | nan | nan | | | user_obs[item]_22 | -0.0237377 | nan | nan | nan | | | user_obs[item]_23 | 0.10116 | 20.1079 | 0.00503089 | 0.995986 | | | user_obs[item]_24 | 0.0741224 | 46.0753 | 0.00160872 | 0.998716 | | | user_obs[item]_25 | 0.0865076 | 58.1918 | 0.0014866 | 0.998814 | | | user_obs[item]_26 | 0.0521571 | 51.714 | 0.00100857 | 0.999195 | | | user_obs[item]_27 | 0.0759137 | nan | nan | nan | | | user_obs[item]_28 | -0.0809748 | nan | nan | nan | | | user_obs[item]_29 | -0.054031 | 25.3736 | -0.00212942 | 0.998301 | | | user_obs[item]_30 | -0.0164601 | 18.0856 | -0.000910124 | 0.999274 | | | user_obs[item]_31 | -0.080897 | 57.7205 | -0.00140153 | 0.998882 | | | user_obs[item]_32 | -0.0909767 | 37.1174 | -0.00245105 | 0.998044 | | | user_obs[item]_33 | 0.0485426 | nan | nan | nan | | | user_obs[item]_34 | -0.0734832 | 31.7805 | -0.00231221 | 0.998155 | | | user_obs[item]_35 | 0.0980138 | 20.8498 | 0.00470096 | 0.996249 | | | user_obs[item]_36 | 0.0955767 | nan | nan | nan | | | user_obs[item]_37 | 0.0555144 | 97.5976 | 0.000568809 | 0.999546 | | | user_obs[item]_38 | 0.0946894 | nan | nan | nan | | | user_obs[item]_39 | 0.0555615 | nan | nan | nan | | | user_obs[item]_40 | -0.100283 | 108.641 | -0.00092307 | 0.999263 | | | user_obs[item]_41 | -0.0225418 | nan | nan | nan | | | user_obs[item]_42 | 0.0648984 | nan | nan | nan | | | user_obs[item]_43 | -0.100141 | nan | nan | nan | | | user_obs[item]_44 | -0.0892176 | 54.9148 | -0.00162466 | 0.998704 | | | user_obs[item]_45 | 0.0068979 | 34.171 | 0.000201864 | 0.999839 | | | user_obs[item]_46 | 0.0980878 | 111.224 | 0.000881892 | 0.999296 | | | user_obs[item]_47 | 0.100062 | nan | nan | nan | | | user_obs[item]_48 | 0.0889476 | 119.958 | 0.000741491 | 0.999408 | | | user_obs[item]_49 | -0.0980555 | 87.2634 | -0.00112367 | 0.999103 | | | user_obs[item]_50 | -0.00933557 | 65.2444 | -0.000143086 | 0.999886 | | | user_obs[item]_51 | 0.0365757 | 19.2679 | 0.00189827 | 0.998485 | | | user_obs[item]_52 | -0.00636163 | 51.2761 | -0.000124066 | 0.999901 | | | user_obs[item]_53 | -0.0921691 | 24.4548 | -0.00376896 | 0.996993 | | | user_obs[item]_54 | 0.0908732 | 57.6774 | 0.00157554 | 0.998743 | | | user_obs[item]_55 | 0.0971482 | 20.9316 | 0.00464121 | 0.996297 | | | user_obs[item]_56 | 0.0900242 | 49.1325 | 0.00183227 | 0.998538 | | | user_obs[item]_57 | -0.0802871 | nan | nan | nan | | | user_obs[item]_58 | 0.070944 | nan | nan | nan | | | user_obs[item]_59 | 0.089703 | nan | nan | nan | | | user_obs[item]_60 | 0.0615047 | nan | nan | nan | | | user_obs[item]_61 | 0.101459 | 60.6506 | 0.00167284 | 0.998665 | | | user_obs[item]_62 | 0.0843676 | 51.1154 | 0.00165053 | 0.998683 | | | user_obs[item]_63 | 0.0744298 | 50.0475 | 0.00148718 | 0.998813 | | | user_obs[item]_64 | 0.0484441 | 66.7117 | 0.000726171 | 0.999421 | | | user_obs[item]_65 | -0.0932577 | 47.0875 | -0.00198052 | 0.99842 | | | user_obs[item]_66 | 0.0937148 | nan | nan | nan | | | user_obs[item]_67 | 0.0938114 | nan | nan | nan | | | user_obs[item]_68 | 0.0919321 | 144.463 | 0.000636369 | 0.999492 | | | user_obs[item]_69 | -0.100955 | nan | nan | nan | | | user_obs[item]_70 | -0.0694414 | 28.964 | -0.00239751 | 0.998087 | | | user_obs[item]_71 | 0.0618674 | 141.564 | 0.000437029 | 0.999651 | | | user_obs[item]_72 | 0.0887234 | nan | nan | nan | | | user_obs[item]_73 | 0.0547917 | nan | nan | nan | | | user_obs[item]_74 | -0.0225696 | nan | nan | nan | | | user_obs[item]_75 | 0.0974109 | 21.2039 | 0.004594 | 0.996335 | | | user_obs[item]_76 | -0.0991129 | nan | nan | nan | | | user_obs[item]_77 | 0.100791 | nan | nan | nan | | | user_obs[item]_78 | -0.0773081 | nan | nan | nan | | | user_obs[item]_79 | 0.095945 | 21.3157 | 0.00450114 | 0.996409 | | | user_obs[item]_80 | -0.0946032 | 42.3599 | -0.00223332 | 0.998218 | | | user_obs[item]_81 | -0.0911672 | 8.6325 | -0.0105609 | 0.991574 | | | user_obs[item]_82 | 0.0901775 | 43.12 | 0.00209132 | 0.998331 | | | user_obs[item]_83 | 0.0354095 | nan | nan | nan | | | user_obs[item]_84 | 0.100448 | 28.0476 | 0.00358133 | 0.997143 | | | user_obs[item]_85 | -0.0448048 | nan | nan | nan | | | user_obs[item]_86 | 0.0958236 | 45.4539 | 0.00210815 | 0.998318 | | | user_obs[item]_87 | 0.0734553 | 43.357 | 0.00169419 | 0.998648 | | | user_obs[item]_88 | -0.0863962 | 40.7907 | -0.00211804 | 0.99831 | | | user_obs[item]_89 | 0.0714083 | 39.8753 | 0.00179079 | 0.998571 | | | user_obs[item]_90 | -0.0744745 | 82.7771 | -0.000899699 | 0.999282 | | | user_obs[item]_91 | 0.0926561 | 77.8328 | 0.00119045 | 0.99905 | | | user_obs[item]_92 | -0.0641654 | 32.6775 | -0.0019636 | 0.998433 | | | user_obs[item]_93 | -0.0825138 | 62.9386 | -0.00131102 | 0.998954 | | | user_obs[item]_94 | 0.0997649 | 38.279 | 0.00260625 | 0.997921 | | | user_obs[item]_95 | 0.0904881 | nan | nan | nan | | | user_obs[item]_96 | 0.0678373 | 151.095 | 0.00044897 | 0.999642 | | | user_obs[item]_97 | -0.0679895 | nan | nan | nan | | | user_obs[item]_98 | -0.0945796 | 57.5709 | -0.00164284 | 0.998689 | | | user_obs[item]_99 | -0.0876268 | nan | nan | nan | | | user_obs[item]_100 | 0.0973275 | nan | nan | nan | | | user_obs[item]_101 | 0.0733176 | nan | nan | nan | | | user_obs[item]_102 | -0.0915377 | nan | nan | nan | | | user_obs[item]_103 | 0.0939341 | 36.7327 | 0.00255723 | 0.99796 | | | user_obs[item]_104 | -0.0685851 | 57.6987 | -0.00118868 | 0.999052 | | | user_obs[item]_105 | 0.0894344 | nan | nan | nan | | | user_obs[item]_106 | 0.00271086 | nan | nan | nan | | | user_obs[item]_107 | 0.0411001 | 21.7561 | 0.00188913 | 0.998493 | | | user_obs[item]_108 | 0.0987024 | 28.026 | 0.00352181 | 0.99719 | | | user_obs[item]_109 | 0.0967847 | 26.5516 | 0.00364516 | 0.997092 | | | user_obs[item]_110 | 0.025779 | 25.6526 | 0.00100493 | 0.999198 | | | user_obs[item]_111 | -0.0944387 | nan | nan | nan | | | user_obs[item]_112 | -0.0997579 | nan | nan | nan | | | user_obs[item]_113 | -0.00786996 | nan | nan | nan | | | user_obs[item]_114 | 0.0873028 | nan | nan | nan | | | user_obs[item]_115 | 0.0969093 | nan | nan | nan | | | user_obs[item]_116 | -0.0933952 | nan | nan | nan | | | user_obs[item]_117 | 0.0953693 | 36.8322 | 0.00258929 | 0.997934 | | | user_obs[item]_118 | -0.0711203 | 44.3295 | -0.00160436 | 0.99872 | | | user_obs[item]_119 | 0.0387712 | nan | nan | nan | | | user_obs[item]_120 | -0.0718235 | 72.4445 | -0.000991428 | 0.999209 | | | user_obs[item]_121 | 0.0965576 | nan | nan | nan | | | user_obs[item]_122 | 0.0932075 | nan | nan | nan | | | user_obs[item]_123 | 0.0960881 | nan | nan | nan | | | user_obs[item]_124 | -0.0057018 | nan | nan | nan | | | user_obs[item]_125 | -0.0240208 | 59.3318 | -0.000404855 | 0.999677 | | | user_obs[item]_126 | -0.0832291 | nan | nan | nan | | | user_obs[item]_127 | -0.0127958 | 31.8142 | -0.000402203 | 0.999679 | | | user_obs[item]_128 | 0.0946697 | 39.9644 | 0.00236885 | 0.99811 | | | user_obs[item]_129 | 0.0955388 | nan | nan | nan | | | user_obs[item]_130 | -0.100848 | 29.1098 | -0.00346438 | 0.997236 | | | user_obs[item]_131 | -0.0897986 | nan | nan | nan | | | user_obs[item]_132 | -0.0893218 | nan | nan | nan | | | user_obs[item]_133 | -0.0987934 | 51.4924 | -0.0019186 | 0.998469 | | | user_obs[item]_134 | -0.0561973 | 8.48221 | -0.00662531 | 0.994714 | | | user_obs[item]_135 | 0.0591518 | nan | nan | nan | | | user_obs[item]_136 | -0.0981552 | nan | nan | nan | | | user_obs[item]_137 | -0.0920462 | 14.2351 | -0.00646616 | 0.994841 | | | user_obs[item]_138 | -0.088343 | 52.507 | -0.0016825 | 0.998658 | | | user_obs[item]_139 | -0.0847579 | nan | nan | nan | | | user_obs[item]_140 | 0.0964178 | nan | nan | nan | | | user_obs[item]_141 | -0.0954367 | 44.7388 | -0.0021332 | 0.998298 | | | user_obs[item]_142 | 0.0901083 | 59.9893 | 0.00150207 | 0.998802 | | | user_obs[item]_143 | -0.0976047 | nan | nan | nan | | | user_obs[item]_144 | 0.0893714 | 9.06721 | 0.00985655 | 0.992136 | | | user_obs[item]_145 | 0.0762919 | nan | nan | nan | | | user_obs[item]_146 | 0.100248 | 34.6165 | 0.00289595 | 0.997689 | | | user_obs[item]_147 | 0.0919174 | 24.59 | 0.00373801 | 0.997018 | | | user_obs[item]_148 | 0.0596661 | 15.9393 | 0.00374334 | 0.997013 | | | user_obs[item]_149 | 0.0956791 | 30.0228 | 0.00318688 | 0.997457 | | | user_obs[item]_150 | 0.0988285 | nan | nan | nan | | | user_obs[item]_151 | -0.0958375 | nan | nan | nan | | | user_obs[item]_152 | -0.0862783 | nan | nan | nan | | | user_obs[item]_153 | -0.096879 | 8.60707 | -0.0112557 | 0.991019 | | | user_obs[item]_154 | 0.0899647 | 26.4254 | 0.00340448 | 0.997284 | | | user_obs[item]_155 | -0.0971653 | 17.2313 | -0.00563889 | 0.995501 | | | user_obs[item]_156 | -0.0347459 | nan | nan | nan | | | user_obs[item]_157 | 0.0946411 | nan | nan | nan | | | user_obs[item]_158 | 0.0965939 | 33.4381 | 0.00288874 | 0.997695 | | | user_obs[item]_159 | -0.0987432 | 50.6435 | -0.00194977 | 0.998444 | | | user_obs[item]_160 | 0.0554879 | 54.8858 | 0.00101097 | 0.999193 | | | user_obs[item]_161 | 0.0916695 | nan | nan | nan | | | user_obs[item]_162 | 0.0903534 | 21.761 | 0.00415209 | 0.996687 | | | user_obs[item]_163 | 0.0925355 | nan | nan | nan | | | user_obs[item]_164 | -0.0157946 | 21.2459 | -0.000743417 | 0.999407 | | | user_obs[item]_165 | -0.0911579 | nan | nan | nan | | | user_obs[item]_166 | 0.0960882 | 22.7401 | 0.0042255 | 0.996629 | | | user_obs[item]_167 | -0.0921166 | 33.1998 | -0.00277461 | 0.997786 | | | user_obs[item]_168 | -0.0952001 | 16.7478 | -0.00568434 | 0.995465 | | | user_obs[item]_169 | 0.0906606 | nan | nan | nan | | | user_obs[item]_170 | -0.0929105 | 34.9538 | -0.0026581 | 0.997879 | | | user_obs[item]_171 | -0.0856273 | nan | nan | nan | | | user_obs[item]_172 | 0.0977275 | nan | nan | nan | | | user_obs[item]_173 | -0.0964915 | nan | nan | nan | | | user_obs[item]_174 | 0.0961557 | 34.6991 | 0.00277113 | 0.997789 | | | user_obs[item]_175 | -0.0868459 | nan | nan | nan | | | user_obs[item]_176 | 0.0997443 | nan | nan | nan | | | user_obs[item]_177 | -0.0936593 | nan | nan | nan | | | user_obs[item]_178 | 0.0896609 | nan | nan | nan | | | user_obs[item]_179 | -0.0921307 | nan | nan | nan | | | user_obs[item]_180 | 0.0989775 | nan | nan | nan | | | user_obs[item]_181 | -0.0934007 | nan | nan | nan | | | user_obs[item]_182 | -0.0954752 | nan | nan | nan | | | user_obs[item]_183 | 0.101086 | nan | nan | nan | | | user_obs[item]_184 | -0.042742 | nan | nan | nan | | | user_obs[item]_185 | -0.0904764 | nan | nan | nan | | | user_obs[item]_186 | 0.0580969 | nan | nan | nan | | | user_obs[item]_187 | 0.0472953 | 21.1506 | 0.00223613 | 0.998216 | | | user_obs[item]_188 | -0.0861624 | 21.6303 | -0.00398342 | 0.996822 | | | user_obs[item]_189 | -0.0496282 | 30.8671 | -0.0016078 | 0.998717 | | | user_obs[item]_190 | 0.0980903 | 40.4903 | 0.00242256 | 0.998067 | | | user_obs[item]_191 | -0.0999367 | nan | nan | nan | | | user_obs[item]_192 | 0.0937635 | nan | nan | nan | | | user_obs[item]_193 | 0.0932748 | nan | nan | nan | | | user_obs[item]_194 | -0.0912127 | 43.9686 | -0.0020745 | 0.998345 | | | user_obs[item]_195 | -0.0954091 | 56.3073 | -0.00169444 | 0.998648 | | | user_obs[item]_196 | 0.0946353 | nan | nan | nan | | | user_obs[item]_197 | 0.0775572 | 11.1232 | 0.00697254 | 0.994437 | | | user_obs[item]_198 | 0.0917828 | nan | nan | nan | | | user_obs[item]_199 | -0.0971661 | nan | nan | nan | | | user_obs[item]_200 | -0.0954552 | 22.4761 | -0.00424696 | 0.996611 | | | user_obs[item]_201 | -0.0986228 | nan | nan | nan | | | user_obs[item]_202 | -0.0948749 | 50.355 | -0.00188412 | 0.998497 | | | user_obs[item]_203 | 0.0887569 | nan | nan | nan | | | user_obs[item]_204 | -0.0736365 | nan | nan | nan | | | user_obs[item]_205 | 0.0945059 | 21.2864 | 0.00443973 | 0.996458 | | | user_obs[item]_206 | 0.0952938 | nan | nan | nan | | | user_obs[item]_207 | 0.0852773 | 31.1982 | 0.0027334 | 0.997819 | | | user_obs[item]_208 | 0.0331864 | nan | nan | nan | | | user_obs[item]_209 | 0.0887002 | nan | nan | nan | | | user_obs[item]_210 | -0.0987527 | nan | nan | nan | | | user_obs[item]_211 | 0.0601945 | 14.0004 | 0.00429948 | 0.99657 | | | user_obs[item]_212 | -0.100431 | nan | nan | nan | | | user_obs[item]_213 | -0.0950364 | nan | nan | nan | | | user_obs[item]_214 | -0.0846135 | nan | nan | nan | | | user_obs[item]_215 | -0.0983446 | nan | nan | nan | | | user_obs[item]_216 | -0.0899129 | 21.6253 | -0.00415776 | 0.996683 | | | user_obs[item]_217 | -0.0969675 | nan | nan | nan | | | user_obs[item]_218 | -0.0936005 | 19.6852 | -0.00475488 | 0.996206 | | | user_obs[item]_219 | 0.0243296 | nan | nan | nan | | | user_obs[item]_220 | 0.0801605 | nan | nan | nan | | | user_obs[item]_221 | -0.100749 | nan | nan | nan | | | user_obs[item]_222 | -0.0995452 | 7.18452 | -0.0138555 | 0.988945 | | | user_obs[item]_223 | -0.0914686 | 4.87038 | -0.0187806 | 0.985016 | | | user_obs[item]_224 | -0.0500416 | nan | nan | nan | | | user_obs[item]_225 | 0.00523383 | nan | nan | nan | | | user_obs[item]_226 | -0.00516245 | 35.3175 | -0.000146172 | 0.999883 | | | user_obs[item]_227 | -0.0835066 | nan | nan | nan | | | user_obs[item]_228 | -0.0900212 | nan | nan | nan | | | user_obs[item]_229 | -0.0921853 | nan | nan | nan | | | user_obs[item]_230 | 0.0933748 | 25.8102 | 0.00361775 | 0.997113 | | | user_obs[item]_231 | 0.0884962 | 5.54233 | 0.0159673 | 0.98726 | | | user_obs[item]_232 | -0.100834 | 31.0845 | -0.00324386 | 0.997412 | | | user_obs[item]_233 | -0.0706101 | 45.4504 | -0.00155356 | 0.99876 | | | user_obs[item]_234 | -0.100623 | 9.49371 | -0.0105989 | 0.991543 | | | user_obs[item]_235 | -0.0950226 | 9.10836 | -0.0104325 | 0.991676 | | | user_obs[item]_236 | 0.0787224 | nan | nan | nan | | | user_obs[item]_237 | 0.0516931 | nan | nan | nan | | | user_obs[item]_238 | 0.0795601 | nan | nan | nan | | | user_obs[item]_239 | -0.0991568 | 25.7028 | -0.00385782 | 0.996922 | | | user_obs[item]_240 | -0.100388 | 17.91 | -0.00560511 | 0.995528 | | | user_obs[item]_241 | -0.0956626 | nan | nan | nan | | | user_obs[item]_242 | -0.00400375 | 23.6861 | -0.000169034 | 0.999865 | | | user_obs[item]_243 | 0.0944553 | nan | nan | nan | | | user_obs[item]_244 | 0.0983843 | 48.3653 | 0.00203419 | 0.998377 | | | user_obs[item]_245 | -0.100297 | nan | nan | nan | | | user_obs[item]_246 | -0.0124805 | nan | nan | nan | | | user_obs[item]_247 | 0.0965049 | nan | nan | nan | | | user_obs[item]_248 | 0.0854822 | nan | nan | nan | | | user_obs[item]_249 | 0.0931216 | nan | nan | nan | | | user_obs[item]_250 | 0.0158794 | 28.2352 | 0.000562395 | 0.999551 | | | user_obs[item]_251 | -0.0952249 | nan | nan | nan | | | user_obs[item]_252 | 0.0919503 | 12.5916 | 0.00730253 | 0.994173 | | | user_obs[item]_253 | 0.0828517 | nan | nan | nan | | | user_obs[item]_254 | -0.0932373 | nan | nan | nan | | | user_obs[item]_255 | 0.100438 | 9.87784 | 0.010168 | 0.991887 | | | user_obs[item]_256 | -0.0985134 | 11.5526 | -0.00852738 | 0.993196 | | | user_obs[item]_257 | -0.095954 | nan | nan | nan | | | user_obs[item]_258 | -0.0860235 | nan | nan | nan | | | user_obs[item]_259 | 0.0939709 | nan | nan | nan | | | user_obs[item]_260 | 0.0654559 | nan | nan | nan | | | user_obs[item]_261 | 0.0999005 | 10.7345 | 0.00930653 | 0.992575 | | | user_obs[item]_262 | -0.0964731 | nan | nan | nan | | | user_obs[item]_263 | 0.0928897 | nan | nan | nan | | | user_obs[item]_264 | 0.0999005 | 21.306 | 0.00468885 | 0.996259 | | | user_obs[item]_265 | -0.0909176 | 11.2045 | -0.00811436 | 0.993526 | | | user_obs[item]_266 | 0.0922943 | 35.6997 | 0.0025853 | 0.997937 | | | user_obs[item]_267 | -0.0804861 | nan | nan | nan | | | user_obs[item]_268 | -0.0950919 | 10.6069 | -0.00896508 | 0.992847 | | | user_obs[item]_269 | -0.0514438 | nan | nan | nan | | | user_obs[item]_270 | -0.0884027 | 45.7692 | -0.00193149 | 0.998459 | | | user_obs[item]_271 | 0.0939372 | 4.13603 | 0.0227119 | 0.98188 | | | user_obs[item]_272 | 0.0456208 | 26.7976 | 0.00170242 | 0.998642 | | | user_obs[item]_273 | -0.0987425 | nan | nan | nan | | | user_obs[item]_274 | -0.0907353 | 15.5872 | -0.00582112 | 0.995355 | | | user_obs[item]_275 | -0.0895816 | nan | nan | nan | | | user_obs[item]_276 | 0.0891188 | nan | nan | nan | | | user_obs[item]_277 | -0.0987827 | nan | nan | nan | | | user_obs[item]_278 | -0.0972348 | nan | nan | nan | | | user_obs[item]_279 | 0.0966328 | nan | nan | nan | | | user_obs[item]_280 | 0.0951051 | nan | nan | nan | | | user_obs[item]_281 | 0.0975423 | 25.7122 | 0.00379362 | 0.996973 | | | user_obs[item]_282 | -0.0791925 | nan | nan | nan | | | user_obs[item]_283 | 0.0958204 | nan | nan | nan | | | user_obs[item]_284 | -0.03573 | 7.18889 | -0.00497016 | 0.996034 | | | user_obs[item]_285 | 0.0810994 | nan | nan | nan | | | user_obs[item]_286 | -0.0951336 | nan | nan | nan | | | user_obs[item]_287 | 0.0841253 | 30.7186 | 0.00273858 | 0.997815 | | | user_obs[item]_288 | -0.089892 | nan | nan | nan | | | user_obs[item]_289 | 0.00667884 | 19.0526 | 0.000350547 | 0.99972 | | | user_obs[item]_290 | -0.0998388 | nan | nan | nan | | | user_obs[item]_291 | -0.0946387 | nan | nan | nan | | | user_obs[item]_292 | 0.0621858 | nan | nan | nan | | | user_obs[item]_293 | 0.0741694 | nan | nan | nan | | | user_obs[item]_294 | -0.0965614 | nan | nan | nan | | | user_obs[item]_295 | 0.0154573 | nan | nan | nan | | | user_obs[item]_296 | 0.0974524 | 33.1169 | 0.00294268 | 0.997652 | | | user_obs[item]_297 | 0.0196788 | 11.5686 | 0.00170105 | 0.998643 | | | user_obs[item]_298 | 0.0849441 | 12.0542 | 0.00704682 | 0.994377 | | | user_obs[item]_299 | 0.086225 | nan | nan | nan | | | user_obs[item]_300 | -0.0914505 | nan | nan | nan | | | user_obs[item]_301 | 0.0921167 | 6.46036 | 0.0142588 | 0.988624 | | | user_obs[item]_302 | -0.0933694 | nan | nan | nan | | | user_obs[item]_303 | -0.0489442 | 29.5071 | -0.00165873 | 0.998677 | | | user_obs[item]_304 | -0.0915071 | 42.9878 | -0.00212868 | 0.998302 | | | user_obs[item]_305 | -0.0667167 | nan | nan | nan | | | user_obs[item]_306 | -0.0938267 | nan | nan | nan | | | user_obs[item]_307 | 0.0443927 | 20.2969 | 0.00218716 | 0.998255 | | | user_obs[item]_308 | 0.0775837 | 13.0335 | 0.00595263 | 0.995251 | | | user_obs[item]_309 | 0.0827553 | 9.05362 | 0.00914058 | 0.992707 | | | user_obs[item]_310 | 0.098086 | nan | nan | nan | | | user_obs[item]_311 | 0.0934891 | nan | nan | nan | | | user_obs[item]_312 | -0.0943368 | 21.9152 | -0.00430463 | 0.996565 | | | user_obs[item]_313 | -0.0976427 | 22.4439 | -0.00435051 | 0.996529 | | | user_obs[item]_314 | -0.0774443 | 8.54967 | -0.00905817 | 0.992773 | | | user_obs[item]_315 | 0.0536131 | 25.3484 | 0.00211504 | 0.998312 | | | user_obs[item]_316 | 0.0899316 | 13.7525 | 0.00653929 | 0.994782 | | | user_obs[item]_317 | 0.0912012 | nan | nan | nan | | | user_obs[item]_318 | -0.0992509 | nan | nan | nan | | | user_obs[item]_319 | -0.0153901 | 19.0264 | -0.000808883 | 0.999355 | | | user_obs[item]_320 | -0.100451 | 18.9858 | -0.00529086 | 0.995779 | | | user_obs[item]_321 | 0.0648664 | 9.6448 | 0.00672553 | 0.994634 | | | user_obs[item]_322 | 0.0956555 | nan | nan | nan | | | user_obs[item]_323 | -0.00337489 | 46.38 | -7.2766e-05 | 0.999942 | | | user_obs[item]_324 | -0.0889243 | 68.278 | -0.00130239 | 0.998961 | | | user_obs[item]_325 | 0.0320671 | 18.9087 | 0.00169589 | 0.998647 | | | user_obs[item]_326 | -0.0959391 | 13.0347 | -0.0073603 | 0.994127 | | | user_obs[item]_327 | 0.00849687 | nan | nan | nan | | | user_obs[item]_328 | 0.0979957 | 17.4037 | 0.00563072 | 0.995507 | | | user_obs[item]_329 | 0.0999434 | 13.6447 | 0.00732472 | 0.994156 | | | user_obs[item]_330 | 0.0902393 | 18.4601 | 0.00488835 | 0.9961 | | | user_obs[item]_331 | -0.0937392 | nan | nan | nan | | | user_obs[item]_332 | -0.0918172 | nan | nan | nan | | | user_obs[item]_333 | 0.077242 | nan | nan | nan | | | user_obs[item]_334 | 0.0490345 | nan | nan | nan | | | user_obs[item]_335 | -0.0348693 | 25.5131 | -0.00136672 | 0.99891 | | | user_obs[item]_336 | -0.0219657 | nan | nan | nan | | | user_obs[item]_337 | -0.0996667 | 5.13986 | -0.0193909 | 0.984529 | | | user_obs[item]_338 | 0.0939913 | nan | nan | nan | | | user_obs[item]_339 | 0.0801734 | nan | nan | nan | | | user_obs[item]_340 | 0.0905974 | nan | nan | nan | | | user_obs[item]_341 | 0.0943427 | 24.0998 | 0.00391467 | 0.996877 | | | user_obs[item]_342 | -0.0936997 | 22.9254 | -0.00408717 | 0.996739 | | | user_obs[item]_343 | 0.0956675 | nan | nan | nan | | | user_obs[item]_344 | 0.0924433 | nan | nan | nan | | | user_obs[item]_345 | 0.101126 | 30.9882 | 0.00326336 | 0.997396 | | | user_obs[item]_346 | 0.0918561 | 30.0324 | 0.00305856 | 0.99756 | | | user_obs[item]_347 | -0.0245837 | 38.7188 | -0.000634929 | 0.999493 | | | user_obs[item]_348 | -0.0896538 | nan | nan | nan | | | user_obs[item]_349 | 0.0947577 | nan | nan | nan | | | user_obs[item]_350 | 0.0985861 | 13.4305 | 0.00734046 | 0.994143 | | | user_obs[item]_351 | 0.0979897 | nan | nan | nan | | | user_obs[item]_352 | 0.0999614 | 21.67 | 0.00461289 | 0.996319 | | | user_obs[item]_353 | 0.0822363 | 10.8624 | 0.00757076 | 0.993959 | | | user_obs[item]_354 | -0.0967529 | nan | nan | nan | | | user_obs[item]_355 | -0.0241711 | 11.2837 | -0.00214212 | 0.998291 | | | user_obs[item]_356 | 0.0973434 | nan | nan | nan | | | user_obs[item]_357 | -0.0788176 | 5.33626 | -0.0147702 | 0.988216 | | | user_obs[item]_358 | -0.0964527 | nan | nan | nan | | | user_obs[item]_359 | -0.0906674 | nan | nan | nan | | | user_obs[item]_360 | 0.0743494 | 19.7904 | 0.00375685 | 0.997002 | | | user_obs[item]_361 | -0.0918878 | 15.1822 | -0.00605235 | 0.995171 | | | user_obs[item]_362 | 0.0670612 | nan | nan | nan | | | user_obs[item]_363 | 0.0951579 | 7.74944 | 0.0122793 | 0.990203 | | | user_obs[item]_364 | 0.0961641 | 10.0334 | 0.00958435 | 0.992353 | | | user_obs[item]_365 | -0.0716678 | nan | nan | nan | | | user_obs[item]_366 | 0.000673009 | nan | nan | nan | | | user_obs[item]_367 | 0.0941488 | nan | nan | nan | | | user_obs[item]_368 | 0.100942 | nan | nan | nan | | | user_obs[item]_369 | 0.0993893 | nan | nan | nan | | | user_obs[item]_370 | 0.100108 | 11.1383 | 0.00898776 | 0.992829 | | | user_obs[item]_371 | 0.0221737 | nan | nan | nan | | | user_obs[item]_372 | -0.098036 | nan | nan | nan | | | user_obs[item]_373 | 0.0977015 | nan | nan | nan | | | user_obs[item]_374 | -0.0474964 | 6.59998 | -0.00719644 | 0.994258 | | | user_obs[item]_375 | -0.0979622 | 18.7567 | -0.00522279 | 0.995833 | | | user_obs[item]_376 | 0.0885426 | nan | nan | nan | | | user_obs[item]_377 | -0.0919497 | nan | nan | nan | | | user_obs[item]_378 | -0.0564472 | nan | nan | nan | | | user_obs[item]_379 | 0.0964465 | 7.6299 | 0.0126406 | 0.989915 | | | user_obs[item]_380 | 0.0248318 | 21.5719 | 0.00115112 | 0.999082 | | | user_obs[item]_381 | -0.10122 | nan | nan | nan | | | user_obs[item]_382 | 0.0836685 | 30.0802 | 0.00278152 | 0.997781 | | | user_obs[item]_383 | -0.00442575 | nan | nan | nan | | | item_obs[user]_0 | 0.0953294 | nan | nan | nan | | | item_obs[user]_1 | 0.0849606 | nan | nan | nan | | | item_obs[user]_2 | -0.074826 | 11.5431 | -0.00648234 | 0.994828 | | | item_obs[user]_3 | -0.0930095 | nan | nan | nan | | | item_obs[user]_4 | -0.088183 | nan | nan | nan | | | item_obs[user]_5 | -0.0985564 | nan | nan | nan | | | item_obs[user]_6 | 0.082744 | 24.3046 | 0.00340446 | 0.997284 | | | item_obs[user]_7 | -0.0800593 | 27.0081 | -0.00296427 | 0.997635 | | | item_obs[user]_8 | -0.0951243 | nan | nan | nan | | | item_obs[user]_9 | -0.0879356 | nan | nan | nan | | | item_obs[user]_10 | 0.096148 | 34.1177 | 0.00281813 | 0.997751 | | | item_obs[user]_11 | -0.0197937 | nan | nan | nan | | | item_obs[user]_12 | 0.00669822 | 37.6851 | 0.000177742 | 0.999858 | | | item_obs[user]_13 | -0.0797179 | nan | nan | nan | | | item_obs[user]_14 | 0.036266 | nan | nan | nan | | | item_obs[user]_15 | 0.0701227 | nan | nan | nan | | | item_obs[user]_16 | 0.0723617 | nan | nan | nan | | | item_obs[user]_17 | 0.0411248 | nan | nan | nan | | | item_obs[user]_18 | -0.0554874 | 22.3587 | -0.00248169 | 0.99802 | | | item_obs[user]_19 | -0.0863106 | nan | nan | nan | | | item_obs[user]_20 | 0.0677762 | nan | nan | nan | | | item_obs[user]_21 | -0.0538812 | nan | nan | nan | | | item_obs[user]_22 | 0.0669267 | nan | nan | nan | | | item_obs[user]_23 | -0.064349 | nan | nan | nan | | | item_obs[user]_24 | -0.0746401 | nan | nan | nan | | | item_obs[user]_25 | -0.0784752 | nan | nan | nan | | | item_obs[user]_26 | 0.0728878 | 36.6919 | 0.00198648 | 0.998415 | | | item_obs[user]_27 | 0.0765257 | nan | nan | nan | | | item_obs[user]_28 | 0.079921 | nan | nan | nan | | | item_obs[user]_29 | 0.0753488 | 44.7365 | 0.00168428 | 0.998656 | | | item_obs[user]_30 | 0.0669301 | 14.2758 | 0.00468836 | 0.996259 | | | item_obs[user]_31 | -0.0371062 | nan | nan | nan | | | item_obs[user]_32 | 0.0682146 | nan | nan | nan | | | item_obs[user]_33 | 0.0834677 | nan | nan | nan | | | item_obs[user]_34 | 0.0153546 | nan | nan | nan | | | item_obs[user]_35 | 0.0685816 | nan | nan | nan | | | item_obs[user]_36 | -0.0880266 | 29.742 | -0.00295968 | 0.997639 | | | item_obs[user]_37 | -0.0885725 | 5.39468 | -0.0164185 | 0.986901 | | | item_obs[user]_38 | 0.09194 | nan | nan | nan | | | item_obs[user]_39 | 0.0756242 | nan | nan | nan | | | item_obs[user]_40 | -0.0287947 | nan | nan | nan | | | item_obs[user]_41 | 0.0585076 | 13.8805 | 0.0042151 | 0.996637 | | | item_obs[user]_42 | 0.0564173 | 6.45187 | 0.00874434 | 0.993023 | | | item_obs[user]_43 | 0.0635485 | 8.21708 | 0.0077337 | 0.993829 | | | item_obs[user]_44 | -0.0873843 | 48.6134 | -0.00179754 | 0.998566 | | | item_obs[user]_45 | -0.0834753 | 94.0016 | -0.00088802 | 0.999291 | | | item_obs[user]_46 | 0.0764609 | 14.8363 | 0.00515363 | 0.995888 | | | item_obs[user]_47 | 0.0274219 | 43.366 | 0.000632336 | 0.999495 | | | item_obs[user]_48 | -0.0873803 | nan | nan | nan | | | item_obs[user]_49 | -0.0816547 | 2.08968 | -0.0390751 | 0.96883 | | | item_obs[user]_50 | -0.0226442 | nan | nan | nan | | | item_obs[user]_51 | -0.0956599 | nan | nan | nan | | | item_obs[user]_52 | 0.0783386 | nan | nan | nan | | | item_obs[user]_53 | -0.0633794 | 13.9623 | -0.00453934 | 0.996378 | | | item_obs[user]_54 | 0.0953538 | 26.6147 | 0.00358275 | 0.997141 | | | item_obs[user]_55 | 0.055353 | nan | nan | nan | | | item_obs[user]_56 | 0.0908716 | nan | nan | nan | | | item_obs[user]_57 | 0.0607073 | 41.2198 | 0.00147277 | 0.998825 | | | item_obs[user]_58 | -0.0720462 | 19.1767 | -0.00375698 | 0.997002 | | | item_obs[user]_59 | -0.0603374 | 54.1613 | -0.00111403 | 0.999111 | | | item_obs[user]_60 | -0.0185613 | nan | nan | nan | | | item_obs[user]_61 | 0.0708304 | 9.38333 | 0.00754853 | 0.993977 | | | item_obs[user]_62 | 0.0791017 | 7.72274 | 0.0102427 | 0.991828 | | | item_obs[user]_63 | -0.0571787 | nan | nan | nan | | | item_obs[user]_64 | 0.0329169 | 121.471 | 0.000270985 | 0.999784 | | | item_obs[user]_65 | 0.0226816 | nan | nan | nan | | | item_obs[user]_66 | -0.00637343 | nan | nan | nan | | | item_obs[user]_67 | -0.0545586 | nan | nan | nan | | | item_obs[user]_68 | -0.0317221 | 32.09 | -0.000988538 | 0.999211 | | | item_obs[user]_69 | -0.0943223 | 17.817 | -0.00529395 | 0.995776 | | | item_obs[user]_70 | 0.00471362 | nan | nan | nan | | | item_obs[user]_71 | -0.00793153 | nan | nan | nan | | | item_obs[user]_72 | -0.0335794 | nan | nan | nan | | | item_obs[user]_73 | -0.0309263 | 2.68062 | -0.011537 | 0.990795 | | | item_obs[user]_74 | 0.0303063 | nan | nan | nan | | | item_obs[user]_75 | -0.0732667 | nan | nan | nan | | | item_obs[user]_76 | -0.0098093 | 27.1032 | -0.000361924 | 0.999711 | | | item_obs[user]_77 | -0.0138997 | nan | nan | nan | | | item_obs[user]_78 | -0.0118171 | 7.5586 | -0.0015634 | 0.998753 | | | item_obs[user]_79 | 0.0233654 | nan | nan | nan | | | item_obs[user]_80 | 0.0030736 | 37.2507 | 8.25112e-05 | 0.999934 | | | item_obs[user]_81 | 0.0177793 | nan | nan | nan | | | item_obs[user]_82 | -0.071604 | 15.0995 | -0.00474214 | 0.996216 | | | item_obs[user]_83 | -0.0261888 | nan | nan | nan | | | item_obs[user]_84 | 0.0011142 | nan | nan | nan | | | item_obs[user]_85 | 0.0014559 | 47.6001 | 3.0586e-05 | 0.999976 | | | item_obs[user]_86 | 0.00310078 | nan | nan | nan | | | item_obs[user]_87 | 0.0195079 | 0.511697 | 0.038124 | 0.969589 | | | item_obs[user]_88 | -0.00919021 | 19.8504 | -0.000462973 | 0.999631 | | | item_obs[user]_89 | -0.0123839 | nan | nan | nan | | | item_obs[user]_90 | -0.0103893 | nan | nan | nan | | | item_obs[user]_91 | 0.0105079 | nan | nan | nan | | | item_obs[user]_92 | 0.0145338 | nan | nan | nan | | | item_obs[user]_93 | 0.00834626 | nan | nan | nan | | | item_obs[user]_94 | 0.00379122 | 26.508 | 0.000143022 | 0.999886 | | | item_obs[user]_95 | 0.0260624 | nan | nan | nan | | | item_obs[user]_96 | -0.00103211 | 30.4632 | -3.38804e-05 | 0.999973 | | | item_obs[user]_97 | 0.00749817 | nan | nan | nan | | | item_obs[user]_98 | -0.00386528 | nan | nan | nan | | | item_obs[user]_99 | -0.00175826 | 14.1111 | -0.000124602 | 0.999901 | | | item_obs[user]_100 | -0.0241035 | 25.1352 | -0.000958957 | 0.999235 | | | item_obs[user]_101 | -0.0250482 | 10.4112 | -0.00240589 | 0.99808 | | | item_obs[user]_102 | 0.055889 | nan | nan | nan | | | item_obs[user]_103 | 0.000421926 | nan | nan | nan | | | item_obs[user]_104 | 0.0110912 | nan | nan | nan | | | item_obs[user]_105 | -0.00341909 | nan | nan | nan | | | item_obs[user]_106 | -0.00352724 | nan | nan | nan | | | item_obs[user]_107 | -0.00643651 | nan | nan | nan | | | item_obs[user]_108 | -0.0288748 | 107.796 | -0.000267866 | 0.999786 | | | item_obs[user]_109 | -0.016833 | nan | nan | nan | | | item_obs[user]_110 | 0.0100099 | nan | nan | nan | | | item_obs[user]_111 | -0.0096791 | 34.0665 | -0.000284123 | 0.999773 | | | item_obs[user]_112 | -0.0285409 | 80.6287 | -0.000353979 | 0.999718 | | | item_obs[user]_113 | -0.0169635 | 17.9643 | -0.000944288 | 0.999247 | | | item_obs[user]_114 | -0.00225602 | 31.8136 | -7.09138e-05 | 0.999943 | | | item_obs[user]_115 | -0.0541435 | 60.7676 | -0.000890993 | 0.999289 | | | item_obs[user]_116 | 0.00810096 | 20.7395 | 0.000390605 | 0.999688 | | | item_obs[user]_117 | -0.0162214 | 37.0959 | -0.000437283 | 0.999651 | | | item_obs[user]_118 | 0.0258092 | 10.9363 | 0.00235996 | 0.998117 | | | item_obs[user]_119 | -2.26311e-05 | 40.026 | -5.65411e-07 | 1 | | | item_obs[user]_120 | 0.0415286 | 13.5548 | 0.00306376 | 0.997555 | | | item_obs[user]_121 | -0.0207364 | nan | nan | nan | | | item_obs[user]_122 | -0.0065696 | 20.8918 | -0.000314458 | 0.999749 | | | item_obs[user]_123 | 0.0190524 | 14.869 | 0.00128136 | 0.998978 | | | item_obs[user]_124 | 0.0316112 | nan | nan | nan | | | item_obs[user]_125 | 0.00614487 | nan | nan | nan | | | item_obs[user]_126 | 0.0134792 | 19.8742 | 0.000678223 | 0.999459 | | | item_obs[user]_127 | -0.0351917 | nan | nan | nan | | | item_obs[user]_128 | 0.082355 | nan | nan | nan | | | item_obs[user]_129 | 0.095309 | 18.8028 | 0.00506887 | 0.995956 | | | item_obs[user]_130 | -0.0879696 | 29.2859 | -0.00300382 | 0.997603 | | | item_obs[user]_131 | -0.0830043 | 37.5038 | -0.00221323 | 0.998234 | | | item_obs[user]_132 | -0.0896925 | nan | nan | nan | | | item_obs[user]_133 | -0.0930006 | nan | nan | nan | | | item_obs[user]_134 | 0.0713312 | 37.349 | 0.00190986 | 0.998476 | | | item_obs[user]_135 | -0.0770028 | 15.9662 | -0.00482285 | 0.996152 | | | item_obs[user]_136 | -0.0784881 | 36.5061 | -0.00215 | 0.998285 | | | item_obs[user]_137 | -0.0899085 | nan | nan | nan | | | item_obs[user]_138 | 0.0795249 | 52.347 | 0.00151919 | 0.998788 | | | item_obs[user]_139 | -0.100354 | 56.5839 | -0.00177354 | 0.998585 | | | item_obs[user]_140 | -0.0748308 | nan | nan | nan | | | item_obs[user]_141 | -0.0945848 | nan | nan | nan | | | item_obs[user]_142 | -0.0841109 | nan | nan | nan | | | item_obs[user]_143 | 0.0791375 | nan | nan | nan | | | item_obs[user]_144 | 0.075823 | 24.9554 | 0.00303834 | 0.997576 | | | item_obs[user]_145 | 0.0782816 | nan | nan | nan | | | item_obs[user]_146 | -0.100106 | 33.423 | -0.00299513 | 0.99761 | | | item_obs[user]_147 | -0.0894256 | 43.4752 | -0.00205694 | 0.998359 | | | item_obs[user]_148 | -0.0748489 | 6.55435 | -0.0114197 | 0.990889 | | | item_obs[user]_149 | 0.0691177 | nan | nan | nan | | | item_obs[user]_150 | -0.0574347 | 16.2724 | -0.00352958 | 0.997184 | | | item_obs[user]_151 | 0.0294429 | nan | nan | nan | | | item_obs[user]_152 | 0.00563431 | 39.8466 | 0.0001414 | 0.999887 | | | item_obs[user]_153 | -0.096552 | 17.4384 | -0.00553676 | 0.995582 | | | item_obs[user]_154 | 0.0450145 | nan | nan | nan | | | item_obs[user]_155 | 0.0976836 | 50.7942 | 0.00192313 | 0.998466 | | | item_obs[user]_156 | 0.0980685 | 14.9795 | 0.00654686 | 0.994776 | | | item_obs[user]_157 | 0.0968644 | 21.2062 | 0.00456774 | 0.996355 | | | item_obs[user]_158 | -0.0524446 | 17.5892 | -0.00298163 | 0.997621 | | | item_obs[user]_159 | 0.0945053 | 54.6474 | 0.00172936 | 0.99862 | | | item_obs[user]_160 | -0.0973398 | nan | nan | nan | | | item_obs[user]_161 | 0.0734301 | 26.8878 | 0.00273098 | 0.997821 | | | item_obs[user]_162 | -0.0609306 | 22.0643 | -0.0027615 | 0.997797 | | | item_obs[user]_163 | -0.101368 | nan | nan | nan | | | item_obs[user]_164 | -0.0810076 | 16.8674 | -0.00480262 | 0.996168 | | | item_obs[user]_165 | -0.080903 | nan | nan | nan | | | item_obs[user]_166 | 0.0833991 | nan | nan | nan | | | item_obs[user]_167 | 0.0658189 | 27.7891 | 0.00236851 | 0.99811 | | | item_obs[user]_168 | 0.0812031 | 7.48511 | 0.0108486 | 0.991344 | | | item_obs[user]_169 | -0.0805171 | nan | nan | nan | | | item_obs[user]_170 | -0.0787244 | nan | nan | nan | | | item_obs[user]_171 | -0.0975392 | 8.79285 | -0.011093 | 0.991149 | | | item_obs[user]_172 | -0.0924256 | 31.3937 | -0.00294408 | 0.997651 | | | item_obs[user]_173 | -0.0832566 | 46.9572 | -0.00177303 | 0.998585 | | | item_obs[user]_174 | 0.0980777 | 6.70879 | 0.0146193 | 0.988336 | | | item_obs[user]_175 | -0.078849 | nan | nan | nan | | | item_obs[user]_176 | -0.0933594 | nan | nan | nan | | | item_obs[user]_177 | -0.0952743 | 26.0786 | -0.00365334 | 0.997085 | | | item_obs[user]_178 | -0.0432346 | 44.2405 | -0.000977262 | 0.99922 | | | item_obs[user]_179 | -0.0840413 | 26.3496 | -0.00318947 | 0.997455 | | | item_obs[user]_180 | 0.0800613 | 11.4991 | 0.00696239 | 0.994445 | | | item_obs[user]_181 | -0.0740749 | 24.541 | -0.00301842 | 0.997592 | | | item_obs[user]_182 | 0.0782861 | 40.5394 | 0.00193111 | 0.998459 | | | item_obs[user]_183 | -0.0634375 | 34.7348 | -0.00182634 | 0.998543 | | | item_obs[user]_184 | 0.0908027 | 12.6804 | 0.0071609 | 0.994286 | | | item_obs[user]_185 | 0.0148654 | nan | nan | nan | | | item_obs[user]_186 | 0.0153121 | 7.12636 | 0.00214866 | 0.998286 | | | item_obs[user]_187 | 0.0999311 | 22.8033 | 0.0043823 | 0.996503 | | | item_obs[user]_188 | 0.0924136 | nan | nan | nan | | | item_obs[user]_189 | -0.0313981 | nan | nan | nan | | | item_obs[user]_190 | 0.0985501 | 10.9833 | 0.0089727 | 0.992841 | | | item_obs[user]_191 | -0.0859244 | 36.5846 | -0.00234865 | 0.998126 | | | item_obs[user]_192 | 0.0940064 | nan | nan | nan | | | item_obs[user]_193 | 0.0832584 | 32.0548 | 0.00259738 | 0.997928 | | | item_obs[user]_194 | 0.100225 | nan | nan | nan | | | item_obs[user]_195 | -0.0909778 | 9.19876 | -0.00989022 | 0.992109 | | | item_obs[user]_196 | -0.0874979 | nan | nan | nan | | | item_obs[user]_197 | -0.0938457 | 29.175 | -0.00321665 | 0.997433 | | | item_obs[user]_198 | -0.0937929 | 15.6314 | -0.00600031 | 0.995212 | | | item_obs[user]_199 | 0.0990231 | nan | nan | nan | | | item_obs[user]_200 | -0.0921627 | 11.5725 | -0.00796393 | 0.993646 | | | item_obs[user]_201 | -0.0871917 | 23.6936 | -0.00367996 | 0.997064 | | | item_obs[user]_202 | 0.0933521 | nan | nan | nan | | | item_obs[user]_203 | -0.0949833 | nan | nan | nan | | | item_obs[user]_204 | -0.0959055 | nan | nan | nan | | | item_obs[user]_205 | 0.0117426 | nan | nan | nan | | | item_obs[user]_206 | -0.0963619 | 6.62996 | -0.0145343 | 0.988404 | | | item_obs[user]_207 | 0.0942454 | 16.5252 | 0.00570314 | 0.99545 | | | item_obs[user]_208 | -0.0993581 | nan | nan | nan | | | item_obs[user]_209 | 0.0948967 | 4.04483 | 0.0234612 | 0.981282 | | | item_obs[user]_210 | -0.0947503 | nan | nan | nan | | | item_obs[user]_211 | -0.0834834 | nan | nan | nan | | | item_obs[user]_212 | -0.0986454 | nan | nan | nan | | | item_obs[user]_213 | 0.0977547 | 17.5796 | 0.00556067 | 0.995563 | | | item_obs[user]_214 | -0.0991265 | 25.6013 | -0.00387194 | 0.996911 | | | item_obs[user]_215 | 0.0972205 | 3.50911 | 0.0277052 | 0.977897 | | | item_obs[user]_216 | 0.0301802 | 24.2897 | 0.00124251 | 0.999009 | | | item_obs[user]_217 | 0.0561406 | 13.9829 | 0.00401496 | 0.996797 | | | item_obs[user]_218 | -0.098299 | 25.9009 | -0.0037952 | 0.996972 | | | item_obs[user]_219 | -0.0992086 | 32.7797 | -0.00302652 | 0.997585 | | | item_obs[user]_220 | 0.0253464 | nan | nan | nan | | | item_obs[user]_221 | -0.100714 | 23.3067 | -0.00432123 | 0.996552 | | | item_obs[user]_222 | -0.0995028 | 19.086 | -0.0052134 | 0.99584 | | | item_obs[user]_223 | 0.0961196 | nan | nan | nan | | | item_obs[user]_224 | -0.0984098 | nan | nan | nan | | | item_obs[user]_225 | -0.039659 | nan | nan | nan | | | item_obs[user]_226 | -0.0970929 | nan | nan | nan | | | item_obs[user]_227 | -0.0983761 | nan | nan | nan | | | item_obs[user]_228 | -0.0828517 | 31.4185 | -0.00263703 | 0.997896 | | | item_obs[user]_229 | -0.0843641 | 14.2476 | -0.00592128 | 0.995276 | | | item_obs[user]_230 | 0.0902104 | nan | nan | nan | | | item_obs[user]_231 | -0.0994968 | 29.1198 | -0.00341681 | 0.997274 | | | item_obs[user]_232 | 0.0962286 | nan | nan | nan | | | item_obs[user]_233 | -0.0975643 | 35.3898 | -0.00275685 | 0.9978 | | | item_obs[user]_234 | -0.09747 | nan | nan | nan | | | item_obs[user]_235 | -0.0976395 | nan | nan | nan | | | item_obs[user]_236 | -0.0871684 | nan | nan | nan | | | item_obs[user]_237 | -0.0422475 | nan | nan | nan | | | item_obs[user]_238 | -0.100429 | 15.8252 | -0.0063461 | 0.994937 | | | item_obs[user]_239 | -0.0962664 | 44.1614 | -0.00217988 | 0.998261 | | | item_obs[user]_240 | -0.0874716 | nan | nan | nan | | | item_obs[user]_241 | -0.0550082 | nan | nan | nan | | | item_obs[user]_242 | 0.0942492 | 19.712 | 0.00478131 | 0.996185 | | | item_obs[user]_243 | -0.0925776 | nan | nan | nan | | | item_obs[user]_244 | -0.100297 | 10.4662 | -0.00958297 | 0.992354 | | | item_obs[user]_245 | -0.0942868 | nan | nan | nan | | | item_obs[user]_246 | 0.0936042 | nan | nan | nan | | | item_obs[user]_247 | -0.0982692 | 41.5473 | -0.00236524 | 0.998113 | | | item_obs[user]_248 | 0.0904482 | nan | nan | nan | | | item_obs[user]_249 | -0.0960117 | nan | nan | nan | | | item_obs[user]_250 | 0.100448 | 29.5796 | 0.00339585 | 0.997291 | | | item_obs[user]_251 | 0.0970124 | nan | nan | nan | | | item_obs[user]_252 | 0.0957162 | nan | nan | nan | | | item_obs[user]_253 | -0.100491 | 8.99075 | -0.0111771 | 0.991082 | | | item_obs[user]_254 | -0.000854391 | nan | nan | nan | | | item_obs[user]_255 | -0.0946775 | 16.1911 | -0.00584749 | 0.995334 | | | item_obs[user]_256 | -0.0970131 | nan | nan | nan | | | item_obs[user]_257 | -0.0529265 | 89.3827 | -0.000592134 | 0.999528 | | | item_obs[user]_258 | 0.0968852 | 23.193 | 0.00417735 | 0.996667 | | | item_obs[user]_259 | 0.0969059 | nan | nan | nan | | | item_obs[user]_260 | 0.0915281 | nan | nan | nan | | | item_obs[user]_261 | -0.100793 | nan | nan | nan | | | item_obs[user]_262 | -0.0983033 | 51.1771 | -0.00192084 | 0.998467 | | | item_obs[user]_263 | 0.0977857 | nan | nan | nan | | | item_obs[user]_264 | 0.098056 | 12.0407 | 0.0081437 | 0.993502 | | | item_obs[user]_265 | 0.0912735 | nan | nan | nan | | | item_obs[user]_266 | -0.0979466 | 26.0132 | -0.00376527 | 0.996996 | | | item_obs[user]_267 | -0.0996658 | nan | nan | nan | | | item_obs[user]_268 | 0.0991034 | 11.0936 | 0.00893336 | 0.992872 | | | item_obs[user]_269 | 0.0929837 | nan | nan | nan | | | item_obs[user]_270 | -0.0987016 | 21.8965 | -0.00450765 | 0.996403 | | | item_obs[user]_271 | -0.0981278 | 21.354 | -0.00459529 | 0.996334 | | | item_obs[user]_272 | -0.0974374 | nan | nan | nan | | | item_obs[user]_273 | -0.0984176 | nan | nan | nan | | | item_obs[user]_274 | -0.0997197 | 15.2512 | -0.00653848 | 0.994783 | | | item_obs[user]_275 | 0.09348 | 35.9393 | 0.00260105 | 0.997925 | | | item_obs[user]_276 | -0.0969642 | nan | nan | nan | | | item_obs[user]_277 | -0.100422 | 40.003 | -0.00251035 | 0.997997 | | | item_obs[user]_278 | -0.0785515 | nan | nan | nan | | | item_obs[user]_279 | 0.0988289 | 22.1784 | 0.0044561 | 0.996445 | | | item_obs[user]_280 | -0.100634 | 30.8907 | -0.00325774 | 0.997401 | | | item_obs[user]_281 | 0.0922791 | 47.1989 | 0.00195511 | 0.99844 | | | item_obs[user]_282 | -0.0985925 | nan | nan | nan | | | item_obs[user]_283 | -0.0855048 | 109.686 | -0.00077954 | 0.999378 | | | item_obs[user]_284 | -0.079503 | 7.65406 | -0.010387 | 0.991712 | | | item_obs[user]_285 | -0.0951967 | nan | nan | nan | | | item_obs[user]_286 | 0.064595 | nan | nan | nan | | | item_obs[user]_287 | 0.0992524 | nan | nan | nan | | | item_obs[user]_288 | -0.0978423 | nan | nan | nan | | | item_obs[user]_289 | -0.0981954 | 8.2897 | -0.0118455 | 0.990549 | | | item_obs[user]_290 | 0.0993745 | nan | nan | nan | | | item_obs[user]_291 | -0.0979952 | nan | nan | nan | | | item_obs[user]_292 | 0.0974685 | 37.5531 | 0.00259549 | 0.997929 | | | item_obs[user]_293 | 0.0974931 | 20.8291 | 0.00468061 | 0.996265 | | | item_obs[user]_294 | -0.0967849 | 62.2247 | -0.00155541 | 0.998759 | | | item_obs[user]_295 | -0.0981366 | 8.26488 | -0.0118739 | 0.990526 | | | item_obs[user]_296 | -0.00655038 | 12.5499 | -0.000521946 | 0.999584 | | | item_obs[user]_297 | -0.097014 | nan | nan | nan | | | item_obs[user]_298 | -0.0959909 | nan | nan | nan | | | item_obs[user]_299 | -0.0983391 | 3.06209 | -0.0321151 | 0.97438 | | | item_obs[user]_300 | 0.0789196 | nan | nan | nan | | | item_obs[user]_301 | 0.0970505 | nan | nan | nan | | | item_obs[user]_302 | -0.0930589 | nan | nan | nan | | | item_obs[user]_303 | 0.0994269 | 60.973 | 0.00163067 | 0.998699 | | | item_obs[user]_304 | 0.0624469 | 30.8561 | 0.00202381 | 0.998385 | | | item_obs[user]_305 | 0.0875897 | nan | nan | nan | | | item_obs[user]_306 | 0.0993594 | 15.1301 | 0.00656701 | 0.99476 | | | item_obs[user]_307 | 0.096207 | nan | nan | nan | | | item_obs[user]_308 | -0.0974722 | 14.7545 | -0.00660625 | 0.994729 | | | item_obs[user]_309 | 0.0987371 | nan | nan | nan | | | item_obs[user]_310 | -0.098197 | 48.1707 | -0.00203852 | 0.998373 | | | item_obs[user]_311 | 0.100163 | nan | nan | nan | | | item_obs[user]_312 | -0.0765836 | 11.3691 | -0.00673609 | 0.994625 | | | item_obs[user]_313 | -0.0992518 | 23.0874 | -0.00429897 | 0.99657 | | | item_obs[user]_314 | 0.081712 | 20.5884 | 0.00396884 | 0.996833 | | | item_obs[user]_315 | 0.0988516 | nan | nan | nan | | | item_obs[user]_316 | 0.0995762 | nan | nan | nan | | | item_obs[user]_317 | 0.0199967 | 5.69144 | 0.00351346 | 0.997197 | | | item_obs[user]_318 | -0.0811777 | 17.7111 | -0.00458345 | 0.996343 | | | item_obs[user]_319 | 0.0594883 | 36.3683 | 0.00163572 | 0.998695 | | | item_obs[user]_320 | -0.0706452 | 127.149 | -0.000555611 | 0.999557 | | | item_obs[user]_321 | 0.0932138 | nan | nan | nan | | | item_obs[user]_322 | 0.0957365 | nan | nan | nan | | | item_obs[user]_323 | 0.0888632 | 15.3586 | 0.0057859 | 0.995384 | | | item_obs[user]_324 | 0.0148378 | 34.7338 | 0.000427185 | 0.999659 | | | item_obs[user]_325 | -0.0959005 | 3.56834 | -0.0268754 | 0.978559 | | | item_obs[user]_326 | -0.0936275 | 31.0117 | -0.00301911 | 0.997591 | | | item_obs[user]_327 | 0.094207 | 46.1988 | 0.00203917 | 0.998373 | | | item_obs[user]_328 | 0.0904799 | nan | nan | nan | | | item_obs[user]_329 | 0.00110466 | 21.3344 | 5.17785e-05 | 0.999959 | | | item_obs[user]_330 | -0.088346 | nan | nan | nan | | | item_obs[user]_331 | -0.0946461 | 47.9157 | -0.00197526 | 0.998424 | | | item_obs[user]_332 | 0.0858891 | 31.448 | 0.00273115 | 0.997821 | | | item_obs[user]_333 | 0.0966716 | nan | nan | nan | | | item_obs[user]_334 | -0.0983847 | 30.7631 | -0.00319814 | 0.997448 | | | item_obs[user]_335 | -0.0862027 | nan | nan | nan | | | item_obs[user]_336 | -0.0956795 | nan | nan | nan | | | item_obs[user]_337 | -0.084618 | 13.3537 | -0.00633668 | 0.994944 | | | item_obs[user]_338 | -0.0945352 | nan | nan | nan | | | item_obs[user]_339 | 0.0895445 | 24.7765 | 0.00361409 | 0.997116 | | | item_obs[user]_340 | -0.0967957 | 14.8669 | -0.0065108 | 0.994805 | | | item_obs[user]_341 | -0.075029 | 36.2511 | -0.0020697 | 0.998349 | | | item_obs[user]_342 | -0.0974254 | 14.4251 | -0.00675388 | 0.994611 | | | item_obs[user]_343 | 0.0947823 | nan | nan | nan | | | item_obs[user]_344 | -0.091086 | nan | nan | nan | | | item_obs[user]_345 | 0.0975158 | nan | nan | nan | | | item_obs[user]_346 | -0.0944492 | 52.0876 | -0.00181328 | 0.998553 | | | item_obs[user]_347 | -0.0646427 | 97.4615 | -0.000663264 | 0.999471 | | | item_obs[user]_348 | 0.0679354 | 29.6162 | 0.00229386 | 0.99817 | | | item_obs[user]_349 | -0.0968292 | 43.9476 | -0.00220329 | 0.998242 | | | item_obs[user]_350 | 0.0696103 | nan | nan | nan | | | item_obs[user]_351 | 0.0957686 | nan | nan | nan | | | item_obs[user]_352 | -0.0958262 | 40.836 | -0.00234661 | 0.998128 | | | item_obs[user]_353 | -0.0935495 | 35.8829 | -0.00260708 | 0.99792 | | | item_obs[user]_354 | 0.091956 | nan | nan | nan | | | item_obs[user]_355 | -0.0956021 | 4.51372 | -0.0211803 | 0.983102 | | | item_obs[user]_356 | 0.0924389 | nan | nan | nan | | | item_obs[user]_357 | 0.0922818 | 15.5246 | 0.00594424 | 0.995257 | | | item_obs[user]_358 | -0.0894831 | nan | nan | nan | | | item_obs[user]_359 | -0.0946042 | nan | nan | nan | | | item_obs[user]_360 | 0.100855 | nan | nan | nan | | | item_obs[user]_361 | -0.0978983 | 7.57954 | -0.0129161 | 0.989695 | | | item_obs[user]_362 | -0.098857 | 10.7598 | -0.0091876 | 0.992669 | | | item_obs[user]_363 | -0.0956965 | 10.4204 | -0.00918361 | 0.992673 | | | item_obs[user]_364 | -0.0953318 | 31.3876 | -0.00303724 | 0.997577 | | | item_obs[user]_365 | 0.0936969 | 100.819 | 0.000929354 | 0.999258 | | | item_obs[user]_366 | -0.0978077 | nan | nan | nan | | | item_obs[user]_367 | -0.030269 | nan | nan | nan | | | item_obs[user]_368 | -0.0949272 | 26.6484 | -0.00356221 | 0.997158 | | | item_obs[user]_369 | 0.0185981 | nan | nan | nan | | | item_obs[user]_370 | 0.0932242 | 20.08 | 0.00464263 | 0.996296 | | | item_obs[user]_371 | 0.0784275 | 26.7891 | 0.00292758 | 0.997664 | | | item_obs[user]_372 | -0.0946762 | 20.9825 | -0.00451214 | 0.9964 | | | item_obs[user]_373 | 0.0904542 | nan | nan | nan | | | item_obs[user]_374 | -0.0890081 | nan | nan | nan | | | item_obs[user]_375 | 0.0875345 | 37.3756 | 0.00234202 | 0.998131 | | | item_obs[user]_376 | 0.0971968 | 9.30587 | 0.0104447 | 0.991667 | | | item_obs[user]_377 | -0.0939917 | nan | nan | nan | | | item_obs[user]_378 | 0.0703475 | 19.195 | 0.00366488 | 0.997076 | | | item_obs[user]_379 | 0.0950455 | 45.6899 | 0.00208023 | 0.99834 | | | item_obs[user]_380 | 0.096078 | nan | nan | nan | | | item_obs[user]_381 | 0.071838 | 4.46025 | 0.0161063 | 0.98715 | | | item_obs[user]_382 | 0.0437681 | nan | nan | nan | | | item_obs[user]_383 | -0.0996076 | nan | nan | nan | | | item_obs[user]_384 | 0.0925058 | 78.3725 | 0.00118034 | 0.999058 | | | item_obs[user]_385 | -0.0997655 | nan | nan | nan | | | item_obs[user]_386 | 0.0996641 | nan | nan | nan | | | item_obs[user]_387 | -0.0885556 | 6.50647 | -0.0136104 | 0.989141 | | | item_obs[user]_388 | -0.0394394 | 18.6329 | -0.00211665 | 0.998311 | | | item_obs[user]_389 | -0.0888595 | nan | nan | nan | | | item_obs[user]_390 | 0.0815189 | nan | nan | nan | | | item_obs[user]_391 | -0.00675963 | nan | nan | nan | | | item_obs[user]_392 | -0.0914254 | nan | nan | nan | | | item_obs[user]_393 | -0.0311297 | 35.5267 | -0.000876234 | 0.999301 | | | item_obs[user]_394 | 0.0921635 | nan | nan | nan | | | item_obs[user]_395 | 0.0857765 | 18.9483 | 0.00452688 | 0.996388 | | | item_obs[user]_396 | -0.0943922 | 11.9876 | -0.00787413 | 0.993717 | | | item_obs[user]_397 | 0.0998388 | 29.0521 | 0.00343655 | 0.997258 | | | item_obs[user]_398 | -0.0955568 | 36.7198 | -0.00260233 | 0.997924 | | | item_obs[user]_399 | 0.0929876 | nan | nan | nan | | | item_obs[user]_400 | -0.0994204 | nan | nan | nan | | | item_obs[user]_401 | 0.0935985 | 22.8397 | 0.00409806 | 0.99673 | | | item_obs[user]_402 | 0.0935873 | 17.6195 | 0.00531157 | 0.995762 | | | item_obs[user]_403 | -0.00388969 | 39.7795 | -9.77812e-05 | 0.999922 | | | item_obs[user]_404 | -0.0979633 | 8.70624 | -0.0112521 | 0.991022 | | | item_obs[user]_405 | 0.0957639 | 28.2247 | 0.00339291 | 0.997293 | | | item_obs[user]_406 | -0.0970069 | nan | nan | nan | | | item_obs[user]_407 | 0.100603 | 43.6991 | 0.00230217 | 0.998163 | | | item_obs[user]_408 | 0.0968577 | 29.672 | 0.00326428 | 0.997395 | | | item_obs[user]_409 | 0.0994124 | 44.7094 | 0.00222352 | 0.998226 | | | item_obs[user]_410 | 0.00833281 | nan | nan | nan | | | item_obs[user]_411 | -0.098528 | nan | nan | nan | | | item_obs[user]_412 | -0.0992177 | 21.6188 | -0.00458941 | 0.996338 | | | item_obs[user]_413 | -0.0990562 | 15.2129 | -0.00651134 | 0.994805 | | | item_obs[user]_414 | -0.0967073 | 14.7606 | -0.00655172 | 0.994773 | | | item_obs[user]_415 | 0.0964948 | nan | nan | nan | | | item_obs[user]_416 | -0.09874 | nan | nan | nan | | | item_obs[user]_417 | 0.0809907 | 55.8453 | 0.00145027 | 0.998843 | | | item_obs[user]_418 | -0.0942727 | nan | nan | nan | | | item_obs[user]_419 | -0.0990881 | 36.3365 | -0.00272696 | 0.997824 | | | item_obs[user]_420 | -0.0832632 | 13.1282 | -0.00634233 | 0.99494 | | | item_obs[user]_421 | -0.0844952 | nan | nan | nan | | | item_obs[user]_422 | 0.0872249 | 30.0539 | 0.00290228 | 0.997684 | | | item_obs[user]_423 | -0.0682815 | 37.9265 | -0.00180036 | 0.998564 | | | item_obs[user]_424 | 0.0951386 | 31.3659 | 0.00303318 | 0.99758 | | | item_obs[user]_425 | -0.09675 | nan | nan | nan | | | item_obs[user]_426 | -0.0964502 | 13.2103 | -0.00730117 | 0.994175 | | | item_obs[user]_427 | -0.0984184 | 13.0909 | -0.00751807 | 0.994002 | | | item_obs[user]_428 | 0.0355085 | nan | nan | nan | | | item_obs[user]_429 | -0.0303457 | 71.8596 | -0.000422291 | 0.999663 | | | item_obs[user]_430 | -0.0989598 | nan | nan | nan | | | item_obs[user]_431 | -0.0950014 | 10.5138 | -0.00903586 | 0.992791 | | | item_obs[user]_432 | 0.059162 | 19.8895 | 0.00297454 | 0.997627 | | | item_obs[user]_433 | 0.099902 | 26.4907 | 0.00377121 | 0.996991 | | | item_obs[user]_434 | -0.0936469 | nan | nan | nan | | | item_obs[user]_435 | -0.0902371 | nan | nan | nan | | | item_obs[user]_436 | -0.0969874 | 19.8906 | -0.00487605 | 0.996109 | | | item_obs[user]_437 | -0.0932415 | nan | nan | nan | | | item_obs[user]_438 | 0.0925134 | nan | nan | nan | | | item_obs[user]_439 | -0.0956111 | nan | nan | nan | | | item_obs[user]_440 | 0.0624112 | nan | nan | nan | | | item_obs[user]_441 | 0.0909541 | 19.3149 | 0.00470901 | 0.996243 | | | item_obs[user]_442 | 0.0976485 | 5.79844 | 0.0168405 | 0.986564 | | | item_obs[user]_443 | 0.0999445 | nan | nan | nan | | | item_obs[user]_444 | 0.0954517 | 24.2489 | 0.00393633 | 0.996859 | | | item_obs[user]_445 | -0.0971528 | nan | nan | nan | | | item_obs[user]_446 | -0.0990373 | 5.69325 | -0.0173956 | 0.986121 | | | item_obs[user]_447 | -0.0932183 | 19.3147 | -0.00482627 | 0.996149 | | | item_obs[user]_448 | -0.0927753 | nan | nan | nan | | | item_obs[user]_449 | 0.0621279 | 30.3748 | 0.00204538 | 0.998368 | | | item_obs[user]_450 | -0.0809301 | nan | nan | nan | | | item_obs[user]_451 | 0.0994425 | 20.6135 | 0.00482413 | 0.996151 | | | item_obs[user]_452 | -0.00339906 | 44.1701 | -7.69537e-05 | 0.999939 | | | item_obs[user]_453 | 0.088211 | 19.9226 | 0.00442768 | 0.996467 | | | item_obs[user]_454 | 0.0713015 | nan | nan | nan | | | item_obs[user]_455 | -0.0759135 | nan | nan | nan | | | item_obs[user]_456 | 0.0990266 | 27.8852 | 0.00355122 | 0.997167 | | | item_obs[user]_457 | -0.0117378 | nan | nan | nan | | | item_obs[user]_458 | -0.0961448 | nan | nan | nan | | | item_obs[user]_459 | 0.0831571 | nan | nan | nan | | | item_obs[user]_460 | 0.0912292 | 51.1911 | 0.00178213 | 0.998578 | | | item_obs[user]_461 | -0.0786143 | nan | nan | nan | | | item_obs[user]_462 | 0.086667 | 23.4063 | 0.00370272 | 0.997046 | | | item_obs[user]_463 | -0.0937922 | nan | nan | nan | | | item_obs[user]_464 | 0.0816098 | nan | nan | nan | | | item_obs[user]_465 | -0.092377 | nan | nan | nan | | | item_obs[user]_466 | 0.0829483 | nan | nan | nan | | | item_obs[user]_467 | -0.0526504 | 60.7403 | -0.000866812 | 0.999308 | | | item_obs[user]_468 | 0.0834334 | nan | nan | nan | | | item_obs[user]_469 | -0.0878659 | nan | nan | nan | | | item_obs[user]_470 | 0.085108 | 11.3149 | 0.00752177 | 0.993999 | | | item_obs[user]_471 | -0.0813613 | nan | nan | nan | | | item_obs[user]_472 | -0.0868949 | 19.8092 | -0.00438659 | 0.9965 | | | item_obs[user]_473 | -0.0799593 | 20.2317 | -0.00395218 | 0.996847 | | | item_obs[user]_474 | 0.0792365 | 14.9123 | 0.0053135 | 0.99576 | | | item_obs[user]_475 | 0.0819139 | 9.91519 | 0.00826145 | 0.993408 | | | item_obs[user]_476 | 0.079369 | nan | nan | nan | | | item_obs[user]_477 | 0.0814347 | nan | nan | nan | | | item_obs[user]_478 | 0.0859619 | 10.2074 | 0.00842151 | 0.993281 | | | item_obs[user]_479 | -0.0847155 | nan | nan | nan | | | item_obs[user]_480 | 0.0825994 | 96.9404 | 0.000852064 | 0.99932 | | | item_obs[user]_481 | 0.0700469 | 12.9685 | 0.0054013 | 0.99569 | | | item_obs[user]_482 | 0.0979825 | nan | nan | nan | | | item_obs[user]_483 | 0.0822898 | 19.2019 | 0.00428551 | 0.996581 | | | item_obs[user]_484 | -0.0447001 | 34.3641 | -0.00130078 | 0.998962 | | | item_obs[user]_485 | -0.0377576 | 20.5678 | -0.00183576 | 0.998535 | | | item_obs[user]_486 | -0.096818 | 42.0827 | -0.00230066 | 0.998164 | | | item_obs[user]_487 | 0.0789985 | nan | nan | nan | | | item_obs[user]_488 | -0.0877571 | 17.5541 | -0.00499923 | 0.996011 | | | item_obs[user]_489 | 0.0851457 | nan | nan | nan | | | item_obs[user]_490 | 0.0856856 | 8.13371 | 0.0105346 | 0.991595 | | | item_obs[user]_491 | 0.0830748 | nan | nan | nan | | | item_obs[user]_492 | -0.0120651 | 75.8833 | -0.000158995 | 0.999873 | | | item_obs[user]_493 | -0.0706219 | nan | nan | nan | | | item_obs[user]_494 | 0.0812898 | nan | nan | nan | | | item_obs[user]_495 | 0.0884591 | 51.1858 | 0.0017282 | 0.998621 | | | item_obs[user]_496 | -0.000764623 | 17.3882 | -4.39738e-05 | 0.999965 | | | item_obs[user]_497 | -0.0763722 | nan | nan | nan | | | item_obs[user]_498 | -0.0622482 | 57.0773 | -0.00109059 | 0.99913 | | | item_obs[user]_499 | 0.0959818 | nan | nan | nan | | | item_obs[user]_500 | 0.0780311 | 13.5996 | 0.00573776 | 0.995422 | | | item_obs[user]_501 | 0.0965235 | nan | nan | nan | | | item_obs[user]_502 | -0.0960972 | nan | nan | nan | | | item_obs[user]_503 | 0.0890833 | nan | nan | nan | | | item_obs[user]_504 | -0.0988816 | 25.2671 | -0.00391345 | 0.996878 | | | item_obs[user]_505 | 0.0779958 | 43.1736 | 0.00180656 | 0.998559 | | | item_obs[user]_506 | -0.0838996 | nan | nan | nan | | | item_obs[user]_507 | -0.0823245 | nan | nan | nan | | | item_obs[user]_508 | -0.0856427 | nan | nan | nan | | | item_obs[user]_509 | 0.0850381 | 10.2073 | 0.00833112 | 0.993353 | | | item_obs[user]_510 | 0.0801802 | 15.8546 | 0.00505723 | 0.995965 | | | item_obs[user]_511 | 0.0894666 | nan | nan | nan | | | item_obs[user]_512 | 0.09686 | 11.4213 | 0.00848068 | 0.993233 | | | item_obs[user]_513 | -0.101392 | 112.293 | -0.000902922 | 0.99928 | | | item_obs[user]_514 | 0.101387 | 92.6231 | 0.00109462 | 0.999127 | | | item_obs[user]_515 | -0.0944149 | 11.5269 | -0.00819082 | 0.993465 | | | item_obs[user]_516 | -0.0550151 | nan | nan | nan | | | item_obs[user]_517 | -0.094628 | 24.6297 | -0.00384203 | 0.996935 | | | item_obs[user]_518 | 0.0907541 | 21.556 | 0.00421017 | 0.996641 | | | item_obs[user]_519 | -0.0512732 | nan | nan | nan | | | item_obs[user]_520 | -0.0961344 | 20.3319 | -0.00472827 | 0.996227 | | | item_obs[user]_521 | -0.046617 | nan | nan | nan | | | item_obs[user]_522 | 0.096604 | nan | nan | nan | | | item_obs[user]_523 | 0.0946415 | nan | nan | nan | | | item_obs[user]_524 | -0.0979703 | nan | nan | nan | | | item_obs[user]_525 | 0.101373 | 40.7102 | 0.00249012 | 0.998013 | | | item_obs[user]_526 | -0.09886 | nan | nan | nan | | | item_obs[user]_527 | 0.0971182 | 12.7973 | 0.00758894 | 0.993945 | | | item_obs[user]_528 | -0.10131 | nan | nan | nan | | | item_obs[user]_529 | 0.0974968 | nan | nan | nan | | | item_obs[user]_530 | 0.0966032 | nan | nan | nan | | | item_obs[user]_531 | -0.0222043 | nan | nan | nan | | | item_obs[user]_532 | -0.100382 | 28.1908 | -0.00356081 | 0.997159 | | | item_obs[user]_533 | 0.0988351 | 19.4841 | 0.00507261 | 0.995953 | | | item_obs[user]_534 | -0.0996468 | nan | nan | nan | | | item_obs[user]_535 | 0.0220482 | nan | nan | nan | | | item_obs[user]_536 | 0.0993891 | 27.55 | 0.00360759 | 0.997122 | | | item_obs[user]_537 | 0.101127 | nan | nan | nan | | | item_obs[user]_538 | 0.0659058 | nan | nan | nan | | | item_obs[user]_539 | -0.100557 | 53.8734 | -0.00186654 | 0.998511 | | | item_obs[user]_540 | -0.100945 | 27.2811 | -0.00370018 | 0.997048 | | | item_obs[user]_541 | -0.100976 | 6.00068 | -0.0168274 | 0.986574 | | | item_obs[user]_542 | -0.0994133 | 26.806 | -0.00370863 | 0.997041 | | | item_obs[user]_543 | 0.0998101 | 47.2879 | 0.00211069 | 0.998316 | | | item_obs[user]_544 | -0.100968 | nan | nan | nan | | | item_obs[user]_545 | 0.0904308 | 26.676 | 0.00338997 | 0.997295 | | | item_obs[user]_546 | -0.0977851 | nan | nan | nan | | | item_obs[user]_547 | -0.101204 | nan | nan | nan | | | item_obs[user]_548 | -0.091354 | nan | nan | nan | | | item_obs[user]_549 | -0.0920535 | nan | nan | nan | | | item_obs[user]_550 | 0.0936059 | nan | nan | nan | | | item_obs[user]_551 | -0.00462256 | nan | nan | nan | | | item_obs[user]_552 | 0.0985385 | nan | nan | nan | | | item_obs[user]_553 | -0.0995969 | 86.588 | -0.00115024 | 0.999082 | | | item_obs[user]_554 | -0.0993786 | nan | nan | nan | | | item_obs[user]_555 | -0.100863 | 21.6456 | -0.00465977 | 0.996282 | | | item_obs[user]_556 | 0.0455634 | nan | nan | nan | | | item_obs[user]_557 | -0.0602423 | 90.3012 | -0.000667126 | 0.999468 | | | item_obs[user]_558 | -0.100872 | nan | nan | nan | | | item_obs[user]_559 | -0.098416 | nan | nan | nan | | | item_obs[user]_560 | 0.0946484 | nan | nan | nan | | | item_obs[user]_561 | 0.101381 | nan | nan | nan | | | item_obs[user]_562 | -0.0972952 | 34.1918 | -0.00284557 | 0.99773 | | | item_obs[user]_563 | -0.0954583 | nan | nan | nan | | | item_obs[user]_564 | -0.0615614 | 23.7913 | -0.00258756 | 0.997935 | | | item_obs[user]_565 | -0.0972221 | nan | nan | nan | | | item_obs[user]_566 | 0.0968082 | nan | nan | nan | | | item_obs[user]_567 | -0.0986948 | nan | nan | nan | | | item_obs[user]_568 | 0.0729944 | 16.1102 | 0.00453095 | 0.996385 | | | item_obs[user]_569 | 0.0956325 | 75.9917 | 0.00125846 | 0.998996 | | | item_obs[user]_570 | 0.100028 | 18.0383 | 0.00554533 | 0.995575 | | | item_obs[user]_571 | 0.101555 | nan | nan | nan | | | item_obs[user]_572 | 0.0990644 | 66.289 | 0.00149443 | 0.998808 | | | item_obs[user]_573 | -0.0996809 | 16.4579 | -0.00605673 | 0.995167 | | | item_obs[user]_574 | -0.100842 | nan | nan | nan | | | item_obs[user]_575 | -0.0973879 | 14.9075 | -0.00653282 | 0.994788 | | | item_obs[user]_576 | -0.100981 | 207.749 | -0.000486071 | 0.999612 | | | item_obs[user]_577 | 0.0736564 | nan | nan | nan | | | item_obs[user]_578 | 0.0971491 | nan | nan | nan | | | item_obs[user]_579 | 0.100339 | 9.64719 | 0.0104009 | 0.991701 | | | item_obs[user]_580 | -0.0286677 | nan | nan | nan | | | item_obs[user]_581 | -0.0804997 | 10.7311 | -0.00750155 | 0.994015 | | | item_obs[user]_582 | -0.0941832 | nan | nan | nan | | | item_obs[user]_583 | 0.0954553 | nan | nan | nan | | | item_obs[user]_584 | 0.0969549 | 7.95363 | 0.01219 | 0.990274 | | | item_obs[user]_585 | -0.0316282 | 6.77455 | -0.00466867 | 0.996275 | | | item_obs[user]_586 | -0.0978867 | nan | nan | nan | | | item_obs[user]_587 | -0.0880501 | nan | nan | nan | | | item_obs[user]_588 | 0.0954066 | 38.8982 | 0.00245273 | 0.998043 | | | item_obs[user]_589 | -0.0273292 | 18.6961 | -0.00146176 | 0.998834 | | | item_obs[user]_590 | -0.0663264 | 25.0619 | -0.0026465 | 0.997888 | | | item_obs[user]_591 | -0.0978446 | 13.0446 | -0.0075008 | 0.994015 | | | item_obs[user]_592 | -0.094629 | nan | nan | nan | | | item_obs[user]_593 | -0.0973843 | nan | nan | nan | | | item_obs[user]_594 | -0.08807 | 12.54 | -0.00702312 | 0.994396 | | | item_obs[user]_595 | 0.000126938 | nan | nan | nan | | | item_obs[user]_596 | -0.0937052 | 7.72741 | -0.0121263 | 0.990325 | | | item_obs[user]_597 | -0.093032 | 52.6126 | -0.00176825 | 0.998589 | | | item_obs[user]_598 | 0.087314 | 4.23278 | 0.020628 | 0.983542 | | | item_obs[user]_599 | 0.0906963 | 12.3998 | 0.00731431 | 0.994164 | | | item_obs[user]_600 | -0.0879108 | nan | nan | nan | | | item_obs[user]_601 | -0.0428856 | nan | nan | nan | | | item_obs[user]_602 | -0.0921108 | nan | nan | nan | | | item_obs[user]_603 | 0.073359 | 52.1726 | 0.00140608 | 0.998878 | | | item_obs[user]_604 | 0.0728731 | 7.48711 | 0.00973315 | 0.992234 | | | item_obs[user]_605 | -0.0972289 | 25.1176 | -0.00387094 | 0.996911 | | | item_obs[user]_606 | 0.089037 | 19.2986 | 0.00461366 | 0.996319 | | | item_obs[user]_607 | 0.0868189 | 78.4711 | 0.00110638 | 0.999117 | | | item_obs[user]_608 | -0.0923796 | 5.70752 | -0.0161856 | 0.987086 | | | item_obs[user]_609 | -0.0946419 | nan | nan | nan | | | item_obs[user]_610 | 0.0921649 | 7.65234 | 0.012044 | 0.990391 | | | item_obs[user]_611 | -0.0922693 | nan | nan | nan | | | item_obs[user]_612 | 0.0979111 | nan | nan | nan | | | item_obs[user]_613 | 0.0979093 | nan | nan | nan | | | item_obs[user]_614 | -0.100505 | nan | nan | nan | | | item_obs[user]_615 | -0.0935866 | nan | nan | nan | | | item_obs[user]_616 | -0.101036 | 11.2001 | -0.00902098 | 0.992802 | | | item_obs[user]_617 | -0.0834687 | 16.6885 | -0.00500157 | 0.996009 | | | item_obs[user]_618 | -0.0551828 | nan | nan | nan | | | item_obs[user]_619 | -0.0905586 | nan | nan | nan | | | item_obs[user]_620 | -0.0637796 | nan | nan | nan | | | item_obs[user]_621 | 0.0985965 | 56.6959 | 0.00173904 | 0.998612 | | | item_obs[user]_622 | 0.0359899 | nan | nan | nan | | | item_obs[user]_623 | 0.0991734 | nan | nan | nan | | | item_obs[user]_624 | -0.0697729 | 25.4716 | -0.00273925 | 0.997814 | | | item_obs[user]_625 | -0.0617766 | 24.8065 | -0.00249034 | 0.998013 | | | item_obs[user]_626 | 0.0910757 | 27.072 | 0.0033642 | 0.997316 | | | item_obs[user]_627 | 0.101418 | 58.0109 | 0.00174825 | 0.998605 | | | item_obs[user]_628 | -0.0961346 | nan | nan | nan | | | item_obs[user]_629 | 0.094964 | 7.48973 | 0.0126792 | 0.989884 | | | item_obs[user]_630 | -0.0970363 | nan | nan | nan | | | item_obs[user]_631 | 0.0919417 | nan | nan | nan | | | item_obs[user]_632 | 0.0605234 | 18.7139 | 0.00323414 | 0.99742 | | | item_obs[user]_633 | -0.0904889 | 44.1136 | -0.00205127 | 0.998363 | | | item_obs[user]_634 | -0.0814091 | nan | nan | nan | | | item_obs[user]_635 | 0.0901025 | 40.7631 | 0.00221039 | 0.998236 | | | item_obs[user]_636 | 0.0846401 | nan | nan | nan | | | item_obs[user]_637 | 0.0866962 | 20.7103 | 0.00418613 | 0.99666 | | | item_obs[user]_638 | 0.0730155 | nan | nan | nan | | | item_obs[user]_639 | -0.0374388 | 76.4471 | -0.000489735 | 0.999609 | | | useritem_obs[constant]_0 | -2.19513 | nan | nan | nan | | | useritem_obs[constant]_1 | -0.0450221 | 5.51083 | -0.00816975 | 0.993482 | | | useritem_obs[constant]_2 | 0.335328 | nan | nan | nan | | | useritem_obs[constant]_3 | 0.222887 | 8.65038 | 0.0257662 | 0.979444 | | | useritem_obs[constant]_4 | 0.749399 | nan | nan | nan | | | useritem_obs[constant]_5 | 0.113332 | nan | nan | nan | | | useritem_obs[constant]_6 | -0.19438 | nan | nan | nan | | | useritem_obs[constant]_7 | -0.608253 | nan | nan | nan | | | useritem_obs[constant]_8 | -0.938155 | 4.00518 | -0.234236 | 0.814802 | | | useritem_obs[constant]_9 | 0.442151 | nan | nan | nan | | | useritem_obs[constant]_10 | 0.941669 | nan | nan | nan | | | useritem_obs[constant]_11 | 0.92923 | 12.0349 | 0.0772115 | 0.938455 | | | useritem_obs[constant]_12 | -1.79719 | 14.5266 | -0.123717 | 0.901539 | | | useritem_obs[constant]_13 | -2.44433 | nan | nan | nan | | | useritem_obs[constant]_14 | -1.80492 | 1.72967 | -1.04351 | 0.296713 | | | useritem_obs[constant]_15 | 0.294402 | 10.9838 | 0.0268033 | 0.978617 | | | useritem_obs[constant]_16 | 0.325979 | nan | nan | nan | | | useritem_obs[constant]_17 | -0.927703 | 14.3181 | -0.0647922 | 0.948339 | | | useritem_obs[constant]_18 | 0.644161 | 4.20224 | 0.15329 | 0.87817 | | | useritem_obs[constant]_19 | 0.566723 | nan | nan | nan | | | useritem_obs[constant]_20 | -0.0449253 | nan | nan | nan | | | useritem_obs[constant]_21 | 0.515094 | 15.1087 | 0.0340925 | 0.972803 | | | useritem_obs[constant]_22 | -0.73947 | 7.51922 | -0.0983439 | 0.921659 | | | useritem_obs[constant]_23 | 1.77285 | 6.26404 | 0.283019 | 0.777162 | | | useritem_obs[constant]_24 | 1.48855 | 13.3312 | 0.111659 | 0.911094 | | | useritem_obs[constant]_25 | -0.589749 | nan | nan | nan | | | useritem_obs[constant]_26 | -0.189601 | nan | nan | nan | | | useritem_obs[constant]_27 | -1.58579 | 22.8557 | -0.0693824 | 0.944685 | | | useritem_obs[constant]_28 | 1.63166 | nan | nan | nan | | | useritem_obs[constant]_29 | 0.834129 | nan | nan | nan | | | useritem_obs[constant]_30 | 0.245165 | 14.8609 | 0.0164973 | 0.986838 | | | useritem_obs[constant]_31 | -1.21305 | 13.5542 | -0.0894957 | 0.928688 | | | session_obs[item]_0 | 0.068609 | 0.0575214 | 1.19276 | 0.232965 | | | session_obs[item]_1 | 0.0943611 | 0.0569426 | 1.65713 | 0.0974938 | | | session_obs[item]_2 | 0.10083 | 0.0597371 | 1.68789 | 0.0914315 | | | session_obs[item]_3 | -0.0830204 | 0.0582709 | -1.42473 | 0.154235 | | | session_obs[item]_4 | -0.0681213 | 0.0617401 | -1.10336 | 0.269873 | | | session_obs[item]_5 | -0.0285107 | 0.0595629 | -0.478665 | 0.632177 | | | session_obs[item]_6 | -0.0703343 | 0.0618407 | -1.13735 | 0.255393 | | | session_obs[item]_7 | -0.091474 | 0.0561316 | -1.62964 | 0.103178 | | | session_obs[item]_8 | -0.00161236 | 0.0584364 | -0.0275917 | 0.977988 | | | session_obs[item]_9 | -0.101113 | 0.0557252 | -1.8145 | 0.0696007 | | | session_obs[item]_10 | 0.0998974 | 0.059756 | 1.67176 | 0.0945726 | | | session_obs[item]_11 | 0.0992974 | 0.0580802 | 1.70966 | 0.0873287 | | | session_obs[item]_12 | 0.0687278 | 0.0615169 | 1.11722 | 0.263901 | | | session_obs[item]_13 | 0.0993844 | 0.0609478 | 1.63065 | 0.102964 | | | session_obs[item]_14 | 0.0950583 | 0.0647747 | 1.46752 | 0.142234 | | | session_obs[item]_15 | -0.0906975 | 0.0621541 | -1.45924 | 0.1445 | | | session_obs[item]_16 | 0.100648 | 0.0630845 | 1.59544 | 0.110613 | | | session_obs[item]_17 | 0.0970964 | 0.0571602 | 1.69867 | 0.0893813 | | | session_obs[item]_18 | -0.0139554 | 0.0603362 | -0.231293 | 0.817087 | | | session_obs[item]_19 | 0.099739 | 0.0575703 | 1.73247 | 0.0831891 | | | session_obs[item]_20 | -0.0737882 | 0.0598032 | -1.23385 | 0.217258 | | | session_obs[item]_21 | -0.0996387 | 0.0595788 | -1.67238 | 0.0944485 | | | session_obs[item]_22 | -0.0899075 | 0.0595985 | -1.50855 | 0.131413 | | | session_obs[item]_23 | 0.0723293 | 0.0592888 | 1.21995 | 0.222484 | | | session_obs[item]_24 | -0.0981705 | 0.0633841 | -1.54882 | 0.121425 | | | session_obs[item]_25 | 0.0222866 | 0.0617213 | 0.361084 | 0.718037 | | | session_obs[item]_26 | 0.0727327 | 0.064012 | 1.13624 | 0.255858 | | | session_obs[item]_27 | 0.0981871 | 0.0596296 | 1.64662 | 0.0996369 | | | session_obs[item]_28 | -0.0962339 | 0.061448 | -1.5661 | 0.117324 | | | session_obs[item]_29 | -0.0938598 | 0.0576089 | -1.62926 | 0.103259 | | | price_obs[constant]_0 | -1.3209 | 0.032758 | -40.3231 | 0 | *** | | price_obs[constant]_1 | -0.0466729 | 0.024418 | -1.91141 | 0.0559515 | | | price_obs[constant]_2 | 1.6281 | 0.0371453 | 43.8305 | 0 | *** | | price_obs[constant]_3 | 0.328977 | 0.0241234 | 13.6373 | 0 | *** | | price_obs[constant]_4 | -0.437104 | 0.0250135 | -17.4747 | 0 | *** | | price_obs[constant]_5 | 0.3052 | 0.0235386 | 12.9659 | 0 | *** | | price_obs[constant]_6 | 1.03763 | 0.0299154 | 34.6855 | 0 | *** | | price_obs[constant]_7 | 1.00561 | 0.0297657 | 33.784 | 0 | *** | | price_obs[constant]_8 | -0.507221 | 0.0256846 | -19.748 | 0 | *** | | price_obs[constant]_9 | 0.215656 | 0.0228565 | 9.43519 | 0 | *** | | price_obs[constant]_10 | -1.17904 | 0.0317257 | -37.1636 | 0 | *** | | price_obs[constant]_11 | 0.871396 | 0.0287952 | 30.2619 | 0 | *** | | usersessionitem_obs[constant]_0 | -0.0973257 | 0.0230575 | -4.221 | 2.43223e-05 | *** | | usersessionitem_obs[constant]_1 | -1.25702 | 0.0319555 | -39.3367 | 0 | *** | | usersessionitem_obs[constant]_2 | 1.17756 | 0.03094 | 38.0595 | 0 | *** | | usersessionitem_obs[constant]_3 | -0.6465 | 0.0256232 | -25.231 | 0 | *** | | usersessionitem_obs[constant]_4 | 0.203393 | 0.023352 | 8.70989 | 0 | *** | | usersessionitem_obs[constant]_5 | -0.314032 | 0.0235116 | -13.3565 | 0 | *** | | usersessionitem_obs[constant]_6 | -0.427146 | 0.0243446 | -17.5458 | 0 | *** | | usersessionitem_obs[constant]_7 | -1.22026 | 0.0317813 | -38.3956 | 0 | *** | | usersessionitem_obs[constant]_8 | -0.356615 | 0.0239962 | -14.8613 | 0 | *** | | usersessionitem_obs[constant]_9 | -1.5531 | 0.0353216 | -43.9703 | 0 | *** | | usersessionitem_obs[constant]_10 | -0.994266 | 0.0288841 | -34.4226 | 0 | *** | | usersessionitem_obs[constant]_11 | 1.0114 | 0.0291006 | 34.7554 | 0 | *** | | usersessionitem_obs[constant]_12 | 1.65349 | 0.0375474 | 44.0373 | 0 | *** | | usersessionitem_obs[constant]_13 | -0.331221 | 0.0243139 | -13.6227 | 0 | *** | | usersessionitem_obs[constant]_14 | 2.49692 | 0.0490014 | 50.9562 | 0 | *** | | usersessionitem_obs[constant]_15 | 0.121984 | 0.0237004 | 5.14692 | 2.64804e-07 | *** | | intercept[item]_0 | 0.0222749 | 8.51919 | 0.00261468 | 0.997914 | | | intercept[item]_1 | -0.0889155 | 13.2526 | -0.0067093 | 0.994647 | | | intercept[item]_2 | -0.0932965 | nan | nan | nan | | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 Time taken: 12.200577974319458","title":"All model specification"},{"location":"all_model_specification/#creating-choicedataset-object","text":"# Feel free to modify it as you want. num_users = 10 num_items = 4 num_sessions = 500 length_of_dataset = 10000 # create observables/features, the number of parameters are arbitrarily chosen. # generate 128 features for each user, e.g., race, gender. user_obs = torch . randn ( num_users , 128 ) # generate 64 features for each user, e.g., quality. item_obs = torch . randn ( num_items , 64 ) # generate 32 features for each user item pair. useritem_obs = torch . randn ( num_users , num_items , 32 ) # generate 10 features for each session, e.g., weekday indicator. session_obs = torch . randn ( num_sessions , 10 ) # generate 12 features for each session user pair, e.g., the budget of that user at the shopping day. price_obs = torch . randn ( num_sessions , num_items , 12 ) # generate 16 useritemsession observable. usersessionitem_obs = torch . randn ( num_users , num_sessions , num_items , 16 ) We then generate random observable tensors for users, items, sessions and price observables, the size of observables of each type (i.e., the last dimension in the shape) is arbitrarily chosen. Notes on Encodings Since we will be using PyTorch to train our model, we represent their identities with consecutive integer values instead of the raw human-readable names of items (e.g., Dell 24-inch LCD monitor). Similarly, you would need to encode user indices and session indices as well. Raw item names can be encoded easily with sklearn.preprocessing.LabelEncoder (The sklearn.preprocessing.OrdinalEncoder works as well). item_index = torch . LongTensor ( np . random . choice ( num_items , size = length_of_dataset )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = length_of_dataset )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = length_of_dataset )) # assume all items are available in all sessions. item_availability = torch . ones ( num_sessions , num_items ) . bool ()","title":"Creating  ChoiceDataset Object"},{"location":"all_model_specification/#step-2-initialize-the-choicedataset","text":"You can construct a choice set using the following code, which manage all information for you. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , user_obs = user_obs , item_obs = item_obs , useritem_obs = useritem_obs , session_obs = session_obs , price_obs = price_obs , usersessionitem_obs = usersessionitem_obs )","title":"Step 2: Initialize the ChoiceDataset."},{"location":"all_model_specification/#what-you-can-do-with-the-choicedataset","text":"","title":"What you can do with the ChoiceDataset?"},{"location":"all_model_specification/#printdataset-and-dataset__str__","text":"The command print(dataset) will provide a quick overview of shapes of tensors included in the object as well as where the dataset is located (i.e., host memory or GPU memory). print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], price_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 16], device=cpu)","title":"print(dataset) and dataset.__str__"},{"location":"all_model_specification/#confirm-correctness-using-the-x_dict-method","text":"The port between ChoiceDataset and model classes is a method called x_dict in the dataset. The x_dict method compiles all information in the dataset into a dictionary, with observable names as keys, and all values of this dictionary are tensors with shape (length_of_dataset, num_items, *. The *` denotes the number of corresponding observables and could be different for different observable tensors. print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.useritem_obs.shape=torch.Size([10000, 4, 32]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.price_obs.shape=torch.Size([10000, 4, 12]) dict.usersessionitem_obs.shape=torch.Size([10000, 4, 16]) # check the `x_dict` indeed have what we are expecting, test 10 random records. for n in tqdm ( np . random . choice ( length_of_dataset , 10 )): u = user_index [ n ] s = session_index [ n ] for i in range ( num_items ): for k in range ( 128 ): expected = user_obs [ u , k ] got = dataset . x_dict [ \"user_obs\" ][ n , i , k ] assert expected == got for k in range ( 64 ): expected = item_obs [ i , k ] got = dataset . x_dict [ \"item_obs\" ][ n , i , k ] assert expected == got for k in range ( 32 ): expected = useritem_obs [ u , i , k ] got = dataset . x_dict [ \"useritem_obs\" ][ n , i , k ] assert expected == got for k in range ( 10 ): expected = session_obs [ s , k ] got = dataset . x_dict [ \"session_obs\" ][ n , i , k ] assert expected == got for k in range ( 12 ): expected = price_obs [ s , i , k ] got = dataset . x_dict [ \"price_obs\" ][ n , i , k ] assert expected == got for k in range ( 16 ): expected = usersessionitem_obs [ u , s , i , k ] got = dataset . x_dict [ \"usersessionitem_obs\" ][ n , i , k ] assert expected == got print ( \"all good!\" ) 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:17<00:00, 1.74s/it] all good!","title":"Confirm Correctness using the x_dict Method"},{"location":"all_model_specification/#build-a-clm-model","text":"from time import time from torch_choice.model import ConditionalLogitModel from torch_choice import run model = model = ConditionalLogitModel ( formula = '(user_obs|item) + (item_obs|user) + (useritem_obs|constant) + (session_obs|item) + (price_obs|constant) + (usersessionitem_obs|constant) + (intercept|item)' , dataset = dataset , num_users = num_users , num_items = num_items ) model ConditionalLogitModel( (coef_dict): ModuleDict( (user_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=128, 384 trainable parameters in total, device=cpu). (item_obs[user]): Coefficient(variation=user, num_items=4, num_users=10, num_params=64, 640 trainable parameters in total, device=cpu). (useritem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=32, 32 trainable parameters in total, device=cpu). (session_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=10, 30 trainable parameters in total, device=cpu). (price_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=12, 12 trainable parameters in total, device=cpu). (usersessionitem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=16, 16 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[user_obs[item]] with 128 parameters, with item level variation. X[item_obs[user]] with 64 parameters, with user level variation. X[useritem_obs[constant]] with 32 parameters, with constant level variation. X[session_obs[item]] with 10 parameters, with item level variation. X[price_obs[constant]] with 12 parameters, with constant level variation. X[usersessionitem_obs[constant]] with 16 parameters, with constant level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu start_time = time () run ( model , dataset , num_epochs = 10 , learning_rate = 0.01 , model_optimizer = \"Adam\" , batch_size =- 1 ) print ( 'Time taken:' , time () - start_time ) GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (user_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=128, 384 trainable parameters in total, device=cpu). (item_obs[user]): Coefficient(variation=user, num_items=4, num_users=10, num_params=64, 640 trainable parameters in total, device=cpu). (useritem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=32, 32 trainable parameters in total, device=cpu). (session_obs[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=10, 30 trainable parameters in total, device=cpu). (price_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=12, 12 trainable parameters in total, device=cpu). (usersessionitem_obs[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=16, 16 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[user_obs[item]] with 128 parameters, with item level variation. X[item_obs[user]] with 64 parameters, with user level variation. X[useritem_obs[constant]] with 32 parameters, with constant level variation. X[session_obs[item]] with 10 parameters, with item level variation. X[price_obs[constant]] with 12 parameters, with constant level variation. X[usersessionitem_obs[constant]] with 16 parameters, with constant level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], price_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 16], device=cpu) [Validation dataset] None [Test dataset] None /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/setup.py:201: UserWarning: MPS available but not used. Set `accelerator` and `devices` using `Trainer(accelerator='mps', devices=1)`. rank_zero_warn( /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/configuration_validator.py:108: PossibleUserWarning: You defined a `validation_step` but have no `val_dataloader`. Skipping val loop. rank_zero_warn( | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 1.1 K ------------------------------------------------ 1.1 K Trainable params 0 Non-trainable params 1.1 K Total params 0.004 Total estimated model params size (MB) /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:224: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 10 which is the number of cpus on this machine) in the `DataLoader` init to improve performance. rank_zero_warn( Epoch 9: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 44.40it/s, loss=7.1e+04, v_num=44] `Trainer.fit` stopped: `max_epochs=10` reached. Epoch 9: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 39.46it/s, loss=7.1e+04, v_num=44] Time taken for training: 0.9634578227996826 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -56230.62890625, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------------|-------------:|------------:|--------------:|--------------:|:---------------| | user_obs[item]_0 | -0.0889893 | 139.667 | -0.000637154 | 0.999492 | | | user_obs[item]_1 | -0.0341076 | nan | nan | nan | | | user_obs[item]_2 | -0.0982556 | nan | nan | nan | | | user_obs[item]_3 | 0.0670713 | 18.9429 | 0.00354071 | 0.997175 | | | user_obs[item]_4 | 0.0836471 | nan | nan | nan | | | user_obs[item]_5 | 0.0925889 | nan | nan | nan | | | user_obs[item]_6 | 0.0884399 | 37.105 | 0.0023835 | 0.998098 | | | user_obs[item]_7 | -0.0993338 | nan | nan | nan | | | user_obs[item]_8 | 0.0396195 | nan | nan | nan | | | user_obs[item]_9 | -0.000340273 | 24.0647 | -1.41399e-05 | 0.999989 | | | user_obs[item]_10 | 0.0980912 | 65.7966 | 0.00149082 | 0.99881 | | | user_obs[item]_11 | 0.0712994 | 25.9504 | 0.00274752 | 0.997808 | | | user_obs[item]_12 | -0.0654005 | nan | nan | nan | | | user_obs[item]_13 | 0.0673973 | nan | nan | nan | | | user_obs[item]_14 | 0.0940802 | nan | nan | nan | | | user_obs[item]_15 | -0.0938857 | 30.5794 | -0.00307023 | 0.99755 | | | user_obs[item]_16 | -0.0425794 | 47.2045 | -0.000902021 | 0.99928 | | | user_obs[item]_17 | 0.0794171 | 44.3518 | 0.00179062 | 0.998571 | | | user_obs[item]_18 | -0.0998146 | nan | nan | nan | | | user_obs[item]_19 | 0.0852862 | 6.97753 | 0.012223 | 0.990248 | | | user_obs[item]_20 | 0.05898 | nan | nan | nan | | | user_obs[item]_21 | -0.0854324 | nan | nan | nan | | | user_obs[item]_22 | -0.0237377 | nan | nan | nan | | | user_obs[item]_23 | 0.10116 | 20.1079 | 0.00503089 | 0.995986 | | | user_obs[item]_24 | 0.0741224 | 46.0753 | 0.00160872 | 0.998716 | | | user_obs[item]_25 | 0.0865076 | 58.1918 | 0.0014866 | 0.998814 | | | user_obs[item]_26 | 0.0521571 | 51.714 | 0.00100857 | 0.999195 | | | user_obs[item]_27 | 0.0759137 | nan | nan | nan | | | user_obs[item]_28 | -0.0809748 | nan | nan | nan | | | user_obs[item]_29 | -0.054031 | 25.3736 | -0.00212942 | 0.998301 | | | user_obs[item]_30 | -0.0164601 | 18.0856 | -0.000910124 | 0.999274 | | | user_obs[item]_31 | -0.080897 | 57.7205 | -0.00140153 | 0.998882 | | | user_obs[item]_32 | -0.0909767 | 37.1174 | -0.00245105 | 0.998044 | | | user_obs[item]_33 | 0.0485426 | nan | nan | nan | | | user_obs[item]_34 | -0.0734832 | 31.7805 | -0.00231221 | 0.998155 | | | user_obs[item]_35 | 0.0980138 | 20.8498 | 0.00470096 | 0.996249 | | | user_obs[item]_36 | 0.0955767 | nan | nan | nan | | | user_obs[item]_37 | 0.0555144 | 97.5976 | 0.000568809 | 0.999546 | | | user_obs[item]_38 | 0.0946894 | nan | nan | nan | | | user_obs[item]_39 | 0.0555615 | nan | nan | nan | | | user_obs[item]_40 | -0.100283 | 108.641 | -0.00092307 | 0.999263 | | | user_obs[item]_41 | -0.0225418 | nan | nan | nan | | | user_obs[item]_42 | 0.0648984 | nan | nan | nan | | | user_obs[item]_43 | -0.100141 | nan | nan | nan | | | user_obs[item]_44 | -0.0892176 | 54.9148 | -0.00162466 | 0.998704 | | | user_obs[item]_45 | 0.0068979 | 34.171 | 0.000201864 | 0.999839 | | | user_obs[item]_46 | 0.0980878 | 111.224 | 0.000881892 | 0.999296 | | | user_obs[item]_47 | 0.100062 | nan | nan | nan | | | user_obs[item]_48 | 0.0889476 | 119.958 | 0.000741491 | 0.999408 | | | user_obs[item]_49 | -0.0980555 | 87.2634 | -0.00112367 | 0.999103 | | | user_obs[item]_50 | -0.00933557 | 65.2444 | -0.000143086 | 0.999886 | | | user_obs[item]_51 | 0.0365757 | 19.2679 | 0.00189827 | 0.998485 | | | user_obs[item]_52 | -0.00636163 | 51.2761 | -0.000124066 | 0.999901 | | | user_obs[item]_53 | -0.0921691 | 24.4548 | -0.00376896 | 0.996993 | | | user_obs[item]_54 | 0.0908732 | 57.6774 | 0.00157554 | 0.998743 | | | user_obs[item]_55 | 0.0971482 | 20.9316 | 0.00464121 | 0.996297 | | | user_obs[item]_56 | 0.0900242 | 49.1325 | 0.00183227 | 0.998538 | | | user_obs[item]_57 | -0.0802871 | nan | nan | nan | | | user_obs[item]_58 | 0.070944 | nan | nan | nan | | | user_obs[item]_59 | 0.089703 | nan | nan | nan | | | user_obs[item]_60 | 0.0615047 | nan | nan | nan | | | user_obs[item]_61 | 0.101459 | 60.6506 | 0.00167284 | 0.998665 | | | user_obs[item]_62 | 0.0843676 | 51.1154 | 0.00165053 | 0.998683 | | | user_obs[item]_63 | 0.0744298 | 50.0475 | 0.00148718 | 0.998813 | | | user_obs[item]_64 | 0.0484441 | 66.7117 | 0.000726171 | 0.999421 | | | user_obs[item]_65 | -0.0932577 | 47.0875 | -0.00198052 | 0.99842 | | | user_obs[item]_66 | 0.0937148 | nan | nan | nan | | | user_obs[item]_67 | 0.0938114 | nan | nan | nan | | | user_obs[item]_68 | 0.0919321 | 144.463 | 0.000636369 | 0.999492 | | | user_obs[item]_69 | -0.100955 | nan | nan | nan | | | user_obs[item]_70 | -0.0694414 | 28.964 | -0.00239751 | 0.998087 | | | user_obs[item]_71 | 0.0618674 | 141.564 | 0.000437029 | 0.999651 | | | user_obs[item]_72 | 0.0887234 | nan | nan | nan | | | user_obs[item]_73 | 0.0547917 | nan | nan | nan | | | user_obs[item]_74 | -0.0225696 | nan | nan | nan | | | user_obs[item]_75 | 0.0974109 | 21.2039 | 0.004594 | 0.996335 | | | user_obs[item]_76 | -0.0991129 | nan | nan | nan | | | user_obs[item]_77 | 0.100791 | nan | nan | nan | | | user_obs[item]_78 | -0.0773081 | nan | nan | nan | | | user_obs[item]_79 | 0.095945 | 21.3157 | 0.00450114 | 0.996409 | | | user_obs[item]_80 | -0.0946032 | 42.3599 | -0.00223332 | 0.998218 | | | user_obs[item]_81 | -0.0911672 | 8.6325 | -0.0105609 | 0.991574 | | | user_obs[item]_82 | 0.0901775 | 43.12 | 0.00209132 | 0.998331 | | | user_obs[item]_83 | 0.0354095 | nan | nan | nan | | | user_obs[item]_84 | 0.100448 | 28.0476 | 0.00358133 | 0.997143 | | | user_obs[item]_85 | -0.0448048 | nan | nan | nan | | | user_obs[item]_86 | 0.0958236 | 45.4539 | 0.00210815 | 0.998318 | | | user_obs[item]_87 | 0.0734553 | 43.357 | 0.00169419 | 0.998648 | | | user_obs[item]_88 | -0.0863962 | 40.7907 | -0.00211804 | 0.99831 | | | user_obs[item]_89 | 0.0714083 | 39.8753 | 0.00179079 | 0.998571 | | | user_obs[item]_90 | -0.0744745 | 82.7771 | -0.000899699 | 0.999282 | | | user_obs[item]_91 | 0.0926561 | 77.8328 | 0.00119045 | 0.99905 | | | user_obs[item]_92 | -0.0641654 | 32.6775 | -0.0019636 | 0.998433 | | | user_obs[item]_93 | -0.0825138 | 62.9386 | -0.00131102 | 0.998954 | | | user_obs[item]_94 | 0.0997649 | 38.279 | 0.00260625 | 0.997921 | | | user_obs[item]_95 | 0.0904881 | nan | nan | nan | | | user_obs[item]_96 | 0.0678373 | 151.095 | 0.00044897 | 0.999642 | | | user_obs[item]_97 | -0.0679895 | nan | nan | nan | | | user_obs[item]_98 | -0.0945796 | 57.5709 | -0.00164284 | 0.998689 | | | user_obs[item]_99 | -0.0876268 | nan | nan | nan | | | user_obs[item]_100 | 0.0973275 | nan | nan | nan | | | user_obs[item]_101 | 0.0733176 | nan | nan | nan | | | user_obs[item]_102 | -0.0915377 | nan | nan | nan | | | user_obs[item]_103 | 0.0939341 | 36.7327 | 0.00255723 | 0.99796 | | | user_obs[item]_104 | -0.0685851 | 57.6987 | -0.00118868 | 0.999052 | | | user_obs[item]_105 | 0.0894344 | nan | nan | nan | | | user_obs[item]_106 | 0.00271086 | nan | nan | nan | | | user_obs[item]_107 | 0.0411001 | 21.7561 | 0.00188913 | 0.998493 | | | user_obs[item]_108 | 0.0987024 | 28.026 | 0.00352181 | 0.99719 | | | user_obs[item]_109 | 0.0967847 | 26.5516 | 0.00364516 | 0.997092 | | | user_obs[item]_110 | 0.025779 | 25.6526 | 0.00100493 | 0.999198 | | | user_obs[item]_111 | -0.0944387 | nan | nan | nan | | | user_obs[item]_112 | -0.0997579 | nan | nan | nan | | | user_obs[item]_113 | -0.00786996 | nan | nan | nan | | | user_obs[item]_114 | 0.0873028 | nan | nan | nan | | | user_obs[item]_115 | 0.0969093 | nan | nan | nan | | | user_obs[item]_116 | -0.0933952 | nan | nan | nan | | | user_obs[item]_117 | 0.0953693 | 36.8322 | 0.00258929 | 0.997934 | | | user_obs[item]_118 | -0.0711203 | 44.3295 | -0.00160436 | 0.99872 | | | user_obs[item]_119 | 0.0387712 | nan | nan | nan | | | user_obs[item]_120 | -0.0718235 | 72.4445 | -0.000991428 | 0.999209 | | | user_obs[item]_121 | 0.0965576 | nan | nan | nan | | | user_obs[item]_122 | 0.0932075 | nan | nan | nan | | | user_obs[item]_123 | 0.0960881 | nan | nan | nan | | | user_obs[item]_124 | -0.0057018 | nan | nan | nan | | | user_obs[item]_125 | -0.0240208 | 59.3318 | -0.000404855 | 0.999677 | | | user_obs[item]_126 | -0.0832291 | nan | nan | nan | | | user_obs[item]_127 | -0.0127958 | 31.8142 | -0.000402203 | 0.999679 | | | user_obs[item]_128 | 0.0946697 | 39.9644 | 0.00236885 | 0.99811 | | | user_obs[item]_129 | 0.0955388 | nan | nan | nan | | | user_obs[item]_130 | -0.100848 | 29.1098 | -0.00346438 | 0.997236 | | | user_obs[item]_131 | -0.0897986 | nan | nan | nan | | | user_obs[item]_132 | -0.0893218 | nan | nan | nan | | | user_obs[item]_133 | -0.0987934 | 51.4924 | -0.0019186 | 0.998469 | | | user_obs[item]_134 | -0.0561973 | 8.48221 | -0.00662531 | 0.994714 | | | user_obs[item]_135 | 0.0591518 | nan | nan | nan | | | user_obs[item]_136 | -0.0981552 | nan | nan | nan | | | user_obs[item]_137 | -0.0920462 | 14.2351 | -0.00646616 | 0.994841 | | | user_obs[item]_138 | -0.088343 | 52.507 | -0.0016825 | 0.998658 | | | user_obs[item]_139 | -0.0847579 | nan | nan | nan | | | user_obs[item]_140 | 0.0964178 | nan | nan | nan | | | user_obs[item]_141 | -0.0954367 | 44.7388 | -0.0021332 | 0.998298 | | | user_obs[item]_142 | 0.0901083 | 59.9893 | 0.00150207 | 0.998802 | | | user_obs[item]_143 | -0.0976047 | nan | nan | nan | | | user_obs[item]_144 | 0.0893714 | 9.06721 | 0.00985655 | 0.992136 | | | user_obs[item]_145 | 0.0762919 | nan | nan | nan | | | user_obs[item]_146 | 0.100248 | 34.6165 | 0.00289595 | 0.997689 | | | user_obs[item]_147 | 0.0919174 | 24.59 | 0.00373801 | 0.997018 | | | user_obs[item]_148 | 0.0596661 | 15.9393 | 0.00374334 | 0.997013 | | | user_obs[item]_149 | 0.0956791 | 30.0228 | 0.00318688 | 0.997457 | | | user_obs[item]_150 | 0.0988285 | nan | nan | nan | | | user_obs[item]_151 | -0.0958375 | nan | nan | nan | | | user_obs[item]_152 | -0.0862783 | nan | nan | nan | | | user_obs[item]_153 | -0.096879 | 8.60707 | -0.0112557 | 0.991019 | | | user_obs[item]_154 | 0.0899647 | 26.4254 | 0.00340448 | 0.997284 | | | user_obs[item]_155 | -0.0971653 | 17.2313 | -0.00563889 | 0.995501 | | | user_obs[item]_156 | -0.0347459 | nan | nan | nan | | | user_obs[item]_157 | 0.0946411 | nan | nan | nan | | | user_obs[item]_158 | 0.0965939 | 33.4381 | 0.00288874 | 0.997695 | | | user_obs[item]_159 | -0.0987432 | 50.6435 | -0.00194977 | 0.998444 | | | user_obs[item]_160 | 0.0554879 | 54.8858 | 0.00101097 | 0.999193 | | | user_obs[item]_161 | 0.0916695 | nan | nan | nan | | | user_obs[item]_162 | 0.0903534 | 21.761 | 0.00415209 | 0.996687 | | | user_obs[item]_163 | 0.0925355 | nan | nan | nan | | | user_obs[item]_164 | -0.0157946 | 21.2459 | -0.000743417 | 0.999407 | | | user_obs[item]_165 | -0.0911579 | nan | nan | nan | | | user_obs[item]_166 | 0.0960882 | 22.7401 | 0.0042255 | 0.996629 | | | user_obs[item]_167 | -0.0921166 | 33.1998 | -0.00277461 | 0.997786 | | | user_obs[item]_168 | -0.0952001 | 16.7478 | -0.00568434 | 0.995465 | | | user_obs[item]_169 | 0.0906606 | nan | nan | nan | | | user_obs[item]_170 | -0.0929105 | 34.9538 | -0.0026581 | 0.997879 | | | user_obs[item]_171 | -0.0856273 | nan | nan | nan | | | user_obs[item]_172 | 0.0977275 | nan | nan | nan | | | user_obs[item]_173 | -0.0964915 | nan | nan | nan | | | user_obs[item]_174 | 0.0961557 | 34.6991 | 0.00277113 | 0.997789 | | | user_obs[item]_175 | -0.0868459 | nan | nan | nan | | | user_obs[item]_176 | 0.0997443 | nan | nan | nan | | | user_obs[item]_177 | -0.0936593 | nan | nan | nan | | | user_obs[item]_178 | 0.0896609 | nan | nan | nan | | | user_obs[item]_179 | -0.0921307 | nan | nan | nan | | | user_obs[item]_180 | 0.0989775 | nan | nan | nan | | | user_obs[item]_181 | -0.0934007 | nan | nan | nan | | | user_obs[item]_182 | -0.0954752 | nan | nan | nan | | | user_obs[item]_183 | 0.101086 | nan | nan | nan | | | user_obs[item]_184 | -0.042742 | nan | nan | nan | | | user_obs[item]_185 | -0.0904764 | nan | nan | nan | | | user_obs[item]_186 | 0.0580969 | nan | nan | nan | | | user_obs[item]_187 | 0.0472953 | 21.1506 | 0.00223613 | 0.998216 | | | user_obs[item]_188 | -0.0861624 | 21.6303 | -0.00398342 | 0.996822 | | | user_obs[item]_189 | -0.0496282 | 30.8671 | -0.0016078 | 0.998717 | | | user_obs[item]_190 | 0.0980903 | 40.4903 | 0.00242256 | 0.998067 | | | user_obs[item]_191 | -0.0999367 | nan | nan | nan | | | user_obs[item]_192 | 0.0937635 | nan | nan | nan | | | user_obs[item]_193 | 0.0932748 | nan | nan | nan | | | user_obs[item]_194 | -0.0912127 | 43.9686 | -0.0020745 | 0.998345 | | | user_obs[item]_195 | -0.0954091 | 56.3073 | -0.00169444 | 0.998648 | | | user_obs[item]_196 | 0.0946353 | nan | nan | nan | | | user_obs[item]_197 | 0.0775572 | 11.1232 | 0.00697254 | 0.994437 | | | user_obs[item]_198 | 0.0917828 | nan | nan | nan | | | user_obs[item]_199 | -0.0971661 | nan | nan | nan | | | user_obs[item]_200 | -0.0954552 | 22.4761 | -0.00424696 | 0.996611 | | | user_obs[item]_201 | -0.0986228 | nan | nan | nan | | | user_obs[item]_202 | -0.0948749 | 50.355 | -0.00188412 | 0.998497 | | | user_obs[item]_203 | 0.0887569 | nan | nan | nan | | | user_obs[item]_204 | -0.0736365 | nan | nan | nan | | | user_obs[item]_205 | 0.0945059 | 21.2864 | 0.00443973 | 0.996458 | | | user_obs[item]_206 | 0.0952938 | nan | nan | nan | | | user_obs[item]_207 | 0.0852773 | 31.1982 | 0.0027334 | 0.997819 | | | user_obs[item]_208 | 0.0331864 | nan | nan | nan | | | user_obs[item]_209 | 0.0887002 | nan | nan | nan | | | user_obs[item]_210 | -0.0987527 | nan | nan | nan | | | user_obs[item]_211 | 0.0601945 | 14.0004 | 0.00429948 | 0.99657 | | | user_obs[item]_212 | -0.100431 | nan | nan | nan | | | user_obs[item]_213 | -0.0950364 | nan | nan | nan | | | user_obs[item]_214 | -0.0846135 | nan | nan | nan | | | user_obs[item]_215 | -0.0983446 | nan | nan | nan | | | user_obs[item]_216 | -0.0899129 | 21.6253 | -0.00415776 | 0.996683 | | | user_obs[item]_217 | -0.0969675 | nan | nan | nan | | | user_obs[item]_218 | -0.0936005 | 19.6852 | -0.00475488 | 0.996206 | | | user_obs[item]_219 | 0.0243296 | nan | nan | nan | | | user_obs[item]_220 | 0.0801605 | nan | nan | nan | | | user_obs[item]_221 | -0.100749 | nan | nan | nan | | | user_obs[item]_222 | -0.0995452 | 7.18452 | -0.0138555 | 0.988945 | | | user_obs[item]_223 | -0.0914686 | 4.87038 | -0.0187806 | 0.985016 | | | user_obs[item]_224 | -0.0500416 | nan | nan | nan | | | user_obs[item]_225 | 0.00523383 | nan | nan | nan | | | user_obs[item]_226 | -0.00516245 | 35.3175 | -0.000146172 | 0.999883 | | | user_obs[item]_227 | -0.0835066 | nan | nan | nan | | | user_obs[item]_228 | -0.0900212 | nan | nan | nan | | | user_obs[item]_229 | -0.0921853 | nan | nan | nan | | | user_obs[item]_230 | 0.0933748 | 25.8102 | 0.00361775 | 0.997113 | | | user_obs[item]_231 | 0.0884962 | 5.54233 | 0.0159673 | 0.98726 | | | user_obs[item]_232 | -0.100834 | 31.0845 | -0.00324386 | 0.997412 | | | user_obs[item]_233 | -0.0706101 | 45.4504 | -0.00155356 | 0.99876 | | | user_obs[item]_234 | -0.100623 | 9.49371 | -0.0105989 | 0.991543 | | | user_obs[item]_235 | -0.0950226 | 9.10836 | -0.0104325 | 0.991676 | | | user_obs[item]_236 | 0.0787224 | nan | nan | nan | | | user_obs[item]_237 | 0.0516931 | nan | nan | nan | | | user_obs[item]_238 | 0.0795601 | nan | nan | nan | | | user_obs[item]_239 | -0.0991568 | 25.7028 | -0.00385782 | 0.996922 | | | user_obs[item]_240 | -0.100388 | 17.91 | -0.00560511 | 0.995528 | | | user_obs[item]_241 | -0.0956626 | nan | nan | nan | | | user_obs[item]_242 | -0.00400375 | 23.6861 | -0.000169034 | 0.999865 | | | user_obs[item]_243 | 0.0944553 | nan | nan | nan | | | user_obs[item]_244 | 0.0983843 | 48.3653 | 0.00203419 | 0.998377 | | | user_obs[item]_245 | -0.100297 | nan | nan | nan | | | user_obs[item]_246 | -0.0124805 | nan | nan | nan | | | user_obs[item]_247 | 0.0965049 | nan | nan | nan | | | user_obs[item]_248 | 0.0854822 | nan | nan | nan | | | user_obs[item]_249 | 0.0931216 | nan | nan | nan | | | user_obs[item]_250 | 0.0158794 | 28.2352 | 0.000562395 | 0.999551 | | | user_obs[item]_251 | -0.0952249 | nan | nan | nan | | | user_obs[item]_252 | 0.0919503 | 12.5916 | 0.00730253 | 0.994173 | | | user_obs[item]_253 | 0.0828517 | nan | nan | nan | | | user_obs[item]_254 | -0.0932373 | nan | nan | nan | | | user_obs[item]_255 | 0.100438 | 9.87784 | 0.010168 | 0.991887 | | | user_obs[item]_256 | -0.0985134 | 11.5526 | -0.00852738 | 0.993196 | | | user_obs[item]_257 | -0.095954 | nan | nan | nan | | | user_obs[item]_258 | -0.0860235 | nan | nan | nan | | | user_obs[item]_259 | 0.0939709 | nan | nan | nan | | | user_obs[item]_260 | 0.0654559 | nan | nan | nan | | | user_obs[item]_261 | 0.0999005 | 10.7345 | 0.00930653 | 0.992575 | | | user_obs[item]_262 | -0.0964731 | nan | nan | nan | | | user_obs[item]_263 | 0.0928897 | nan | nan | nan | | | user_obs[item]_264 | 0.0999005 | 21.306 | 0.00468885 | 0.996259 | | | user_obs[item]_265 | -0.0909176 | 11.2045 | -0.00811436 | 0.993526 | | | user_obs[item]_266 | 0.0922943 | 35.6997 | 0.0025853 | 0.997937 | | | user_obs[item]_267 | -0.0804861 | nan | nan | nan | | | user_obs[item]_268 | -0.0950919 | 10.6069 | -0.00896508 | 0.992847 | | | user_obs[item]_269 | -0.0514438 | nan | nan | nan | | | user_obs[item]_270 | -0.0884027 | 45.7692 | -0.00193149 | 0.998459 | | | user_obs[item]_271 | 0.0939372 | 4.13603 | 0.0227119 | 0.98188 | | | user_obs[item]_272 | 0.0456208 | 26.7976 | 0.00170242 | 0.998642 | | | user_obs[item]_273 | -0.0987425 | nan | nan | nan | | | user_obs[item]_274 | -0.0907353 | 15.5872 | -0.00582112 | 0.995355 | | | user_obs[item]_275 | -0.0895816 | nan | nan | nan | | | user_obs[item]_276 | 0.0891188 | nan | nan | nan | | | user_obs[item]_277 | -0.0987827 | nan | nan | nan | | | user_obs[item]_278 | -0.0972348 | nan | nan | nan | | | user_obs[item]_279 | 0.0966328 | nan | nan | nan | | | user_obs[item]_280 | 0.0951051 | nan | nan | nan | | | user_obs[item]_281 | 0.0975423 | 25.7122 | 0.00379362 | 0.996973 | | | user_obs[item]_282 | -0.0791925 | nan | nan | nan | | | user_obs[item]_283 | 0.0958204 | nan | nan | nan | | | user_obs[item]_284 | -0.03573 | 7.18889 | -0.00497016 | 0.996034 | | | user_obs[item]_285 | 0.0810994 | nan | nan | nan | | | user_obs[item]_286 | -0.0951336 | nan | nan | nan | | | user_obs[item]_287 | 0.0841253 | 30.7186 | 0.00273858 | 0.997815 | | | user_obs[item]_288 | -0.089892 | nan | nan | nan | | | user_obs[item]_289 | 0.00667884 | 19.0526 | 0.000350547 | 0.99972 | | | user_obs[item]_290 | -0.0998388 | nan | nan | nan | | | user_obs[item]_291 | -0.0946387 | nan | nan | nan | | | user_obs[item]_292 | 0.0621858 | nan | nan | nan | | | user_obs[item]_293 | 0.0741694 | nan | nan | nan | | | user_obs[item]_294 | -0.0965614 | nan | nan | nan | | | user_obs[item]_295 | 0.0154573 | nan | nan | nan | | | user_obs[item]_296 | 0.0974524 | 33.1169 | 0.00294268 | 0.997652 | | | user_obs[item]_297 | 0.0196788 | 11.5686 | 0.00170105 | 0.998643 | | | user_obs[item]_298 | 0.0849441 | 12.0542 | 0.00704682 | 0.994377 | | | user_obs[item]_299 | 0.086225 | nan | nan | nan | | | user_obs[item]_300 | -0.0914505 | nan | nan | nan | | | user_obs[item]_301 | 0.0921167 | 6.46036 | 0.0142588 | 0.988624 | | | user_obs[item]_302 | -0.0933694 | nan | nan | nan | | | user_obs[item]_303 | -0.0489442 | 29.5071 | -0.00165873 | 0.998677 | | | user_obs[item]_304 | -0.0915071 | 42.9878 | -0.00212868 | 0.998302 | | | user_obs[item]_305 | -0.0667167 | nan | nan | nan | | | user_obs[item]_306 | -0.0938267 | nan | nan | nan | | | user_obs[item]_307 | 0.0443927 | 20.2969 | 0.00218716 | 0.998255 | | | user_obs[item]_308 | 0.0775837 | 13.0335 | 0.00595263 | 0.995251 | | | user_obs[item]_309 | 0.0827553 | 9.05362 | 0.00914058 | 0.992707 | | | user_obs[item]_310 | 0.098086 | nan | nan | nan | | | user_obs[item]_311 | 0.0934891 | nan | nan | nan | | | user_obs[item]_312 | -0.0943368 | 21.9152 | -0.00430463 | 0.996565 | | | user_obs[item]_313 | -0.0976427 | 22.4439 | -0.00435051 | 0.996529 | | | user_obs[item]_314 | -0.0774443 | 8.54967 | -0.00905817 | 0.992773 | | | user_obs[item]_315 | 0.0536131 | 25.3484 | 0.00211504 | 0.998312 | | | user_obs[item]_316 | 0.0899316 | 13.7525 | 0.00653929 | 0.994782 | | | user_obs[item]_317 | 0.0912012 | nan | nan | nan | | | user_obs[item]_318 | -0.0992509 | nan | nan | nan | | | user_obs[item]_319 | -0.0153901 | 19.0264 | -0.000808883 | 0.999355 | | | user_obs[item]_320 | -0.100451 | 18.9858 | -0.00529086 | 0.995779 | | | user_obs[item]_321 | 0.0648664 | 9.6448 | 0.00672553 | 0.994634 | | | user_obs[item]_322 | 0.0956555 | nan | nan | nan | | | user_obs[item]_323 | -0.00337489 | 46.38 | -7.2766e-05 | 0.999942 | | | user_obs[item]_324 | -0.0889243 | 68.278 | -0.00130239 | 0.998961 | | | user_obs[item]_325 | 0.0320671 | 18.9087 | 0.00169589 | 0.998647 | | | user_obs[item]_326 | -0.0959391 | 13.0347 | -0.0073603 | 0.994127 | | | user_obs[item]_327 | 0.00849687 | nan | nan | nan | | | user_obs[item]_328 | 0.0979957 | 17.4037 | 0.00563072 | 0.995507 | | | user_obs[item]_329 | 0.0999434 | 13.6447 | 0.00732472 | 0.994156 | | | user_obs[item]_330 | 0.0902393 | 18.4601 | 0.00488835 | 0.9961 | | | user_obs[item]_331 | -0.0937392 | nan | nan | nan | | | user_obs[item]_332 | -0.0918172 | nan | nan | nan | | | user_obs[item]_333 | 0.077242 | nan | nan | nan | | | user_obs[item]_334 | 0.0490345 | nan | nan | nan | | | user_obs[item]_335 | -0.0348693 | 25.5131 | -0.00136672 | 0.99891 | | | user_obs[item]_336 | -0.0219657 | nan | nan | nan | | | user_obs[item]_337 | -0.0996667 | 5.13986 | -0.0193909 | 0.984529 | | | user_obs[item]_338 | 0.0939913 | nan | nan | nan | | | user_obs[item]_339 | 0.0801734 | nan | nan | nan | | | user_obs[item]_340 | 0.0905974 | nan | nan | nan | | | user_obs[item]_341 | 0.0943427 | 24.0998 | 0.00391467 | 0.996877 | | | user_obs[item]_342 | -0.0936997 | 22.9254 | -0.00408717 | 0.996739 | | | user_obs[item]_343 | 0.0956675 | nan | nan | nan | | | user_obs[item]_344 | 0.0924433 | nan | nan | nan | | | user_obs[item]_345 | 0.101126 | 30.9882 | 0.00326336 | 0.997396 | | | user_obs[item]_346 | 0.0918561 | 30.0324 | 0.00305856 | 0.99756 | | | user_obs[item]_347 | -0.0245837 | 38.7188 | -0.000634929 | 0.999493 | | | user_obs[item]_348 | -0.0896538 | nan | nan | nan | | | user_obs[item]_349 | 0.0947577 | nan | nan | nan | | | user_obs[item]_350 | 0.0985861 | 13.4305 | 0.00734046 | 0.994143 | | | user_obs[item]_351 | 0.0979897 | nan | nan | nan | | | user_obs[item]_352 | 0.0999614 | 21.67 | 0.00461289 | 0.996319 | | | user_obs[item]_353 | 0.0822363 | 10.8624 | 0.00757076 | 0.993959 | | | user_obs[item]_354 | -0.0967529 | nan | nan | nan | | | user_obs[item]_355 | -0.0241711 | 11.2837 | -0.00214212 | 0.998291 | | | user_obs[item]_356 | 0.0973434 | nan | nan | nan | | | user_obs[item]_357 | -0.0788176 | 5.33626 | -0.0147702 | 0.988216 | | | user_obs[item]_358 | -0.0964527 | nan | nan | nan | | | user_obs[item]_359 | -0.0906674 | nan | nan | nan | | | user_obs[item]_360 | 0.0743494 | 19.7904 | 0.00375685 | 0.997002 | | | user_obs[item]_361 | -0.0918878 | 15.1822 | -0.00605235 | 0.995171 | | | user_obs[item]_362 | 0.0670612 | nan | nan | nan | | | user_obs[item]_363 | 0.0951579 | 7.74944 | 0.0122793 | 0.990203 | | | user_obs[item]_364 | 0.0961641 | 10.0334 | 0.00958435 | 0.992353 | | | user_obs[item]_365 | -0.0716678 | nan | nan | nan | | | user_obs[item]_366 | 0.000673009 | nan | nan | nan | | | user_obs[item]_367 | 0.0941488 | nan | nan | nan | | | user_obs[item]_368 | 0.100942 | nan | nan | nan | | | user_obs[item]_369 | 0.0993893 | nan | nan | nan | | | user_obs[item]_370 | 0.100108 | 11.1383 | 0.00898776 | 0.992829 | | | user_obs[item]_371 | 0.0221737 | nan | nan | nan | | | user_obs[item]_372 | -0.098036 | nan | nan | nan | | | user_obs[item]_373 | 0.0977015 | nan | nan | nan | | | user_obs[item]_374 | -0.0474964 | 6.59998 | -0.00719644 | 0.994258 | | | user_obs[item]_375 | -0.0979622 | 18.7567 | -0.00522279 | 0.995833 | | | user_obs[item]_376 | 0.0885426 | nan | nan | nan | | | user_obs[item]_377 | -0.0919497 | nan | nan | nan | | | user_obs[item]_378 | -0.0564472 | nan | nan | nan | | | user_obs[item]_379 | 0.0964465 | 7.6299 | 0.0126406 | 0.989915 | | | user_obs[item]_380 | 0.0248318 | 21.5719 | 0.00115112 | 0.999082 | | | user_obs[item]_381 | -0.10122 | nan | nan | nan | | | user_obs[item]_382 | 0.0836685 | 30.0802 | 0.00278152 | 0.997781 | | | user_obs[item]_383 | -0.00442575 | nan | nan | nan | | | item_obs[user]_0 | 0.0953294 | nan | nan | nan | | | item_obs[user]_1 | 0.0849606 | nan | nan | nan | | | item_obs[user]_2 | -0.074826 | 11.5431 | -0.00648234 | 0.994828 | | | item_obs[user]_3 | -0.0930095 | nan | nan | nan | | | item_obs[user]_4 | -0.088183 | nan | nan | nan | | | item_obs[user]_5 | -0.0985564 | nan | nan | nan | | | item_obs[user]_6 | 0.082744 | 24.3046 | 0.00340446 | 0.997284 | | | item_obs[user]_7 | -0.0800593 | 27.0081 | -0.00296427 | 0.997635 | | | item_obs[user]_8 | -0.0951243 | nan | nan | nan | | | item_obs[user]_9 | -0.0879356 | nan | nan | nan | | | item_obs[user]_10 | 0.096148 | 34.1177 | 0.00281813 | 0.997751 | | | item_obs[user]_11 | -0.0197937 | nan | nan | nan | | | item_obs[user]_12 | 0.00669822 | 37.6851 | 0.000177742 | 0.999858 | | | item_obs[user]_13 | -0.0797179 | nan | nan | nan | | | item_obs[user]_14 | 0.036266 | nan | nan | nan | | | item_obs[user]_15 | 0.0701227 | nan | nan | nan | | | item_obs[user]_16 | 0.0723617 | nan | nan | nan | | | item_obs[user]_17 | 0.0411248 | nan | nan | nan | | | item_obs[user]_18 | -0.0554874 | 22.3587 | -0.00248169 | 0.99802 | | | item_obs[user]_19 | -0.0863106 | nan | nan | nan | | | item_obs[user]_20 | 0.0677762 | nan | nan | nan | | | item_obs[user]_21 | -0.0538812 | nan | nan | nan | | | item_obs[user]_22 | 0.0669267 | nan | nan | nan | | | item_obs[user]_23 | -0.064349 | nan | nan | nan | | | item_obs[user]_24 | -0.0746401 | nan | nan | nan | | | item_obs[user]_25 | -0.0784752 | nan | nan | nan | | | item_obs[user]_26 | 0.0728878 | 36.6919 | 0.00198648 | 0.998415 | | | item_obs[user]_27 | 0.0765257 | nan | nan | nan | | | item_obs[user]_28 | 0.079921 | nan | nan | nan | | | item_obs[user]_29 | 0.0753488 | 44.7365 | 0.00168428 | 0.998656 | | | item_obs[user]_30 | 0.0669301 | 14.2758 | 0.00468836 | 0.996259 | | | item_obs[user]_31 | -0.0371062 | nan | nan | nan | | | item_obs[user]_32 | 0.0682146 | nan | nan | nan | | | item_obs[user]_33 | 0.0834677 | nan | nan | nan | | | item_obs[user]_34 | 0.0153546 | nan | nan | nan | | | item_obs[user]_35 | 0.0685816 | nan | nan | nan | | | item_obs[user]_36 | -0.0880266 | 29.742 | -0.00295968 | 0.997639 | | | item_obs[user]_37 | -0.0885725 | 5.39468 | -0.0164185 | 0.986901 | | | item_obs[user]_38 | 0.09194 | nan | nan | nan | | | item_obs[user]_39 | 0.0756242 | nan | nan | nan | | | item_obs[user]_40 | -0.0287947 | nan | nan | nan | | | item_obs[user]_41 | 0.0585076 | 13.8805 | 0.0042151 | 0.996637 | | | item_obs[user]_42 | 0.0564173 | 6.45187 | 0.00874434 | 0.993023 | | | item_obs[user]_43 | 0.0635485 | 8.21708 | 0.0077337 | 0.993829 | | | item_obs[user]_44 | -0.0873843 | 48.6134 | -0.00179754 | 0.998566 | | | item_obs[user]_45 | -0.0834753 | 94.0016 | -0.00088802 | 0.999291 | | | item_obs[user]_46 | 0.0764609 | 14.8363 | 0.00515363 | 0.995888 | | | item_obs[user]_47 | 0.0274219 | 43.366 | 0.000632336 | 0.999495 | | | item_obs[user]_48 | -0.0873803 | nan | nan | nan | | | item_obs[user]_49 | -0.0816547 | 2.08968 | -0.0390751 | 0.96883 | | | item_obs[user]_50 | -0.0226442 | nan | nan | nan | | | item_obs[user]_51 | -0.0956599 | nan | nan | nan | | | item_obs[user]_52 | 0.0783386 | nan | nan | nan | | | item_obs[user]_53 | -0.0633794 | 13.9623 | -0.00453934 | 0.996378 | | | item_obs[user]_54 | 0.0953538 | 26.6147 | 0.00358275 | 0.997141 | | | item_obs[user]_55 | 0.055353 | nan | nan | nan | | | item_obs[user]_56 | 0.0908716 | nan | nan | nan | | | item_obs[user]_57 | 0.0607073 | 41.2198 | 0.00147277 | 0.998825 | | | item_obs[user]_58 | -0.0720462 | 19.1767 | -0.00375698 | 0.997002 | | | item_obs[user]_59 | -0.0603374 | 54.1613 | -0.00111403 | 0.999111 | | | item_obs[user]_60 | -0.0185613 | nan | nan | nan | | | item_obs[user]_61 | 0.0708304 | 9.38333 | 0.00754853 | 0.993977 | | | item_obs[user]_62 | 0.0791017 | 7.72274 | 0.0102427 | 0.991828 | | | item_obs[user]_63 | -0.0571787 | nan | nan | nan | | | item_obs[user]_64 | 0.0329169 | 121.471 | 0.000270985 | 0.999784 | | | item_obs[user]_65 | 0.0226816 | nan | nan | nan | | | item_obs[user]_66 | -0.00637343 | nan | nan | nan | | | item_obs[user]_67 | -0.0545586 | nan | nan | nan | | | item_obs[user]_68 | -0.0317221 | 32.09 | -0.000988538 | 0.999211 | | | item_obs[user]_69 | -0.0943223 | 17.817 | -0.00529395 | 0.995776 | | | item_obs[user]_70 | 0.00471362 | nan | nan | nan | | | item_obs[user]_71 | -0.00793153 | nan | nan | nan | | | item_obs[user]_72 | -0.0335794 | nan | nan | nan | | | item_obs[user]_73 | -0.0309263 | 2.68062 | -0.011537 | 0.990795 | | | item_obs[user]_74 | 0.0303063 | nan | nan | nan | | | item_obs[user]_75 | -0.0732667 | nan | nan | nan | | | item_obs[user]_76 | -0.0098093 | 27.1032 | -0.000361924 | 0.999711 | | | item_obs[user]_77 | -0.0138997 | nan | nan | nan | | | item_obs[user]_78 | -0.0118171 | 7.5586 | -0.0015634 | 0.998753 | | | item_obs[user]_79 | 0.0233654 | nan | nan | nan | | | item_obs[user]_80 | 0.0030736 | 37.2507 | 8.25112e-05 | 0.999934 | | | item_obs[user]_81 | 0.0177793 | nan | nan | nan | | | item_obs[user]_82 | -0.071604 | 15.0995 | -0.00474214 | 0.996216 | | | item_obs[user]_83 | -0.0261888 | nan | nan | nan | | | item_obs[user]_84 | 0.0011142 | nan | nan | nan | | | item_obs[user]_85 | 0.0014559 | 47.6001 | 3.0586e-05 | 0.999976 | | | item_obs[user]_86 | 0.00310078 | nan | nan | nan | | | item_obs[user]_87 | 0.0195079 | 0.511697 | 0.038124 | 0.969589 | | | item_obs[user]_88 | -0.00919021 | 19.8504 | -0.000462973 | 0.999631 | | | item_obs[user]_89 | -0.0123839 | nan | nan | nan | | | item_obs[user]_90 | -0.0103893 | nan | nan | nan | | | item_obs[user]_91 | 0.0105079 | nan | nan | nan | | | item_obs[user]_92 | 0.0145338 | nan | nan | nan | | | item_obs[user]_93 | 0.00834626 | nan | nan | nan | | | item_obs[user]_94 | 0.00379122 | 26.508 | 0.000143022 | 0.999886 | | | item_obs[user]_95 | 0.0260624 | nan | nan | nan | | | item_obs[user]_96 | -0.00103211 | 30.4632 | -3.38804e-05 | 0.999973 | | | item_obs[user]_97 | 0.00749817 | nan | nan | nan | | | item_obs[user]_98 | -0.00386528 | nan | nan | nan | | | item_obs[user]_99 | -0.00175826 | 14.1111 | -0.000124602 | 0.999901 | | | item_obs[user]_100 | -0.0241035 | 25.1352 | -0.000958957 | 0.999235 | | | item_obs[user]_101 | -0.0250482 | 10.4112 | -0.00240589 | 0.99808 | | | item_obs[user]_102 | 0.055889 | nan | nan | nan | | | item_obs[user]_103 | 0.000421926 | nan | nan | nan | | | item_obs[user]_104 | 0.0110912 | nan | nan | nan | | | item_obs[user]_105 | -0.00341909 | nan | nan | nan | | | item_obs[user]_106 | -0.00352724 | nan | nan | nan | | | item_obs[user]_107 | -0.00643651 | nan | nan | nan | | | item_obs[user]_108 | -0.0288748 | 107.796 | -0.000267866 | 0.999786 | | | item_obs[user]_109 | -0.016833 | nan | nan | nan | | | item_obs[user]_110 | 0.0100099 | nan | nan | nan | | | item_obs[user]_111 | -0.0096791 | 34.0665 | -0.000284123 | 0.999773 | | | item_obs[user]_112 | -0.0285409 | 80.6287 | -0.000353979 | 0.999718 | | | item_obs[user]_113 | -0.0169635 | 17.9643 | -0.000944288 | 0.999247 | | | item_obs[user]_114 | -0.00225602 | 31.8136 | -7.09138e-05 | 0.999943 | | | item_obs[user]_115 | -0.0541435 | 60.7676 | -0.000890993 | 0.999289 | | | item_obs[user]_116 | 0.00810096 | 20.7395 | 0.000390605 | 0.999688 | | | item_obs[user]_117 | -0.0162214 | 37.0959 | -0.000437283 | 0.999651 | | | item_obs[user]_118 | 0.0258092 | 10.9363 | 0.00235996 | 0.998117 | | | item_obs[user]_119 | -2.26311e-05 | 40.026 | -5.65411e-07 | 1 | | | item_obs[user]_120 | 0.0415286 | 13.5548 | 0.00306376 | 0.997555 | | | item_obs[user]_121 | -0.0207364 | nan | nan | nan | | | item_obs[user]_122 | -0.0065696 | 20.8918 | -0.000314458 | 0.999749 | | | item_obs[user]_123 | 0.0190524 | 14.869 | 0.00128136 | 0.998978 | | | item_obs[user]_124 | 0.0316112 | nan | nan | nan | | | item_obs[user]_125 | 0.00614487 | nan | nan | nan | | | item_obs[user]_126 | 0.0134792 | 19.8742 | 0.000678223 | 0.999459 | | | item_obs[user]_127 | -0.0351917 | nan | nan | nan | | | item_obs[user]_128 | 0.082355 | nan | nan | nan | | | item_obs[user]_129 | 0.095309 | 18.8028 | 0.00506887 | 0.995956 | | | item_obs[user]_130 | -0.0879696 | 29.2859 | -0.00300382 | 0.997603 | | | item_obs[user]_131 | -0.0830043 | 37.5038 | -0.00221323 | 0.998234 | | | item_obs[user]_132 | -0.0896925 | nan | nan | nan | | | item_obs[user]_133 | -0.0930006 | nan | nan | nan | | | item_obs[user]_134 | 0.0713312 | 37.349 | 0.00190986 | 0.998476 | | | item_obs[user]_135 | -0.0770028 | 15.9662 | -0.00482285 | 0.996152 | | | item_obs[user]_136 | -0.0784881 | 36.5061 | -0.00215 | 0.998285 | | | item_obs[user]_137 | -0.0899085 | nan | nan | nan | | | item_obs[user]_138 | 0.0795249 | 52.347 | 0.00151919 | 0.998788 | | | item_obs[user]_139 | -0.100354 | 56.5839 | -0.00177354 | 0.998585 | | | item_obs[user]_140 | -0.0748308 | nan | nan | nan | | | item_obs[user]_141 | -0.0945848 | nan | nan | nan | | | item_obs[user]_142 | -0.0841109 | nan | nan | nan | | | item_obs[user]_143 | 0.0791375 | nan | nan | nan | | | item_obs[user]_144 | 0.075823 | 24.9554 | 0.00303834 | 0.997576 | | | item_obs[user]_145 | 0.0782816 | nan | nan | nan | | | item_obs[user]_146 | -0.100106 | 33.423 | -0.00299513 | 0.99761 | | | item_obs[user]_147 | -0.0894256 | 43.4752 | -0.00205694 | 0.998359 | | | item_obs[user]_148 | -0.0748489 | 6.55435 | -0.0114197 | 0.990889 | | | item_obs[user]_149 | 0.0691177 | nan | nan | nan | | | item_obs[user]_150 | -0.0574347 | 16.2724 | -0.00352958 | 0.997184 | | | item_obs[user]_151 | 0.0294429 | nan | nan | nan | | | item_obs[user]_152 | 0.00563431 | 39.8466 | 0.0001414 | 0.999887 | | | item_obs[user]_153 | -0.096552 | 17.4384 | -0.00553676 | 0.995582 | | | item_obs[user]_154 | 0.0450145 | nan | nan | nan | | | item_obs[user]_155 | 0.0976836 | 50.7942 | 0.00192313 | 0.998466 | | | item_obs[user]_156 | 0.0980685 | 14.9795 | 0.00654686 | 0.994776 | | | item_obs[user]_157 | 0.0968644 | 21.2062 | 0.00456774 | 0.996355 | | | item_obs[user]_158 | -0.0524446 | 17.5892 | -0.00298163 | 0.997621 | | | item_obs[user]_159 | 0.0945053 | 54.6474 | 0.00172936 | 0.99862 | | | item_obs[user]_160 | -0.0973398 | nan | nan | nan | | | item_obs[user]_161 | 0.0734301 | 26.8878 | 0.00273098 | 0.997821 | | | item_obs[user]_162 | -0.0609306 | 22.0643 | -0.0027615 | 0.997797 | | | item_obs[user]_163 | -0.101368 | nan | nan | nan | | | item_obs[user]_164 | -0.0810076 | 16.8674 | -0.00480262 | 0.996168 | | | item_obs[user]_165 | -0.080903 | nan | nan | nan | | | item_obs[user]_166 | 0.0833991 | nan | nan | nan | | | item_obs[user]_167 | 0.0658189 | 27.7891 | 0.00236851 | 0.99811 | | | item_obs[user]_168 | 0.0812031 | 7.48511 | 0.0108486 | 0.991344 | | | item_obs[user]_169 | -0.0805171 | nan | nan | nan | | | item_obs[user]_170 | -0.0787244 | nan | nan | nan | | | item_obs[user]_171 | -0.0975392 | 8.79285 | -0.011093 | 0.991149 | | | item_obs[user]_172 | -0.0924256 | 31.3937 | -0.00294408 | 0.997651 | | | item_obs[user]_173 | -0.0832566 | 46.9572 | -0.00177303 | 0.998585 | | | item_obs[user]_174 | 0.0980777 | 6.70879 | 0.0146193 | 0.988336 | | | item_obs[user]_175 | -0.078849 | nan | nan | nan | | | item_obs[user]_176 | -0.0933594 | nan | nan | nan | | | item_obs[user]_177 | -0.0952743 | 26.0786 | -0.00365334 | 0.997085 | | | item_obs[user]_178 | -0.0432346 | 44.2405 | -0.000977262 | 0.99922 | | | item_obs[user]_179 | -0.0840413 | 26.3496 | -0.00318947 | 0.997455 | | | item_obs[user]_180 | 0.0800613 | 11.4991 | 0.00696239 | 0.994445 | | | item_obs[user]_181 | -0.0740749 | 24.541 | -0.00301842 | 0.997592 | | | item_obs[user]_182 | 0.0782861 | 40.5394 | 0.00193111 | 0.998459 | | | item_obs[user]_183 | -0.0634375 | 34.7348 | -0.00182634 | 0.998543 | | | item_obs[user]_184 | 0.0908027 | 12.6804 | 0.0071609 | 0.994286 | | | item_obs[user]_185 | 0.0148654 | nan | nan | nan | | | item_obs[user]_186 | 0.0153121 | 7.12636 | 0.00214866 | 0.998286 | | | item_obs[user]_187 | 0.0999311 | 22.8033 | 0.0043823 | 0.996503 | | | item_obs[user]_188 | 0.0924136 | nan | nan | nan | | | item_obs[user]_189 | -0.0313981 | nan | nan | nan | | | item_obs[user]_190 | 0.0985501 | 10.9833 | 0.0089727 | 0.992841 | | | item_obs[user]_191 | -0.0859244 | 36.5846 | -0.00234865 | 0.998126 | | | item_obs[user]_192 | 0.0940064 | nan | nan | nan | | | item_obs[user]_193 | 0.0832584 | 32.0548 | 0.00259738 | 0.997928 | | | item_obs[user]_194 | 0.100225 | nan | nan | nan | | | item_obs[user]_195 | -0.0909778 | 9.19876 | -0.00989022 | 0.992109 | | | item_obs[user]_196 | -0.0874979 | nan | nan | nan | | | item_obs[user]_197 | -0.0938457 | 29.175 | -0.00321665 | 0.997433 | | | item_obs[user]_198 | -0.0937929 | 15.6314 | -0.00600031 | 0.995212 | | | item_obs[user]_199 | 0.0990231 | nan | nan | nan | | | item_obs[user]_200 | -0.0921627 | 11.5725 | -0.00796393 | 0.993646 | | | item_obs[user]_201 | -0.0871917 | 23.6936 | -0.00367996 | 0.997064 | | | item_obs[user]_202 | 0.0933521 | nan | nan | nan | | | item_obs[user]_203 | -0.0949833 | nan | nan | nan | | | item_obs[user]_204 | -0.0959055 | nan | nan | nan | | | item_obs[user]_205 | 0.0117426 | nan | nan | nan | | | item_obs[user]_206 | -0.0963619 | 6.62996 | -0.0145343 | 0.988404 | | | item_obs[user]_207 | 0.0942454 | 16.5252 | 0.00570314 | 0.99545 | | | item_obs[user]_208 | -0.0993581 | nan | nan | nan | | | item_obs[user]_209 | 0.0948967 | 4.04483 | 0.0234612 | 0.981282 | | | item_obs[user]_210 | -0.0947503 | nan | nan | nan | | | item_obs[user]_211 | -0.0834834 | nan | nan | nan | | | item_obs[user]_212 | -0.0986454 | nan | nan | nan | | | item_obs[user]_213 | 0.0977547 | 17.5796 | 0.00556067 | 0.995563 | | | item_obs[user]_214 | -0.0991265 | 25.6013 | -0.00387194 | 0.996911 | | | item_obs[user]_215 | 0.0972205 | 3.50911 | 0.0277052 | 0.977897 | | | item_obs[user]_216 | 0.0301802 | 24.2897 | 0.00124251 | 0.999009 | | | item_obs[user]_217 | 0.0561406 | 13.9829 | 0.00401496 | 0.996797 | | | item_obs[user]_218 | -0.098299 | 25.9009 | -0.0037952 | 0.996972 | | | item_obs[user]_219 | -0.0992086 | 32.7797 | -0.00302652 | 0.997585 | | | item_obs[user]_220 | 0.0253464 | nan | nan | nan | | | item_obs[user]_221 | -0.100714 | 23.3067 | -0.00432123 | 0.996552 | | | item_obs[user]_222 | -0.0995028 | 19.086 | -0.0052134 | 0.99584 | | | item_obs[user]_223 | 0.0961196 | nan | nan | nan | | | item_obs[user]_224 | -0.0984098 | nan | nan | nan | | | item_obs[user]_225 | -0.039659 | nan | nan | nan | | | item_obs[user]_226 | -0.0970929 | nan | nan | nan | | | item_obs[user]_227 | -0.0983761 | nan | nan | nan | | | item_obs[user]_228 | -0.0828517 | 31.4185 | -0.00263703 | 0.997896 | | | item_obs[user]_229 | -0.0843641 | 14.2476 | -0.00592128 | 0.995276 | | | item_obs[user]_230 | 0.0902104 | nan | nan | nan | | | item_obs[user]_231 | -0.0994968 | 29.1198 | -0.00341681 | 0.997274 | | | item_obs[user]_232 | 0.0962286 | nan | nan | nan | | | item_obs[user]_233 | -0.0975643 | 35.3898 | -0.00275685 | 0.9978 | | | item_obs[user]_234 | -0.09747 | nan | nan | nan | | | item_obs[user]_235 | -0.0976395 | nan | nan | nan | | | item_obs[user]_236 | -0.0871684 | nan | nan | nan | | | item_obs[user]_237 | -0.0422475 | nan | nan | nan | | | item_obs[user]_238 | -0.100429 | 15.8252 | -0.0063461 | 0.994937 | | | item_obs[user]_239 | -0.0962664 | 44.1614 | -0.00217988 | 0.998261 | | | item_obs[user]_240 | -0.0874716 | nan | nan | nan | | | item_obs[user]_241 | -0.0550082 | nan | nan | nan | | | item_obs[user]_242 | 0.0942492 | 19.712 | 0.00478131 | 0.996185 | | | item_obs[user]_243 | -0.0925776 | nan | nan | nan | | | item_obs[user]_244 | -0.100297 | 10.4662 | -0.00958297 | 0.992354 | | | item_obs[user]_245 | -0.0942868 | nan | nan | nan | | | item_obs[user]_246 | 0.0936042 | nan | nan | nan | | | item_obs[user]_247 | -0.0982692 | 41.5473 | -0.00236524 | 0.998113 | | | item_obs[user]_248 | 0.0904482 | nan | nan | nan | | | item_obs[user]_249 | -0.0960117 | nan | nan | nan | | | item_obs[user]_250 | 0.100448 | 29.5796 | 0.00339585 | 0.997291 | | | item_obs[user]_251 | 0.0970124 | nan | nan | nan | | | item_obs[user]_252 | 0.0957162 | nan | nan | nan | | | item_obs[user]_253 | -0.100491 | 8.99075 | -0.0111771 | 0.991082 | | | item_obs[user]_254 | -0.000854391 | nan | nan | nan | | | item_obs[user]_255 | -0.0946775 | 16.1911 | -0.00584749 | 0.995334 | | | item_obs[user]_256 | -0.0970131 | nan | nan | nan | | | item_obs[user]_257 | -0.0529265 | 89.3827 | -0.000592134 | 0.999528 | | | item_obs[user]_258 | 0.0968852 | 23.193 | 0.00417735 | 0.996667 | | | item_obs[user]_259 | 0.0969059 | nan | nan | nan | | | item_obs[user]_260 | 0.0915281 | nan | nan | nan | | | item_obs[user]_261 | -0.100793 | nan | nan | nan | | | item_obs[user]_262 | -0.0983033 | 51.1771 | -0.00192084 | 0.998467 | | | item_obs[user]_263 | 0.0977857 | nan | nan | nan | | | item_obs[user]_264 | 0.098056 | 12.0407 | 0.0081437 | 0.993502 | | | item_obs[user]_265 | 0.0912735 | nan | nan | nan | | | item_obs[user]_266 | -0.0979466 | 26.0132 | -0.00376527 | 0.996996 | | | item_obs[user]_267 | -0.0996658 | nan | nan | nan | | | item_obs[user]_268 | 0.0991034 | 11.0936 | 0.00893336 | 0.992872 | | | item_obs[user]_269 | 0.0929837 | nan | nan | nan | | | item_obs[user]_270 | -0.0987016 | 21.8965 | -0.00450765 | 0.996403 | | | item_obs[user]_271 | -0.0981278 | 21.354 | -0.00459529 | 0.996334 | | | item_obs[user]_272 | -0.0974374 | nan | nan | nan | | | item_obs[user]_273 | -0.0984176 | nan | nan | nan | | | item_obs[user]_274 | -0.0997197 | 15.2512 | -0.00653848 | 0.994783 | | | item_obs[user]_275 | 0.09348 | 35.9393 | 0.00260105 | 0.997925 | | | item_obs[user]_276 | -0.0969642 | nan | nan | nan | | | item_obs[user]_277 | -0.100422 | 40.003 | -0.00251035 | 0.997997 | | | item_obs[user]_278 | -0.0785515 | nan | nan | nan | | | item_obs[user]_279 | 0.0988289 | 22.1784 | 0.0044561 | 0.996445 | | | item_obs[user]_280 | -0.100634 | 30.8907 | -0.00325774 | 0.997401 | | | item_obs[user]_281 | 0.0922791 | 47.1989 | 0.00195511 | 0.99844 | | | item_obs[user]_282 | -0.0985925 | nan | nan | nan | | | item_obs[user]_283 | -0.0855048 | 109.686 | -0.00077954 | 0.999378 | | | item_obs[user]_284 | -0.079503 | 7.65406 | -0.010387 | 0.991712 | | | item_obs[user]_285 | -0.0951967 | nan | nan | nan | | | item_obs[user]_286 | 0.064595 | nan | nan | nan | | | item_obs[user]_287 | 0.0992524 | nan | nan | nan | | | item_obs[user]_288 | -0.0978423 | nan | nan | nan | | | item_obs[user]_289 | -0.0981954 | 8.2897 | -0.0118455 | 0.990549 | | | item_obs[user]_290 | 0.0993745 | nan | nan | nan | | | item_obs[user]_291 | -0.0979952 | nan | nan | nan | | | item_obs[user]_292 | 0.0974685 | 37.5531 | 0.00259549 | 0.997929 | | | item_obs[user]_293 | 0.0974931 | 20.8291 | 0.00468061 | 0.996265 | | | item_obs[user]_294 | -0.0967849 | 62.2247 | -0.00155541 | 0.998759 | | | item_obs[user]_295 | -0.0981366 | 8.26488 | -0.0118739 | 0.990526 | | | item_obs[user]_296 | -0.00655038 | 12.5499 | -0.000521946 | 0.999584 | | | item_obs[user]_297 | -0.097014 | nan | nan | nan | | | item_obs[user]_298 | -0.0959909 | nan | nan | nan | | | item_obs[user]_299 | -0.0983391 | 3.06209 | -0.0321151 | 0.97438 | | | item_obs[user]_300 | 0.0789196 | nan | nan | nan | | | item_obs[user]_301 | 0.0970505 | nan | nan | nan | | | item_obs[user]_302 | -0.0930589 | nan | nan | nan | | | item_obs[user]_303 | 0.0994269 | 60.973 | 0.00163067 | 0.998699 | | | item_obs[user]_304 | 0.0624469 | 30.8561 | 0.00202381 | 0.998385 | | | item_obs[user]_305 | 0.0875897 | nan | nan | nan | | | item_obs[user]_306 | 0.0993594 | 15.1301 | 0.00656701 | 0.99476 | | | item_obs[user]_307 | 0.096207 | nan | nan | nan | | | item_obs[user]_308 | -0.0974722 | 14.7545 | -0.00660625 | 0.994729 | | | item_obs[user]_309 | 0.0987371 | nan | nan | nan | | | item_obs[user]_310 | -0.098197 | 48.1707 | -0.00203852 | 0.998373 | | | item_obs[user]_311 | 0.100163 | nan | nan | nan | | | item_obs[user]_312 | -0.0765836 | 11.3691 | -0.00673609 | 0.994625 | | | item_obs[user]_313 | -0.0992518 | 23.0874 | -0.00429897 | 0.99657 | | | item_obs[user]_314 | 0.081712 | 20.5884 | 0.00396884 | 0.996833 | | | item_obs[user]_315 | 0.0988516 | nan | nan | nan | | | item_obs[user]_316 | 0.0995762 | nan | nan | nan | | | item_obs[user]_317 | 0.0199967 | 5.69144 | 0.00351346 | 0.997197 | | | item_obs[user]_318 | -0.0811777 | 17.7111 | -0.00458345 | 0.996343 | | | item_obs[user]_319 | 0.0594883 | 36.3683 | 0.00163572 | 0.998695 | | | item_obs[user]_320 | -0.0706452 | 127.149 | -0.000555611 | 0.999557 | | | item_obs[user]_321 | 0.0932138 | nan | nan | nan | | | item_obs[user]_322 | 0.0957365 | nan | nan | nan | | | item_obs[user]_323 | 0.0888632 | 15.3586 | 0.0057859 | 0.995384 | | | item_obs[user]_324 | 0.0148378 | 34.7338 | 0.000427185 | 0.999659 | | | item_obs[user]_325 | -0.0959005 | 3.56834 | -0.0268754 | 0.978559 | | | item_obs[user]_326 | -0.0936275 | 31.0117 | -0.00301911 | 0.997591 | | | item_obs[user]_327 | 0.094207 | 46.1988 | 0.00203917 | 0.998373 | | | item_obs[user]_328 | 0.0904799 | nan | nan | nan | | | item_obs[user]_329 | 0.00110466 | 21.3344 | 5.17785e-05 | 0.999959 | | | item_obs[user]_330 | -0.088346 | nan | nan | nan | | | item_obs[user]_331 | -0.0946461 | 47.9157 | -0.00197526 | 0.998424 | | | item_obs[user]_332 | 0.0858891 | 31.448 | 0.00273115 | 0.997821 | | | item_obs[user]_333 | 0.0966716 | nan | nan | nan | | | item_obs[user]_334 | -0.0983847 | 30.7631 | -0.00319814 | 0.997448 | | | item_obs[user]_335 | -0.0862027 | nan | nan | nan | | | item_obs[user]_336 | -0.0956795 | nan | nan | nan | | | item_obs[user]_337 | -0.084618 | 13.3537 | -0.00633668 | 0.994944 | | | item_obs[user]_338 | -0.0945352 | nan | nan | nan | | | item_obs[user]_339 | 0.0895445 | 24.7765 | 0.00361409 | 0.997116 | | | item_obs[user]_340 | -0.0967957 | 14.8669 | -0.0065108 | 0.994805 | | | item_obs[user]_341 | -0.075029 | 36.2511 | -0.0020697 | 0.998349 | | | item_obs[user]_342 | -0.0974254 | 14.4251 | -0.00675388 | 0.994611 | | | item_obs[user]_343 | 0.0947823 | nan | nan | nan | | | item_obs[user]_344 | -0.091086 | nan | nan | nan | | | item_obs[user]_345 | 0.0975158 | nan | nan | nan | | | item_obs[user]_346 | -0.0944492 | 52.0876 | -0.00181328 | 0.998553 | | | item_obs[user]_347 | -0.0646427 | 97.4615 | -0.000663264 | 0.999471 | | | item_obs[user]_348 | 0.0679354 | 29.6162 | 0.00229386 | 0.99817 | | | item_obs[user]_349 | -0.0968292 | 43.9476 | -0.00220329 | 0.998242 | | | item_obs[user]_350 | 0.0696103 | nan | nan | nan | | | item_obs[user]_351 | 0.0957686 | nan | nan | nan | | | item_obs[user]_352 | -0.0958262 | 40.836 | -0.00234661 | 0.998128 | | | item_obs[user]_353 | -0.0935495 | 35.8829 | -0.00260708 | 0.99792 | | | item_obs[user]_354 | 0.091956 | nan | nan | nan | | | item_obs[user]_355 | -0.0956021 | 4.51372 | -0.0211803 | 0.983102 | | | item_obs[user]_356 | 0.0924389 | nan | nan | nan | | | item_obs[user]_357 | 0.0922818 | 15.5246 | 0.00594424 | 0.995257 | | | item_obs[user]_358 | -0.0894831 | nan | nan | nan | | | item_obs[user]_359 | -0.0946042 | nan | nan | nan | | | item_obs[user]_360 | 0.100855 | nan | nan | nan | | | item_obs[user]_361 | -0.0978983 | 7.57954 | -0.0129161 | 0.989695 | | | item_obs[user]_362 | -0.098857 | 10.7598 | -0.0091876 | 0.992669 | | | item_obs[user]_363 | -0.0956965 | 10.4204 | -0.00918361 | 0.992673 | | | item_obs[user]_364 | -0.0953318 | 31.3876 | -0.00303724 | 0.997577 | | | item_obs[user]_365 | 0.0936969 | 100.819 | 0.000929354 | 0.999258 | | | item_obs[user]_366 | -0.0978077 | nan | nan | nan | | | item_obs[user]_367 | -0.030269 | nan | nan | nan | | | item_obs[user]_368 | -0.0949272 | 26.6484 | -0.00356221 | 0.997158 | | | item_obs[user]_369 | 0.0185981 | nan | nan | nan | | | item_obs[user]_370 | 0.0932242 | 20.08 | 0.00464263 | 0.996296 | | | item_obs[user]_371 | 0.0784275 | 26.7891 | 0.00292758 | 0.997664 | | | item_obs[user]_372 | -0.0946762 | 20.9825 | -0.00451214 | 0.9964 | | | item_obs[user]_373 | 0.0904542 | nan | nan | nan | | | item_obs[user]_374 | -0.0890081 | nan | nan | nan | | | item_obs[user]_375 | 0.0875345 | 37.3756 | 0.00234202 | 0.998131 | | | item_obs[user]_376 | 0.0971968 | 9.30587 | 0.0104447 | 0.991667 | | | item_obs[user]_377 | -0.0939917 | nan | nan | nan | | | item_obs[user]_378 | 0.0703475 | 19.195 | 0.00366488 | 0.997076 | | | item_obs[user]_379 | 0.0950455 | 45.6899 | 0.00208023 | 0.99834 | | | item_obs[user]_380 | 0.096078 | nan | nan | nan | | | item_obs[user]_381 | 0.071838 | 4.46025 | 0.0161063 | 0.98715 | | | item_obs[user]_382 | 0.0437681 | nan | nan | nan | | | item_obs[user]_383 | -0.0996076 | nan | nan | nan | | | item_obs[user]_384 | 0.0925058 | 78.3725 | 0.00118034 | 0.999058 | | | item_obs[user]_385 | -0.0997655 | nan | nan | nan | | | item_obs[user]_386 | 0.0996641 | nan | nan | nan | | | item_obs[user]_387 | -0.0885556 | 6.50647 | -0.0136104 | 0.989141 | | | item_obs[user]_388 | -0.0394394 | 18.6329 | -0.00211665 | 0.998311 | | | item_obs[user]_389 | -0.0888595 | nan | nan | nan | | | item_obs[user]_390 | 0.0815189 | nan | nan | nan | | | item_obs[user]_391 | -0.00675963 | nan | nan | nan | | | item_obs[user]_392 | -0.0914254 | nan | nan | nan | | | item_obs[user]_393 | -0.0311297 | 35.5267 | -0.000876234 | 0.999301 | | | item_obs[user]_394 | 0.0921635 | nan | nan | nan | | | item_obs[user]_395 | 0.0857765 | 18.9483 | 0.00452688 | 0.996388 | | | item_obs[user]_396 | -0.0943922 | 11.9876 | -0.00787413 | 0.993717 | | | item_obs[user]_397 | 0.0998388 | 29.0521 | 0.00343655 | 0.997258 | | | item_obs[user]_398 | -0.0955568 | 36.7198 | -0.00260233 | 0.997924 | | | item_obs[user]_399 | 0.0929876 | nan | nan | nan | | | item_obs[user]_400 | -0.0994204 | nan | nan | nan | | | item_obs[user]_401 | 0.0935985 | 22.8397 | 0.00409806 | 0.99673 | | | item_obs[user]_402 | 0.0935873 | 17.6195 | 0.00531157 | 0.995762 | | | item_obs[user]_403 | -0.00388969 | 39.7795 | -9.77812e-05 | 0.999922 | | | item_obs[user]_404 | -0.0979633 | 8.70624 | -0.0112521 | 0.991022 | | | item_obs[user]_405 | 0.0957639 | 28.2247 | 0.00339291 | 0.997293 | | | item_obs[user]_406 | -0.0970069 | nan | nan | nan | | | item_obs[user]_407 | 0.100603 | 43.6991 | 0.00230217 | 0.998163 | | | item_obs[user]_408 | 0.0968577 | 29.672 | 0.00326428 | 0.997395 | | | item_obs[user]_409 | 0.0994124 | 44.7094 | 0.00222352 | 0.998226 | | | item_obs[user]_410 | 0.00833281 | nan | nan | nan | | | item_obs[user]_411 | -0.098528 | nan | nan | nan | | | item_obs[user]_412 | -0.0992177 | 21.6188 | -0.00458941 | 0.996338 | | | item_obs[user]_413 | -0.0990562 | 15.2129 | -0.00651134 | 0.994805 | | | item_obs[user]_414 | -0.0967073 | 14.7606 | -0.00655172 | 0.994773 | | | item_obs[user]_415 | 0.0964948 | nan | nan | nan | | | item_obs[user]_416 | -0.09874 | nan | nan | nan | | | item_obs[user]_417 | 0.0809907 | 55.8453 | 0.00145027 | 0.998843 | | | item_obs[user]_418 | -0.0942727 | nan | nan | nan | | | item_obs[user]_419 | -0.0990881 | 36.3365 | -0.00272696 | 0.997824 | | | item_obs[user]_420 | -0.0832632 | 13.1282 | -0.00634233 | 0.99494 | | | item_obs[user]_421 | -0.0844952 | nan | nan | nan | | | item_obs[user]_422 | 0.0872249 | 30.0539 | 0.00290228 | 0.997684 | | | item_obs[user]_423 | -0.0682815 | 37.9265 | -0.00180036 | 0.998564 | | | item_obs[user]_424 | 0.0951386 | 31.3659 | 0.00303318 | 0.99758 | | | item_obs[user]_425 | -0.09675 | nan | nan | nan | | | item_obs[user]_426 | -0.0964502 | 13.2103 | -0.00730117 | 0.994175 | | | item_obs[user]_427 | -0.0984184 | 13.0909 | -0.00751807 | 0.994002 | | | item_obs[user]_428 | 0.0355085 | nan | nan | nan | | | item_obs[user]_429 | -0.0303457 | 71.8596 | -0.000422291 | 0.999663 | | | item_obs[user]_430 | -0.0989598 | nan | nan | nan | | | item_obs[user]_431 | -0.0950014 | 10.5138 | -0.00903586 | 0.992791 | | | item_obs[user]_432 | 0.059162 | 19.8895 | 0.00297454 | 0.997627 | | | item_obs[user]_433 | 0.099902 | 26.4907 | 0.00377121 | 0.996991 | | | item_obs[user]_434 | -0.0936469 | nan | nan | nan | | | item_obs[user]_435 | -0.0902371 | nan | nan | nan | | | item_obs[user]_436 | -0.0969874 | 19.8906 | -0.00487605 | 0.996109 | | | item_obs[user]_437 | -0.0932415 | nan | nan | nan | | | item_obs[user]_438 | 0.0925134 | nan | nan | nan | | | item_obs[user]_439 | -0.0956111 | nan | nan | nan | | | item_obs[user]_440 | 0.0624112 | nan | nan | nan | | | item_obs[user]_441 | 0.0909541 | 19.3149 | 0.00470901 | 0.996243 | | | item_obs[user]_442 | 0.0976485 | 5.79844 | 0.0168405 | 0.986564 | | | item_obs[user]_443 | 0.0999445 | nan | nan | nan | | | item_obs[user]_444 | 0.0954517 | 24.2489 | 0.00393633 | 0.996859 | | | item_obs[user]_445 | -0.0971528 | nan | nan | nan | | | item_obs[user]_446 | -0.0990373 | 5.69325 | -0.0173956 | 0.986121 | | | item_obs[user]_447 | -0.0932183 | 19.3147 | -0.00482627 | 0.996149 | | | item_obs[user]_448 | -0.0927753 | nan | nan | nan | | | item_obs[user]_449 | 0.0621279 | 30.3748 | 0.00204538 | 0.998368 | | | item_obs[user]_450 | -0.0809301 | nan | nan | nan | | | item_obs[user]_451 | 0.0994425 | 20.6135 | 0.00482413 | 0.996151 | | | item_obs[user]_452 | -0.00339906 | 44.1701 | -7.69537e-05 | 0.999939 | | | item_obs[user]_453 | 0.088211 | 19.9226 | 0.00442768 | 0.996467 | | | item_obs[user]_454 | 0.0713015 | nan | nan | nan | | | item_obs[user]_455 | -0.0759135 | nan | nan | nan | | | item_obs[user]_456 | 0.0990266 | 27.8852 | 0.00355122 | 0.997167 | | | item_obs[user]_457 | -0.0117378 | nan | nan | nan | | | item_obs[user]_458 | -0.0961448 | nan | nan | nan | | | item_obs[user]_459 | 0.0831571 | nan | nan | nan | | | item_obs[user]_460 | 0.0912292 | 51.1911 | 0.00178213 | 0.998578 | | | item_obs[user]_461 | -0.0786143 | nan | nan | nan | | | item_obs[user]_462 | 0.086667 | 23.4063 | 0.00370272 | 0.997046 | | | item_obs[user]_463 | -0.0937922 | nan | nan | nan | | | item_obs[user]_464 | 0.0816098 | nan | nan | nan | | | item_obs[user]_465 | -0.092377 | nan | nan | nan | | | item_obs[user]_466 | 0.0829483 | nan | nan | nan | | | item_obs[user]_467 | -0.0526504 | 60.7403 | -0.000866812 | 0.999308 | | | item_obs[user]_468 | 0.0834334 | nan | nan | nan | | | item_obs[user]_469 | -0.0878659 | nan | nan | nan | | | item_obs[user]_470 | 0.085108 | 11.3149 | 0.00752177 | 0.993999 | | | item_obs[user]_471 | -0.0813613 | nan | nan | nan | | | item_obs[user]_472 | -0.0868949 | 19.8092 | -0.00438659 | 0.9965 | | | item_obs[user]_473 | -0.0799593 | 20.2317 | -0.00395218 | 0.996847 | | | item_obs[user]_474 | 0.0792365 | 14.9123 | 0.0053135 | 0.99576 | | | item_obs[user]_475 | 0.0819139 | 9.91519 | 0.00826145 | 0.993408 | | | item_obs[user]_476 | 0.079369 | nan | nan | nan | | | item_obs[user]_477 | 0.0814347 | nan | nan | nan | | | item_obs[user]_478 | 0.0859619 | 10.2074 | 0.00842151 | 0.993281 | | | item_obs[user]_479 | -0.0847155 | nan | nan | nan | | | item_obs[user]_480 | 0.0825994 | 96.9404 | 0.000852064 | 0.99932 | | | item_obs[user]_481 | 0.0700469 | 12.9685 | 0.0054013 | 0.99569 | | | item_obs[user]_482 | 0.0979825 | nan | nan | nan | | | item_obs[user]_483 | 0.0822898 | 19.2019 | 0.00428551 | 0.996581 | | | item_obs[user]_484 | -0.0447001 | 34.3641 | -0.00130078 | 0.998962 | | | item_obs[user]_485 | -0.0377576 | 20.5678 | -0.00183576 | 0.998535 | | | item_obs[user]_486 | -0.096818 | 42.0827 | -0.00230066 | 0.998164 | | | item_obs[user]_487 | 0.0789985 | nan | nan | nan | | | item_obs[user]_488 | -0.0877571 | 17.5541 | -0.00499923 | 0.996011 | | | item_obs[user]_489 | 0.0851457 | nan | nan | nan | | | item_obs[user]_490 | 0.0856856 | 8.13371 | 0.0105346 | 0.991595 | | | item_obs[user]_491 | 0.0830748 | nan | nan | nan | | | item_obs[user]_492 | -0.0120651 | 75.8833 | -0.000158995 | 0.999873 | | | item_obs[user]_493 | -0.0706219 | nan | nan | nan | | | item_obs[user]_494 | 0.0812898 | nan | nan | nan | | | item_obs[user]_495 | 0.0884591 | 51.1858 | 0.0017282 | 0.998621 | | | item_obs[user]_496 | -0.000764623 | 17.3882 | -4.39738e-05 | 0.999965 | | | item_obs[user]_497 | -0.0763722 | nan | nan | nan | | | item_obs[user]_498 | -0.0622482 | 57.0773 | -0.00109059 | 0.99913 | | | item_obs[user]_499 | 0.0959818 | nan | nan | nan | | | item_obs[user]_500 | 0.0780311 | 13.5996 | 0.00573776 | 0.995422 | | | item_obs[user]_501 | 0.0965235 | nan | nan | nan | | | item_obs[user]_502 | -0.0960972 | nan | nan | nan | | | item_obs[user]_503 | 0.0890833 | nan | nan | nan | | | item_obs[user]_504 | -0.0988816 | 25.2671 | -0.00391345 | 0.996878 | | | item_obs[user]_505 | 0.0779958 | 43.1736 | 0.00180656 | 0.998559 | | | item_obs[user]_506 | -0.0838996 | nan | nan | nan | | | item_obs[user]_507 | -0.0823245 | nan | nan | nan | | | item_obs[user]_508 | -0.0856427 | nan | nan | nan | | | item_obs[user]_509 | 0.0850381 | 10.2073 | 0.00833112 | 0.993353 | | | item_obs[user]_510 | 0.0801802 | 15.8546 | 0.00505723 | 0.995965 | | | item_obs[user]_511 | 0.0894666 | nan | nan | nan | | | item_obs[user]_512 | 0.09686 | 11.4213 | 0.00848068 | 0.993233 | | | item_obs[user]_513 | -0.101392 | 112.293 | -0.000902922 | 0.99928 | | | item_obs[user]_514 | 0.101387 | 92.6231 | 0.00109462 | 0.999127 | | | item_obs[user]_515 | -0.0944149 | 11.5269 | -0.00819082 | 0.993465 | | | item_obs[user]_516 | -0.0550151 | nan | nan | nan | | | item_obs[user]_517 | -0.094628 | 24.6297 | -0.00384203 | 0.996935 | | | item_obs[user]_518 | 0.0907541 | 21.556 | 0.00421017 | 0.996641 | | | item_obs[user]_519 | -0.0512732 | nan | nan | nan | | | item_obs[user]_520 | -0.0961344 | 20.3319 | -0.00472827 | 0.996227 | | | item_obs[user]_521 | -0.046617 | nan | nan | nan | | | item_obs[user]_522 | 0.096604 | nan | nan | nan | | | item_obs[user]_523 | 0.0946415 | nan | nan | nan | | | item_obs[user]_524 | -0.0979703 | nan | nan | nan | | | item_obs[user]_525 | 0.101373 | 40.7102 | 0.00249012 | 0.998013 | | | item_obs[user]_526 | -0.09886 | nan | nan | nan | | | item_obs[user]_527 | 0.0971182 | 12.7973 | 0.00758894 | 0.993945 | | | item_obs[user]_528 | -0.10131 | nan | nan | nan | | | item_obs[user]_529 | 0.0974968 | nan | nan | nan | | | item_obs[user]_530 | 0.0966032 | nan | nan | nan | | | item_obs[user]_531 | -0.0222043 | nan | nan | nan | | | item_obs[user]_532 | -0.100382 | 28.1908 | -0.00356081 | 0.997159 | | | item_obs[user]_533 | 0.0988351 | 19.4841 | 0.00507261 | 0.995953 | | | item_obs[user]_534 | -0.0996468 | nan | nan | nan | | | item_obs[user]_535 | 0.0220482 | nan | nan | nan | | | item_obs[user]_536 | 0.0993891 | 27.55 | 0.00360759 | 0.997122 | | | item_obs[user]_537 | 0.101127 | nan | nan | nan | | | item_obs[user]_538 | 0.0659058 | nan | nan | nan | | | item_obs[user]_539 | -0.100557 | 53.8734 | -0.00186654 | 0.998511 | | | item_obs[user]_540 | -0.100945 | 27.2811 | -0.00370018 | 0.997048 | | | item_obs[user]_541 | -0.100976 | 6.00068 | -0.0168274 | 0.986574 | | | item_obs[user]_542 | -0.0994133 | 26.806 | -0.00370863 | 0.997041 | | | item_obs[user]_543 | 0.0998101 | 47.2879 | 0.00211069 | 0.998316 | | | item_obs[user]_544 | -0.100968 | nan | nan | nan | | | item_obs[user]_545 | 0.0904308 | 26.676 | 0.00338997 | 0.997295 | | | item_obs[user]_546 | -0.0977851 | nan | nan | nan | | | item_obs[user]_547 | -0.101204 | nan | nan | nan | | | item_obs[user]_548 | -0.091354 | nan | nan | nan | | | item_obs[user]_549 | -0.0920535 | nan | nan | nan | | | item_obs[user]_550 | 0.0936059 | nan | nan | nan | | | item_obs[user]_551 | -0.00462256 | nan | nan | nan | | | item_obs[user]_552 | 0.0985385 | nan | nan | nan | | | item_obs[user]_553 | -0.0995969 | 86.588 | -0.00115024 | 0.999082 | | | item_obs[user]_554 | -0.0993786 | nan | nan | nan | | | item_obs[user]_555 | -0.100863 | 21.6456 | -0.00465977 | 0.996282 | | | item_obs[user]_556 | 0.0455634 | nan | nan | nan | | | item_obs[user]_557 | -0.0602423 | 90.3012 | -0.000667126 | 0.999468 | | | item_obs[user]_558 | -0.100872 | nan | nan | nan | | | item_obs[user]_559 | -0.098416 | nan | nan | nan | | | item_obs[user]_560 | 0.0946484 | nan | nan | nan | | | item_obs[user]_561 | 0.101381 | nan | nan | nan | | | item_obs[user]_562 | -0.0972952 | 34.1918 | -0.00284557 | 0.99773 | | | item_obs[user]_563 | -0.0954583 | nan | nan | nan | | | item_obs[user]_564 | -0.0615614 | 23.7913 | -0.00258756 | 0.997935 | | | item_obs[user]_565 | -0.0972221 | nan | nan | nan | | | item_obs[user]_566 | 0.0968082 | nan | nan | nan | | | item_obs[user]_567 | -0.0986948 | nan | nan | nan | | | item_obs[user]_568 | 0.0729944 | 16.1102 | 0.00453095 | 0.996385 | | | item_obs[user]_569 | 0.0956325 | 75.9917 | 0.00125846 | 0.998996 | | | item_obs[user]_570 | 0.100028 | 18.0383 | 0.00554533 | 0.995575 | | | item_obs[user]_571 | 0.101555 | nan | nan | nan | | | item_obs[user]_572 | 0.0990644 | 66.289 | 0.00149443 | 0.998808 | | | item_obs[user]_573 | -0.0996809 | 16.4579 | -0.00605673 | 0.995167 | | | item_obs[user]_574 | -0.100842 | nan | nan | nan | | | item_obs[user]_575 | -0.0973879 | 14.9075 | -0.00653282 | 0.994788 | | | item_obs[user]_576 | -0.100981 | 207.749 | -0.000486071 | 0.999612 | | | item_obs[user]_577 | 0.0736564 | nan | nan | nan | | | item_obs[user]_578 | 0.0971491 | nan | nan | nan | | | item_obs[user]_579 | 0.100339 | 9.64719 | 0.0104009 | 0.991701 | | | item_obs[user]_580 | -0.0286677 | nan | nan | nan | | | item_obs[user]_581 | -0.0804997 | 10.7311 | -0.00750155 | 0.994015 | | | item_obs[user]_582 | -0.0941832 | nan | nan | nan | | | item_obs[user]_583 | 0.0954553 | nan | nan | nan | | | item_obs[user]_584 | 0.0969549 | 7.95363 | 0.01219 | 0.990274 | | | item_obs[user]_585 | -0.0316282 | 6.77455 | -0.00466867 | 0.996275 | | | item_obs[user]_586 | -0.0978867 | nan | nan | nan | | | item_obs[user]_587 | -0.0880501 | nan | nan | nan | | | item_obs[user]_588 | 0.0954066 | 38.8982 | 0.00245273 | 0.998043 | | | item_obs[user]_589 | -0.0273292 | 18.6961 | -0.00146176 | 0.998834 | | | item_obs[user]_590 | -0.0663264 | 25.0619 | -0.0026465 | 0.997888 | | | item_obs[user]_591 | -0.0978446 | 13.0446 | -0.0075008 | 0.994015 | | | item_obs[user]_592 | -0.094629 | nan | nan | nan | | | item_obs[user]_593 | -0.0973843 | nan | nan | nan | | | item_obs[user]_594 | -0.08807 | 12.54 | -0.00702312 | 0.994396 | | | item_obs[user]_595 | 0.000126938 | nan | nan | nan | | | item_obs[user]_596 | -0.0937052 | 7.72741 | -0.0121263 | 0.990325 | | | item_obs[user]_597 | -0.093032 | 52.6126 | -0.00176825 | 0.998589 | | | item_obs[user]_598 | 0.087314 | 4.23278 | 0.020628 | 0.983542 | | | item_obs[user]_599 | 0.0906963 | 12.3998 | 0.00731431 | 0.994164 | | | item_obs[user]_600 | -0.0879108 | nan | nan | nan | | | item_obs[user]_601 | -0.0428856 | nan | nan | nan | | | item_obs[user]_602 | -0.0921108 | nan | nan | nan | | | item_obs[user]_603 | 0.073359 | 52.1726 | 0.00140608 | 0.998878 | | | item_obs[user]_604 | 0.0728731 | 7.48711 | 0.00973315 | 0.992234 | | | item_obs[user]_605 | -0.0972289 | 25.1176 | -0.00387094 | 0.996911 | | | item_obs[user]_606 | 0.089037 | 19.2986 | 0.00461366 | 0.996319 | | | item_obs[user]_607 | 0.0868189 | 78.4711 | 0.00110638 | 0.999117 | | | item_obs[user]_608 | -0.0923796 | 5.70752 | -0.0161856 | 0.987086 | | | item_obs[user]_609 | -0.0946419 | nan | nan | nan | | | item_obs[user]_610 | 0.0921649 | 7.65234 | 0.012044 | 0.990391 | | | item_obs[user]_611 | -0.0922693 | nan | nan | nan | | | item_obs[user]_612 | 0.0979111 | nan | nan | nan | | | item_obs[user]_613 | 0.0979093 | nan | nan | nan | | | item_obs[user]_614 | -0.100505 | nan | nan | nan | | | item_obs[user]_615 | -0.0935866 | nan | nan | nan | | | item_obs[user]_616 | -0.101036 | 11.2001 | -0.00902098 | 0.992802 | | | item_obs[user]_617 | -0.0834687 | 16.6885 | -0.00500157 | 0.996009 | | | item_obs[user]_618 | -0.0551828 | nan | nan | nan | | | item_obs[user]_619 | -0.0905586 | nan | nan | nan | | | item_obs[user]_620 | -0.0637796 | nan | nan | nan | | | item_obs[user]_621 | 0.0985965 | 56.6959 | 0.00173904 | 0.998612 | | | item_obs[user]_622 | 0.0359899 | nan | nan | nan | | | item_obs[user]_623 | 0.0991734 | nan | nan | nan | | | item_obs[user]_624 | -0.0697729 | 25.4716 | -0.00273925 | 0.997814 | | | item_obs[user]_625 | -0.0617766 | 24.8065 | -0.00249034 | 0.998013 | | | item_obs[user]_626 | 0.0910757 | 27.072 | 0.0033642 | 0.997316 | | | item_obs[user]_627 | 0.101418 | 58.0109 | 0.00174825 | 0.998605 | | | item_obs[user]_628 | -0.0961346 | nan | nan | nan | | | item_obs[user]_629 | 0.094964 | 7.48973 | 0.0126792 | 0.989884 | | | item_obs[user]_630 | -0.0970363 | nan | nan | nan | | | item_obs[user]_631 | 0.0919417 | nan | nan | nan | | | item_obs[user]_632 | 0.0605234 | 18.7139 | 0.00323414 | 0.99742 | | | item_obs[user]_633 | -0.0904889 | 44.1136 | -0.00205127 | 0.998363 | | | item_obs[user]_634 | -0.0814091 | nan | nan | nan | | | item_obs[user]_635 | 0.0901025 | 40.7631 | 0.00221039 | 0.998236 | | | item_obs[user]_636 | 0.0846401 | nan | nan | nan | | | item_obs[user]_637 | 0.0866962 | 20.7103 | 0.00418613 | 0.99666 | | | item_obs[user]_638 | 0.0730155 | nan | nan | nan | | | item_obs[user]_639 | -0.0374388 | 76.4471 | -0.000489735 | 0.999609 | | | useritem_obs[constant]_0 | -2.19513 | nan | nan | nan | | | useritem_obs[constant]_1 | -0.0450221 | 5.51083 | -0.00816975 | 0.993482 | | | useritem_obs[constant]_2 | 0.335328 | nan | nan | nan | | | useritem_obs[constant]_3 | 0.222887 | 8.65038 | 0.0257662 | 0.979444 | | | useritem_obs[constant]_4 | 0.749399 | nan | nan | nan | | | useritem_obs[constant]_5 | 0.113332 | nan | nan | nan | | | useritem_obs[constant]_6 | -0.19438 | nan | nan | nan | | | useritem_obs[constant]_7 | -0.608253 | nan | nan | nan | | | useritem_obs[constant]_8 | -0.938155 | 4.00518 | -0.234236 | 0.814802 | | | useritem_obs[constant]_9 | 0.442151 | nan | nan | nan | | | useritem_obs[constant]_10 | 0.941669 | nan | nan | nan | | | useritem_obs[constant]_11 | 0.92923 | 12.0349 | 0.0772115 | 0.938455 | | | useritem_obs[constant]_12 | -1.79719 | 14.5266 | -0.123717 | 0.901539 | | | useritem_obs[constant]_13 | -2.44433 | nan | nan | nan | | | useritem_obs[constant]_14 | -1.80492 | 1.72967 | -1.04351 | 0.296713 | | | useritem_obs[constant]_15 | 0.294402 | 10.9838 | 0.0268033 | 0.978617 | | | useritem_obs[constant]_16 | 0.325979 | nan | nan | nan | | | useritem_obs[constant]_17 | -0.927703 | 14.3181 | -0.0647922 | 0.948339 | | | useritem_obs[constant]_18 | 0.644161 | 4.20224 | 0.15329 | 0.87817 | | | useritem_obs[constant]_19 | 0.566723 | nan | nan | nan | | | useritem_obs[constant]_20 | -0.0449253 | nan | nan | nan | | | useritem_obs[constant]_21 | 0.515094 | 15.1087 | 0.0340925 | 0.972803 | | | useritem_obs[constant]_22 | -0.73947 | 7.51922 | -0.0983439 | 0.921659 | | | useritem_obs[constant]_23 | 1.77285 | 6.26404 | 0.283019 | 0.777162 | | | useritem_obs[constant]_24 | 1.48855 | 13.3312 | 0.111659 | 0.911094 | | | useritem_obs[constant]_25 | -0.589749 | nan | nan | nan | | | useritem_obs[constant]_26 | -0.189601 | nan | nan | nan | | | useritem_obs[constant]_27 | -1.58579 | 22.8557 | -0.0693824 | 0.944685 | | | useritem_obs[constant]_28 | 1.63166 | nan | nan | nan | | | useritem_obs[constant]_29 | 0.834129 | nan | nan | nan | | | useritem_obs[constant]_30 | 0.245165 | 14.8609 | 0.0164973 | 0.986838 | | | useritem_obs[constant]_31 | -1.21305 | 13.5542 | -0.0894957 | 0.928688 | | | session_obs[item]_0 | 0.068609 | 0.0575214 | 1.19276 | 0.232965 | | | session_obs[item]_1 | 0.0943611 | 0.0569426 | 1.65713 | 0.0974938 | | | session_obs[item]_2 | 0.10083 | 0.0597371 | 1.68789 | 0.0914315 | | | session_obs[item]_3 | -0.0830204 | 0.0582709 | -1.42473 | 0.154235 | | | session_obs[item]_4 | -0.0681213 | 0.0617401 | -1.10336 | 0.269873 | | | session_obs[item]_5 | -0.0285107 | 0.0595629 | -0.478665 | 0.632177 | | | session_obs[item]_6 | -0.0703343 | 0.0618407 | -1.13735 | 0.255393 | | | session_obs[item]_7 | -0.091474 | 0.0561316 | -1.62964 | 0.103178 | | | session_obs[item]_8 | -0.00161236 | 0.0584364 | -0.0275917 | 0.977988 | | | session_obs[item]_9 | -0.101113 | 0.0557252 | -1.8145 | 0.0696007 | | | session_obs[item]_10 | 0.0998974 | 0.059756 | 1.67176 | 0.0945726 | | | session_obs[item]_11 | 0.0992974 | 0.0580802 | 1.70966 | 0.0873287 | | | session_obs[item]_12 | 0.0687278 | 0.0615169 | 1.11722 | 0.263901 | | | session_obs[item]_13 | 0.0993844 | 0.0609478 | 1.63065 | 0.102964 | | | session_obs[item]_14 | 0.0950583 | 0.0647747 | 1.46752 | 0.142234 | | | session_obs[item]_15 | -0.0906975 | 0.0621541 | -1.45924 | 0.1445 | | | session_obs[item]_16 | 0.100648 | 0.0630845 | 1.59544 | 0.110613 | | | session_obs[item]_17 | 0.0970964 | 0.0571602 | 1.69867 | 0.0893813 | | | session_obs[item]_18 | -0.0139554 | 0.0603362 | -0.231293 | 0.817087 | | | session_obs[item]_19 | 0.099739 | 0.0575703 | 1.73247 | 0.0831891 | | | session_obs[item]_20 | -0.0737882 | 0.0598032 | -1.23385 | 0.217258 | | | session_obs[item]_21 | -0.0996387 | 0.0595788 | -1.67238 | 0.0944485 | | | session_obs[item]_22 | -0.0899075 | 0.0595985 | -1.50855 | 0.131413 | | | session_obs[item]_23 | 0.0723293 | 0.0592888 | 1.21995 | 0.222484 | | | session_obs[item]_24 | -0.0981705 | 0.0633841 | -1.54882 | 0.121425 | | | session_obs[item]_25 | 0.0222866 | 0.0617213 | 0.361084 | 0.718037 | | | session_obs[item]_26 | 0.0727327 | 0.064012 | 1.13624 | 0.255858 | | | session_obs[item]_27 | 0.0981871 | 0.0596296 | 1.64662 | 0.0996369 | | | session_obs[item]_28 | -0.0962339 | 0.061448 | -1.5661 | 0.117324 | | | session_obs[item]_29 | -0.0938598 | 0.0576089 | -1.62926 | 0.103259 | | | price_obs[constant]_0 | -1.3209 | 0.032758 | -40.3231 | 0 | *** | | price_obs[constant]_1 | -0.0466729 | 0.024418 | -1.91141 | 0.0559515 | | | price_obs[constant]_2 | 1.6281 | 0.0371453 | 43.8305 | 0 | *** | | price_obs[constant]_3 | 0.328977 | 0.0241234 | 13.6373 | 0 | *** | | price_obs[constant]_4 | -0.437104 | 0.0250135 | -17.4747 | 0 | *** | | price_obs[constant]_5 | 0.3052 | 0.0235386 | 12.9659 | 0 | *** | | price_obs[constant]_6 | 1.03763 | 0.0299154 | 34.6855 | 0 | *** | | price_obs[constant]_7 | 1.00561 | 0.0297657 | 33.784 | 0 | *** | | price_obs[constant]_8 | -0.507221 | 0.0256846 | -19.748 | 0 | *** | | price_obs[constant]_9 | 0.215656 | 0.0228565 | 9.43519 | 0 | *** | | price_obs[constant]_10 | -1.17904 | 0.0317257 | -37.1636 | 0 | *** | | price_obs[constant]_11 | 0.871396 | 0.0287952 | 30.2619 | 0 | *** | | usersessionitem_obs[constant]_0 | -0.0973257 | 0.0230575 | -4.221 | 2.43223e-05 | *** | | usersessionitem_obs[constant]_1 | -1.25702 | 0.0319555 | -39.3367 | 0 | *** | | usersessionitem_obs[constant]_2 | 1.17756 | 0.03094 | 38.0595 | 0 | *** | | usersessionitem_obs[constant]_3 | -0.6465 | 0.0256232 | -25.231 | 0 | *** | | usersessionitem_obs[constant]_4 | 0.203393 | 0.023352 | 8.70989 | 0 | *** | | usersessionitem_obs[constant]_5 | -0.314032 | 0.0235116 | -13.3565 | 0 | *** | | usersessionitem_obs[constant]_6 | -0.427146 | 0.0243446 | -17.5458 | 0 | *** | | usersessionitem_obs[constant]_7 | -1.22026 | 0.0317813 | -38.3956 | 0 | *** | | usersessionitem_obs[constant]_8 | -0.356615 | 0.0239962 | -14.8613 | 0 | *** | | usersessionitem_obs[constant]_9 | -1.5531 | 0.0353216 | -43.9703 | 0 | *** | | usersessionitem_obs[constant]_10 | -0.994266 | 0.0288841 | -34.4226 | 0 | *** | | usersessionitem_obs[constant]_11 | 1.0114 | 0.0291006 | 34.7554 | 0 | *** | | usersessionitem_obs[constant]_12 | 1.65349 | 0.0375474 | 44.0373 | 0 | *** | | usersessionitem_obs[constant]_13 | -0.331221 | 0.0243139 | -13.6227 | 0 | *** | | usersessionitem_obs[constant]_14 | 2.49692 | 0.0490014 | 50.9562 | 0 | *** | | usersessionitem_obs[constant]_15 | 0.121984 | 0.0237004 | 5.14692 | 2.64804e-07 | *** | | intercept[item]_0 | 0.0222749 | 8.51919 | 0.00261468 | 0.997914 | | | intercept[item]_1 | -0.0889155 | 13.2526 | -0.0067093 | 0.994647 | | | intercept[item]_2 | -0.0932965 | nan | nan | nan | | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 Time taken: 12.200577974319458","title":"Build a CLM Model"},{"location":"api_torch_choice/","text":"API Reference: Torch Choice Bases: torch . utils . data . Dataset Source code in torch_choice/data/choice_dataset.pyclass ChoiceDataset ( torch . utils . data . Dataset ): def __init__ ( self , item_index : torch . LongTensor , num_items : int = None , num_users : int = None , label : Optional [ torch . LongTensor ] = None , user_index : Optional [ torch . LongTensor ] = None , session_index : Optional [ torch . LongTensor ] = None , item_availability : Optional [ torch . BoolTensor ] = None , ** kwargs ) -> None : \"\"\" Initialization methods for the dataset object, researchers should supply all information about the dataset using this initialization method. The number of choice instances are called `batch_size` in the documentation. The `batch_size` corresponds to the file length in wide-format dataset, and often denoted using `N`. We call it `batch_size` to follow the convention in machine learning literature. A `choice instance` is a row of the dataset, so there are `batch_size` choice instances in each `ChoiceDataset`. The dataset consists of: (1) a collection of `batch_size` tuples (item_id, user_id, session_id, label), where each tuple is a choice instance. (2) a collection of `observables` associated with item, user, session, etc. Args: item_index (torch.LongTensor): a tensor of shape (batch_size) indicating the relevant item in each row of the dataset, the relevant item can be: (1) the item bought in this choice instance, (2) or the item reviewed by the user. In the later case, we need the `label` tensor to specify the rating score. NOTE: The support for second case is under-development, currently, we are only supporting binary label. num_items (Optional[int]): the number of items in the dataset. If `None` is provided (default), the number of items will be inferred from the number of unique numbers in `item_index`. num_users (Optional[int]): the number of users in the dataset. If `None` is provided (default), the number of users will be inferred from the number of unique numbers in `user_index`. label (Optional[torch.LongTensor], optional): a tensor of shape (batch_size) indicating the label for prediction in each choice instance. While you want to predict the item bought, you can leave the `label` argument as `None` in the initialization method, and the model will use `item_index` as the object to be predicted. But if you are, for example, predicting the rating an user gave an item, label must be provided. Defaults to None. user_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the user who was involved in each choice instance. If `None` user index is provided, it's assumed that the choice instances are from the same user. `user_index` is required if and only if there are multiple users in the dataset, for example: (1) user-observables is involved in the utility form, (2) and/or the coefficient is user-specific. This tensor is used to select the corresponding user observables and coefficients assigned to the user (like theta_user) for making prediction for that purchase. Defaults to None. session_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the session when that choice instance occurred. This tensor is used to select the correct session observables or price observables for making prediction for that choice instance. Therefore, if there is no session/price observables, you can leave this argument as `None`. In this case, the `ChoiceDataset` object will assume each choice instance to be in its own session. Defaults to None. item_availability (Optional[torch.BoolTensor], optional): A boolean tensor of shape (num_sessions, num_items) indicating the availability of each item in each session. Utilities of unavailable items would be set to -infinite, and hence these unavailable items will be set to 0 while making prediction. We assume all items are available if set to None. Defaults to None. Other Kwargs (Observables): One can specify the following types of observables, where * in shape denotes any positive integer. Typically * represents the number of observables. Please refer to the documentation for a detailed guide to use observables. 1. user observables must start with 'user_' and have shape (num_users, *) 2. item observables must start with 'item_' and have shape (num_items, *) 3. session observables must start with 'session_' and have shape (num_sessions, *) 4. taste observables (those vary by user and item) must start with `taste_` and have shape (num_users, num_items, *). NOTE: we don't recommend using taste observables, because num_users * num_items is potentially large. 5. price observables (those vary by session and item) must start with `price_` and have shape (num_sessions, num_items, *) 6. itemsession observables starting with `itemsession_`, this is a more intuitive alias to the price observable. \"\"\" # ENHANCEMENT(Tianyu): add item_names for summary. super ( ChoiceDataset , self ) . __init__ () self . label = label self . item_index = item_index self . _num_items = num_items self . _num_users = num_users self . user_index = user_index self . session_index = session_index if self . session_index is None : # if any([x.startswith('session_') or x.startswith('price_') for x in kwargs.keys()]): # if any session sensitive observable is provided, but session index is not, # infer each row in the dataset to be a session. # TODO: (design choice) should we assign unique session index to each choice instance or the same session index. print ( 'No `session_index` is provided, assume each choice instance is in its own session.' ) self . session_index = torch . arange ( len ( self . item_index )) . long () self . item_availability = item_availability for key , item in kwargs . items (): if self . _is_attribute ( key ): # all observable should be float. item = item . float () setattr ( self , key , item ) # TODO: add a validation procedure to check the consistency of the dataset. def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> \"ChoiceDataset\" : \"\"\"Retrieves samples corresponding to the provided index or list of indices. Args: indices (Union[int, torch.LongTensor]): a single integer index or a tensor of indices. Returns: ChoiceDataset: a subset of the dataset. \"\"\" if isinstance ( indices , int ): # convert single integer index to an array of indices. indices = torch . LongTensor ([ indices ]) new_dict = dict () new_dict [ 'item_index' ] = self . item_index [ indices ] . clone () # copy optional attributes. new_dict [ 'label' ] = self . label [ indices ] . clone () if self . label is not None else None new_dict [ 'user_index' ] = self . user_index [ indices ] . clone () if self . user_index is not None else None new_dict [ 'session_index' ] = self . session_index [ indices ] . clone () if self . session_index is not None else None # item_availability has shape (num_sessions, num_items), no need to re-index it. new_dict [ 'item_availability' ] = self . item_availability # copy other attributes. for key , val in self . __dict__ . items (): if key not in new_dict . keys (): if torch . is_tensor ( val ): new_dict [ key ] = val . clone () else : new_dict [ key ] = copy . deepcopy ( val ) return self . _from_dict ( new_dict ) def __len__ ( self ) -> int : \"\"\"Returns number of samples in this dataset. Returns: int: length of the dataset. \"\"\" return len ( self . item_index ) def __contains__ ( self , key : str ) -> bool : return key in self . keys def __eq__ ( self , other : \"ChoiceDataset\" ) -> bool : \"\"\"Returns whether all tensor attributes of both ChoiceDatasets are equal.\"\"\" if not isinstance ( other , ChoiceDataset ): raise TypeError ( 'You can only compare with ChoiceDataset objects.' ) else : flag = True for key , val in self . __dict__ . items (): if torch . is_tensor ( val ): # ignore NaNs while comparing. if not torch . equal ( torch . nan_to_num ( val ), torch . nan_to_num ( other . __dict__ [ key ])): print ( 'Attribute {} is not equal.' . format ( key )) flag = False return flag @property def device ( self ) -> str : \"\"\"Returns the device of the dataset. Returns: str: the device of the dataset. \"\"\" for attr in self . __dict__ . values (): if torch . is_tensor ( attr ): return attr . device @property def num_users ( self ) -> int : \"\"\"Returns number of users involved in this dataset, returns 1 if there is no user identity. Returns: int: the number of users involved in this dataset. \"\"\" if self . _num_users is not None : return self . _num_users elif self . user_index is not None : # infer from the number of unique items in user_index. return len ( torch . unique ( self . user_index )) else : return 1 # for key, val in self.__dict__.items(): # if torch.is_tensor(val): # if self._is_user_attribute(key) or self._is_taste_attribute(key): # return val.shape[0] # return 1 @property def num_items ( self ) -> int : \"\"\"Returns the number of items involved in this dataset. Returns: int: the number of items involved in this dataset. \"\"\" if self . _num_items is not None : # return the _num_items provided in the constructor. return self . _num_items else : # infer the number of items from item_index. return len ( torch . unique ( self . item_index )) # for key, val in self.__dict__.items(): # if torch.is_tensor(val): # if self._is_item_attribute(key): # return val.shape[0] # elif self._is_taste_attribute(key) or self._is_price_attribute(key): # return val.shape[1] # return 1 @property def num_sessions ( self ) -> int : \"\"\"Returns the number of sessions involved in this dataset. Returns: int: the number of sessions involved in this dataset. \"\"\" return len ( torch . unique ( self . session_index )) # if self.session_index is None: # return 1 # for key, val in self.__dict__.items(): # if torch.is_tensor(val): # if self._is_session_attribute(key) or self._is_price_attribute(key): # return val.shape[0] # return 1 @property def x_dict ( self ) -> Dict [ object , torch . Tensor ]: \"\"\"Formats attributes of in this dataset into shape (num_sessions, num_items, num_params) and returns in a dictionary format. Models in this package are expecting this dictionary based data format. Returns: Dict[object, torch.Tensor]: a dictionary with attribute names in the dataset as keys, and reshaped attribute tensors as values. \"\"\" out = dict () for key , val in self . __dict__ . items (): if self . _is_attribute ( key ): # only include attributes. out [ key ] = self . _expand_tensor ( key , val ) # reshape to (num_sessions, num_items, num_params). return out @classmethod def _from_dict ( cls , dictionary : Dict [ str , torch . tensor ]) -> \"ChoiceDataset\" : \"\"\"Creates an instance of ChoiceDataset from a dictionary of arguments. Args: dictionary (Dict[str, torch.tensor]): a dictionary with keys as argument names and values as arguments. Returns: ChoiceDataset: the created copy of dataset. \"\"\" dataset = cls ( ** dictionary ) for key , item in dictionary . items (): setattr ( dataset , key , item ) return dataset def apply_tensor ( self , func : callable ) -> \"ChoiceDataset\" : \"\"\"This s a helper method to apply the provided function to all tensors and tensor values of all dictionaries. Args: func (callable): a callable function to be applied on tensors and tensor-values of dictionaries. Returns: ChoiceDataset: the modified dataset. \"\"\" for key , item in self . __dict__ . items (): if torch . is_tensor ( item ): setattr ( self , key , func ( item )) # boardcast func to dictionary of tensors as well. elif isinstance ( getattr ( self , key ), dict ): for obj_key , obj_item in getattr ( self , key ) . items (): if torch . is_tensor ( obj_item ): setattr ( getattr ( self , key ), obj_key , func ( obj_item )) return self def to ( self , device : Union [ str , torch . device ]) -> \"ChoiceDataset\" : \"\"\"Moves all tensors in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" return self . apply_tensor ( lambda x : x . to ( device )) def clone ( self ) -> \"ChoiceDataset\" : \"\"\"Creates a copy of self. Returns: ChoiceDataset: a copy of self. \"\"\" dictionary = {} for k , v in self . __dict__ . items (): if torch . is_tensor ( v ): dictionary [ k ] = v . clone () else : dictionary [ k ] = copy . deepcopy ( v ) return self . __class__ . _from_dict ( dictionary ) def _check_device_consistency ( self ) -> None : \"\"\"Checks if all tensors in this dataset are on the same device. Raises: Exception: an exception is raised if not all tensors are on the same device. \"\"\" # assert all tensors are on the same device. devices = list () for val in self . __dict__ . values (): if torch . is_tensor ( val ): devices . append ( val . device ) if len ( set ( devices )) > 1 : raise Exception ( f 'Found tensors on different devices: { set ( devices ) } .' , 'Use dataset.to() method to align devices.' ) def _size_repr ( self , value : object ) -> List [ int ]: \"\"\"A helper method to get the string-representation of object sizes, this is helpful while constructing the string representation of the dataset. Args: value (object): an object to examine its size. Returns: List[int]: list of integers representing the size of the object, length of the list is equal to dimension of `value`. \"\"\" if torch . is_tensor ( value ): return list ( value . size ()) elif isinstance ( value , int ) or isinstance ( value , float ): return [ 1 ] elif isinstance ( value , list ) or isinstance ( value , tuple ): return [ len ( value )] else : return [] def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" # don't print shapes of internal attributes like _num_users and _num_items. info = [ f ' { key } = { self . _size_repr ( item ) } ' for key , item in self . __dict__ . items () if not key . startswith ( '_' )] return f \" { self . __class__ . __name__ } ( { ', ' . join ( info ) } , device= { self . device } )\" # ================================================================================================================== # methods for checking attribute categories. # ================================================================================================================== @staticmethod def _is_item_attribute ( key : str ) -> bool : return key . startswith ( 'item_' ) and ( key != 'item_availability' ) and ( key != 'item_index' ) @staticmethod def _is_user_attribute ( key : str ) -> bool : return key . startswith ( 'user_' ) and ( key != 'user_index' ) @staticmethod def _is_useritem_attribute ( key : str ) -> bool : return key . startswith ( 'useritem_' ) @staticmethod def _is_session_attribute ( key : str ) -> bool : return key . startswith ( 'session_' ) and ( key != 'session_index' ) @staticmethod def _is_price_attribute ( key : str ) -> bool : return key . startswith ( 'price_' ) or key . startswith ( 'itemsession_' ) @staticmethod def _is_usersessionitem_attribute ( key : str ) -> bool : return key . startswith ( 'usersessionitem_' ) def _is_attribute ( self , key : str ) -> bool : return self . _is_item_attribute ( key ) \\ or self . _is_user_attribute ( key ) \\ or self . _is_useritem_attribute ( key ) \\ or self . _is_session_attribute ( key ) \\ or self . _is_price_attribute ( key ) \\ or self . _is_usersessionitem_attribute ( key ) def _expand_tensor ( self , key : str , val : torch . Tensor ) -> torch . Tensor : \"\"\"Expands attribute tensor to (len(self), num_items, num_params) shape for prediction tasks, this method won't reshape the tensor at all if the `key` (i.e., name of the tensor) suggests its not an attribute of any kind. Args: key (str): name of the attribute used to determine the raw shape of the tensor. For example, 'item_obs' means the raw tensor is in shape (num_items, num_params). val (torch.Tensor): the attribute tensor to be reshaped. Returns: torch.Tensor: the reshaped tensor with shape (num_sessions, num_items, num_params). \"\"\" if not self . _is_attribute ( key ): # this is a sanity check. raise ValueError ( f 'Warning: the input key { key } is not an attribute of the dataset, will NOT modify the provided tensor.' ) num_params = val . shape [ - 1 ] # the number of parameters/coefficients/observables. # convert attribute tensors to (len(self), num_items, num_params) shape. if self . _is_user_attribute ( key ): # user_attribute (num_users, *) out = val [ self . user_index , :] . view ( len ( self ), 1 , num_params ) . expand ( - 1 , self . num_items , - 1 ) elif self . _is_item_attribute ( key ): # item_attribute (num_items, *) out = val . view ( 1 , self . num_items , num_params ) . expand ( len ( self ), - 1 , - 1 ) elif self . _is_useritem_attribute ( key ): # useritem_attribute (num_users, num_items, *) out = val [ self . user_index , :, :] elif self . _is_session_attribute ( key ): # session_attribute (num_sessions, *) out = val [ self . session_index , :] . view ( len ( self ), 1 , num_params ) . expand ( - 1 , self . num_items , - 1 ) # elif self._is_taste_attribute(key): # # taste_attribute (num_users, num_items, *) # out = val[self.user_index, :, :] elif self . _is_price_attribute ( key ): # price_attribute (num_sessions, num_items, *) out = val [ self . session_index , :, :] elif self . _is_usersessionitem_attribute ( key ): # usersessionitem_attribute has shape (num_users, num_sessions, num_items, *) out = val [ self . user_index , self . session_index , :, :] # (len(self), num_items, *) else : raise ValueError ( f 'Warning: the input key { key } is not an attribute of the dataset, will NOT modify the provided tensor.' ) assert out . shape == ( len ( self ), self . num_items , num_params ) return out @staticmethod def unique ( tensor : torch . Tensor ) -> Tuple [ np . ndarray ]: arr = tensor . cpu () . numpy () unique , counts = np . unique ( arr , return_counts = True ) count_sort_ind = np . argsort ( - counts ) unique = unique [ count_sort_ind ] counts = counts [ count_sort_ind ] return unique , counts def summary ( self ) -> None : \"\"\"A method to summarize the dataset. Returns: str: the string representation of the dataset. \"\"\" summary = [ 'ChoiceDataset with {} sessions, {} items, {} users, {} purchase records (observations) .' . format ( self . num_sessions , self . num_items , self . num_users if self . user_index is not None else 'single' , len ( self ))] # summarize users. if self . user_index is not None : unique , counts = self . unique ( self . user_index ) summary . append ( f \"The most frequent user is { unique [ 0 ] } with { counts [ 0 ] } observations; the least frequent user is { unique [ - 1 ] } with { counts [ - 1 ] } observations; on average, there are { counts . astype ( float ) . mean () : .2f } observations per user.\" ) N = len ( unique ) K = min ( 5 , N ) string = f ' { K } most frequent users are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent users are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) # summarize items. unique , counts = self . unique ( self . item_index ) N = len ( unique ) K = min ( 5 , N ) summary . append ( f \"The most frequent item is { unique [ 0 ] } , it was chosen { counts [ 0 ] } times; the least frequent item is { unique [ - 1 ] } it was { counts [ - 1 ] } times; on average, each item was purchased { counts . astype ( float ) . mean () : .2f } times.\" ) string = f ' { K } most frequent items are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent items are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) summary . append ( 'Attribute Summaries:' ) for key , item in self . __dict__ . items (): if self . _is_attribute ( key ) and torch . is_tensor ( item ): summary . append ( \"Observable Tensor ' {} ' with shape {} \" . format ( key , item . shape )) # price attributes are 3-dimensional tensors, ignore for cleanness here. if ( not self . _is_price_attribute ( key )) and ( not self . _is_usersessionitem_attribute ( key )) and ( not self . _is_useritem_attribute ( key )): summary . append ( str ( pd . DataFrame ( item . to ( 'cpu' ) . float () . numpy ()) . describe ())) print ( ' \\n ' . join ( summary ) + f \" \\n device= { self . device } \" ) return None device : str property Returns the device of the dataset. Returns: Name Type Description str str the device of the dataset. num_items : int property Returns the number of items involved in this dataset. Returns: Name Type Description int int the number of items involved in this dataset. num_sessions : int property Returns the number of sessions involved in this dataset. Returns: Name Type Description int int the number of sessions involved in this dataset. num_users : int property Returns number of users involved in this dataset, returns 1 if there is no user identity. Returns: Name Type Description int int the number of users involved in this dataset. x_dict : Dict [ object , torch . Tensor ] property Formats attributes of in this dataset into shape (num_sessions, num_items, num_params) and returns in a dictionary format. Models in this package are expecting this dictionary based data format. Returns: Type Description Dict [ object , torch . Tensor ] Dict[object, torch.Tensor]: a dictionary with attribute names in the dataset as keys, and reshaped attribute tensors as values. __eq__ ( other ) Returns whether all tensor attributes of both ChoiceDatasets are equal. Source code in torch_choice/data/choice_dataset.py 164 165 166 167 168 169 170 171 172 173 174 175 176 def __eq__ ( self , other : \"ChoiceDataset\" ) -> bool : \"\"\"Returns whether all tensor attributes of both ChoiceDatasets are equal.\"\"\" if not isinstance ( other , ChoiceDataset ): raise TypeError ( 'You can only compare with ChoiceDataset objects.' ) else : flag = True for key , val in self . __dict__ . items (): if torch . is_tensor ( val ): # ignore NaNs while comparing. if not torch . equal ( torch . nan_to_num ( val ), torch . nan_to_num ( other . __dict__ [ key ])): print ( 'Attribute {} is not equal.' . format ( key )) flag = False return flag __getitem__ ( indices ) Retrieves samples corresponding to the provided index or list of indices. Parameters: Name Type Description Default indices Union [ int , torch . LongTensor ] a single integer index or a tensor of indices. required Returns: Name Type Description ChoiceDataset ChoiceDataset a subset of the dataset. Source code in torch_choice/data/choice_dataset.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> \"ChoiceDataset\" : \"\"\"Retrieves samples corresponding to the provided index or list of indices. Args: indices (Union[int, torch.LongTensor]): a single integer index or a tensor of indices. Returns: ChoiceDataset: a subset of the dataset. \"\"\" if isinstance ( indices , int ): # convert single integer index to an array of indices. indices = torch . LongTensor ([ indices ]) new_dict = dict () new_dict [ 'item_index' ] = self . item_index [ indices ] . clone () # copy optional attributes. new_dict [ 'label' ] = self . label [ indices ] . clone () if self . label is not None else None new_dict [ 'user_index' ] = self . user_index [ indices ] . clone () if self . user_index is not None else None new_dict [ 'session_index' ] = self . session_index [ indices ] . clone () if self . session_index is not None else None # item_availability has shape (num_sessions, num_items), no need to re-index it. new_dict [ 'item_availability' ] = self . item_availability # copy other attributes. for key , val in self . __dict__ . items (): if key not in new_dict . keys (): if torch . is_tensor ( val ): new_dict [ key ] = val . clone () else : new_dict [ key ] = copy . deepcopy ( val ) return self . _from_dict ( new_dict ) __init__ ( item_index , num_items = None , num_users = None , label = None , user_index = None , session_index = None , item_availability = None , ** kwargs ) Initialization methods for the dataset object, researchers should supply all information about the dataset using this initialization method. The number of choice instances are called batch_size in the documentation. The batch_size corresponds to the file length in wide-format dataset, and often denoted using N . We call it batch_size to follow the convention in machine learning literature. A choice instance is a row of the dataset, so there are batch_size choice instances in each ChoiceDataset . The dataset consists of: (1) a collection of batch_size tuples (item_id, user_id, session_id, label), where each tuple is a choice instance. (2) a collection of observables associated with item, user, session, etc. Parameters: Name Type Description Default item_index torch . LongTensor a tensor of shape (batch_size) indicating the relevant item in each row of the dataset, the relevant item can be: (1) the item bought in this choice instance, (2) or the item reviewed by the user. In the later case, we need the label tensor to specify the rating score. NOTE: The support for second case is under-development, currently, we are only supporting binary label. required num_items Optional [ int ] the number of items in the dataset. If None is provided (default), the number of items will be inferred from the number of unique numbers in item_index . None num_users Optional [ int ] the number of users in the dataset. If None is provided (default), the number of users will be inferred from the number of unique numbers in user_index . None label Optional [ torch . LongTensor ] a tensor of shape (batch_size) indicating the label for prediction in each choice instance. While you want to predict the item bought, you can leave the label argument as None in the initialization method, and the model will use item_index as the object to be predicted. But if you are, for example, predicting the rating an user gave an item, label must be provided. Defaults to None. None user_index Optional [ torch . LongTensor ] a tensor of shape num_purchases (batch_size) indicating the ID of the user who was involved in each choice instance. If None user index is provided, it's assumed that the choice instances are from the same user. user_index is required if and only if there are multiple users in the dataset, for example: (1) user-observables is involved in the utility form, (2) and/or the coefficient is user-specific. This tensor is used to select the corresponding user observables and coefficients assigned to the user (like theta_user) for making prediction for that purchase. Defaults to None. None session_index Optional [ torch . LongTensor ] a tensor of shape num_purchases (batch_size) indicating the ID of the session when that choice instance occurred. This tensor is used to select the correct session observables or price observables for making prediction for that choice instance. Therefore, if there is no session/price observables, you can leave this argument as None . In this case, the ChoiceDataset object will assume each choice instance to be in its own session. Defaults to None. None item_availability Optional [ torch . BoolTensor ] A boolean tensor of shape (num_sessions, num_items) indicating the availability of each item in each session. Utilities of unavailable items would be set to -infinite, and hence these unavailable items will be set to 0 while making prediction. We assume all items are available if set to None. Defaults to None. None Other Kwargs (Observables): One can specify the following types of observables, where * in shape denotes any positive integer. Typically * represents the number of observables. Please refer to the documentation for a detailed guide to use observables. 1. user observables must start with 'user_' and have shape (num_users, ) 2. item observables must start with 'item_' and have shape (num_items, ) 3. session observables must start with 'session_' and have shape (num_sessions, ) 4. taste observables (those vary by user and item) must start with taste_ and have shape (num_users, num_items, ). NOTE: we don't recommend using taste observables, because num_users * num_items is potentially large. 5. price observables (those vary by session and item) must start with price_ and have shape (num_sessions, num_items, *) 6. itemsession observables starting with itemsession_ , this is a more intuitive alias to the price observable. Source code in torch_choice/data/choice_dataset.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def __init__ ( self , item_index : torch . LongTensor , num_items : int = None , num_users : int = None , label : Optional [ torch . LongTensor ] = None , user_index : Optional [ torch . LongTensor ] = None , session_index : Optional [ torch . LongTensor ] = None , item_availability : Optional [ torch . BoolTensor ] = None , ** kwargs ) -> None : \"\"\" Initialization methods for the dataset object, researchers should supply all information about the dataset using this initialization method. The number of choice instances are called `batch_size` in the documentation. The `batch_size` corresponds to the file length in wide-format dataset, and often denoted using `N`. We call it `batch_size` to follow the convention in machine learning literature. A `choice instance` is a row of the dataset, so there are `batch_size` choice instances in each `ChoiceDataset`. The dataset consists of: (1) a collection of `batch_size` tuples (item_id, user_id, session_id, label), where each tuple is a choice instance. (2) a collection of `observables` associated with item, user, session, etc. Args: item_index (torch.LongTensor): a tensor of shape (batch_size) indicating the relevant item in each row of the dataset, the relevant item can be: (1) the item bought in this choice instance, (2) or the item reviewed by the user. In the later case, we need the `label` tensor to specify the rating score. NOTE: The support for second case is under-development, currently, we are only supporting binary label. num_items (Optional[int]): the number of items in the dataset. If `None` is provided (default), the number of items will be inferred from the number of unique numbers in `item_index`. num_users (Optional[int]): the number of users in the dataset. If `None` is provided (default), the number of users will be inferred from the number of unique numbers in `user_index`. label (Optional[torch.LongTensor], optional): a tensor of shape (batch_size) indicating the label for prediction in each choice instance. While you want to predict the item bought, you can leave the `label` argument as `None` in the initialization method, and the model will use `item_index` as the object to be predicted. But if you are, for example, predicting the rating an user gave an item, label must be provided. Defaults to None. user_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the user who was involved in each choice instance. If `None` user index is provided, it's assumed that the choice instances are from the same user. `user_index` is required if and only if there are multiple users in the dataset, for example: (1) user-observables is involved in the utility form, (2) and/or the coefficient is user-specific. This tensor is used to select the corresponding user observables and coefficients assigned to the user (like theta_user) for making prediction for that purchase. Defaults to None. session_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the session when that choice instance occurred. This tensor is used to select the correct session observables or price observables for making prediction for that choice instance. Therefore, if there is no session/price observables, you can leave this argument as `None`. In this case, the `ChoiceDataset` object will assume each choice instance to be in its own session. Defaults to None. item_availability (Optional[torch.BoolTensor], optional): A boolean tensor of shape (num_sessions, num_items) indicating the availability of each item in each session. Utilities of unavailable items would be set to -infinite, and hence these unavailable items will be set to 0 while making prediction. We assume all items are available if set to None. Defaults to None. Other Kwargs (Observables): One can specify the following types of observables, where * in shape denotes any positive integer. Typically * represents the number of observables. Please refer to the documentation for a detailed guide to use observables. 1. user observables must start with 'user_' and have shape (num_users, *) 2. item observables must start with 'item_' and have shape (num_items, *) 3. session observables must start with 'session_' and have shape (num_sessions, *) 4. taste observables (those vary by user and item) must start with `taste_` and have shape (num_users, num_items, *). NOTE: we don't recommend using taste observables, because num_users * num_items is potentially large. 5. price observables (those vary by session and item) must start with `price_` and have shape (num_sessions, num_items, *) 6. itemsession observables starting with `itemsession_`, this is a more intuitive alias to the price observable. \"\"\" # ENHANCEMENT(Tianyu): add item_names for summary. super ( ChoiceDataset , self ) . __init__ () self . label = label self . item_index = item_index self . _num_items = num_items self . _num_users = num_users self . user_index = user_index self . session_index = session_index if self . session_index is None : # if any([x.startswith('session_') or x.startswith('price_') for x in kwargs.keys()]): # if any session sensitive observable is provided, but session index is not, # infer each row in the dataset to be a session. # TODO: (design choice) should we assign unique session index to each choice instance or the same session index. print ( 'No `session_index` is provided, assume each choice instance is in its own session.' ) self . session_index = torch . arange ( len ( self . item_index )) . long () self . item_availability = item_availability for key , item in kwargs . items (): if self . _is_attribute ( key ): # all observable should be float. item = item . float () setattr ( self , key , item ) __len__ () Returns number of samples in this dataset. Returns: Name Type Description int int length of the dataset. Source code in torch_choice/data/choice_dataset.py 153 154 155 156 157 158 159 def __len__ ( self ) -> int : \"\"\"Returns number of samples in this dataset. Returns: int: length of the dataset. \"\"\" return len ( self . item_index ) __repr__ () A method to get a string representation of the dataset. Returns: Name Type Description str str the string representation of the dataset. Source code in torch_choice/data/choice_dataset.py 358 359 360 361 362 363 364 365 366 def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" # don't print shapes of internal attributes like _num_users and _num_items. info = [ f ' { key } = { self . _size_repr ( item ) } ' for key , item in self . __dict__ . items () if not key . startswith ( '_' )] return f \" { self . __class__ . __name__ } ( { ', ' . join ( info ) } , device= { self . device } )\" apply_tensor ( func ) This s a helper method to apply the provided function to all tensors and tensor values of all dictionaries. Parameters: Name Type Description Default func callable a callable function to be applied on tensors and tensor-values of dictionaries. required Returns: Name Type Description ChoiceDataset ChoiceDataset the modified dataset. Source code in torch_choice/data/choice_dataset.py 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 def apply_tensor ( self , func : callable ) -> \"ChoiceDataset\" : \"\"\"This s a helper method to apply the provided function to all tensors and tensor values of all dictionaries. Args: func (callable): a callable function to be applied on tensors and tensor-values of dictionaries. Returns: ChoiceDataset: the modified dataset. \"\"\" for key , item in self . __dict__ . items (): if torch . is_tensor ( item ): setattr ( self , key , func ( item )) # boardcast func to dictionary of tensors as well. elif isinstance ( getattr ( self , key ), dict ): for obj_key , obj_item in getattr ( self , key ) . items (): if torch . is_tensor ( obj_item ): setattr ( getattr ( self , key ), obj_key , func ( obj_item )) return self clone () Creates a copy of self. Returns: Name Type Description ChoiceDataset ChoiceDataset a copy of self. Source code in torch_choice/data/choice_dataset.py 310 311 312 313 314 315 316 317 318 319 320 321 322 def clone ( self ) -> \"ChoiceDataset\" : \"\"\"Creates a copy of self. Returns: ChoiceDataset: a copy of self. \"\"\" dictionary = {} for k , v in self . __dict__ . items (): if torch . is_tensor ( v ): dictionary [ k ] = v . clone () else : dictionary [ k ] = copy . deepcopy ( v ) return self . __class__ . _from_dict ( dictionary ) summary () A method to summarize the dataset. Returns: Name Type Description str None the string representation of the dataset. Source code in torch_choice/data/choice_dataset.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 def summary ( self ) -> None : \"\"\"A method to summarize the dataset. Returns: str: the string representation of the dataset. \"\"\" summary = [ 'ChoiceDataset with {} sessions, {} items, {} users, {} purchase records (observations) .' . format ( self . num_sessions , self . num_items , self . num_users if self . user_index is not None else 'single' , len ( self ))] # summarize users. if self . user_index is not None : unique , counts = self . unique ( self . user_index ) summary . append ( f \"The most frequent user is { unique [ 0 ] } with { counts [ 0 ] } observations; the least frequent user is { unique [ - 1 ] } with { counts [ - 1 ] } observations; on average, there are { counts . astype ( float ) . mean () : .2f } observations per user.\" ) N = len ( unique ) K = min ( 5 , N ) string = f ' { K } most frequent users are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent users are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) # summarize items. unique , counts = self . unique ( self . item_index ) N = len ( unique ) K = min ( 5 , N ) summary . append ( f \"The most frequent item is { unique [ 0 ] } , it was chosen { counts [ 0 ] } times; the least frequent item is { unique [ - 1 ] } it was { counts [ - 1 ] } times; on average, each item was purchased { counts . astype ( float ) . mean () : .2f } times.\" ) string = f ' { K } most frequent items are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent items are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) summary . append ( 'Attribute Summaries:' ) for key , item in self . __dict__ . items (): if self . _is_attribute ( key ) and torch . is_tensor ( item ): summary . append ( \"Observable Tensor ' {} ' with shape {} \" . format ( key , item . shape )) # price attributes are 3-dimensional tensors, ignore for cleanness here. if ( not self . _is_price_attribute ( key )) and ( not self . _is_usersessionitem_attribute ( key )) and ( not self . _is_useritem_attribute ( key )): summary . append ( str ( pd . DataFrame ( item . to ( 'cpu' ) . float () . numpy ()) . describe ())) print ( ' \\n ' . join ( summary ) + f \" \\n device= { self . device } \" ) return None to ( device ) Moves all tensors in this dataset to the specified PyTorch device. Parameters: Name Type Description Default device Union [ str , torch . device ] the destination device. required Returns: Name Type Description ChoiceDataset ChoiceDataset the modified dataset on the new device. Source code in torch_choice/data/choice_dataset.py 299 300 301 302 303 304 305 306 307 308 def to ( self , device : Union [ str , torch . device ]) -> \"ChoiceDataset\" : \"\"\"Moves all tensors in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" return self . apply_tensor ( lambda x : x . to ( device )) Bases: torch . utils . data . Dataset A helper class for joining several pytorch datasets, using JointDataset and pytorch data loader allows for sampling the same batch index from several datasets. The JointDataset class is a wrapper for the torch.utils.data.ChoiceDataset class, it is particularly useful when we need to make prediction from multiple datasets. For example, you have data on consumer purchase records in a fast food store, and suppose every customer will purchase exactly a single main food and a single drink. In this case, you have two separate datasets: FoodDataset and DrinkDataset. You may want to use PyTorch sampler to sample them in a dependent manner: you want to take the i-th sample from both datasets, so that you know what (food, drink) combo the i-th customer purchased. You can do this by using the JointDataset class. Source code in torch_choice/data/joint_dataset.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class JointDataset ( torch . utils . data . Dataset ): \"\"\"A helper class for joining several pytorch datasets, using JointDataset and pytorch data loader allows for sampling the same batch index from several datasets. The JointDataset class is a wrapper for the torch.utils.data.ChoiceDataset class, it is particularly useful when we need to make prediction from multiple datasets. For example, you have data on consumer purchase records in a fast food store, and suppose every customer will purchase exactly a single main food and a single drink. In this case, you have two separate datasets: FoodDataset and DrinkDataset. You may want to use PyTorch sampler to sample them in a dependent manner: you want to take the i-th sample from both datasets, so that you know what (food, drink) combo the i-th customer purchased. You can do this by using the JointDataset class. \"\"\" def __init__ ( self , ** datasets ) -> None : \"\"\"The initialize methods. Args: Arbitrarily many datasets with arbitrary names as keys. In the example above, you can construct ``` dataset = JointDataset(food=FoodDataset, drink=DrinkDataset) ``` All datasets should have the same length. \"\"\" super ( JointDataset , self ) . __init__ () self . datasets = datasets # check the length of sub-datasets are the same. assert len ( set ([ len ( d ) for d in self . datasets . values ()])) == 1 def __len__ ( self ) -> int : \"\"\"Get the number of samples in the joint dataset. Returns: int: the number of samples in the joint dataset, which is the same as the number of samples in each dataset contained. \"\"\" for d in self . datasets . values (): return len ( d ) def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> Dict [ str , ChoiceDataset ]: \"\"\"Queries samples from the dataset by index. Args: indices (Union[int, torch.LongTensor]): an integer or a 1D tensor of multiple indices. Returns: Dict[str, ChoiceDataset]: the subset of the dataset. Keys of the dictionary will be names of each dataset contained (the same as the keys of the ``datasets`` argument in the constructor). Values will be subsets of contained datasets, sliced using the provided indices. \"\"\" return dict (( name , d [ indices ]) for ( name , d ) in self . datasets . items ()) def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" out = [ f 'JointDataset with { len ( self . datasets ) } sub-datasets: (' ] for name , dataset in self . datasets . items (): out . append ( f ' \\t { name } : { str ( dataset ) } ' ) out . append ( ')' ) return ' \\n ' . join ( out ) @property def device ( self ) -> str : \"\"\"Returns the device of datasets contained in the joint dataset. Returns: str: the device of the dataset. \"\"\" for d in self . datasets . values (): return d . device def to ( self , device : Union [ str , torch . device ]) -> \"JointDataset\" : \"\"\"Moves all datasets in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" for d in self . datasets . values (): d = d . to ( device ) return self def clone ( self ) -> \"JointDataset\" : \"\"\"Returns a copy of the dataset. Returns: JointDataset: a copy of the dataset. \"\"\" return JointDataset ( ** { name : d . clone () for ( name , d ) in self . datasets . items ()}) @property def item_index ( self ) -> torch . LongTensor : \"\"\"Returns the current index of each dataset. Returns: torch.LongTensor: the indices of items chosen. \"\"\" return self . datasets [ \"item\" ] . item_index device : str property Returns the device of datasets contained in the joint dataset. Returns: Name Type Description str str the device of the dataset. item_index : torch . LongTensor property Returns the current index of each dataset. Returns: Type Description torch . LongTensor torch.LongTensor: the indices of items chosen. __getitem__ ( indices ) Queries samples from the dataset by index. Parameters: Name Type Description Default indices Union [ int , torch . LongTensor ] an integer or a 1D tensor of multiple indices. required Returns: Type Description Dict [ str , ChoiceDataset ] Dict[str, ChoiceDataset]: the subset of the dataset. Keys of the dictionary will be names of each dataset contained (the same as the keys of the datasets argument in the constructor). Values will be subsets of contained datasets, sliced using the provided indices. Source code in torch_choice/data/joint_dataset.py 55 56 57 58 59 60 61 62 63 64 65 66 def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> Dict [ str , ChoiceDataset ]: \"\"\"Queries samples from the dataset by index. Args: indices (Union[int, torch.LongTensor]): an integer or a 1D tensor of multiple indices. Returns: Dict[str, ChoiceDataset]: the subset of the dataset. Keys of the dictionary will be names of each dataset contained (the same as the keys of the ``datasets`` argument in the constructor). Values will be subsets of contained datasets, sliced using the provided indices. \"\"\" return dict (( name , d [ indices ]) for ( name , d ) in self . datasets . items ()) __init__ ( ** datasets ) The initialize methods. Source code in torch_choice/data/joint_dataset.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , ** datasets ) -> None : \"\"\"The initialize methods. Args: Arbitrarily many datasets with arbitrary names as keys. In the example above, you can construct ``` dataset = JointDataset(food=FoodDataset, drink=DrinkDataset) ``` All datasets should have the same length. \"\"\" super ( JointDataset , self ) . __init__ () self . datasets = datasets # check the length of sub-datasets are the same. assert len ( set ([ len ( d ) for d in self . datasets . values ()])) == 1 __len__ () Get the number of samples in the joint dataset. Returns: Name Type Description int int the number of samples in the joint dataset, which is the same as the number of samples in each dataset contained. Source code in torch_choice/data/joint_dataset.py 46 47 48 49 50 51 52 53 def __len__ ( self ) -> int : \"\"\"Get the number of samples in the joint dataset. Returns: int: the number of samples in the joint dataset, which is the same as the number of samples in each dataset contained. \"\"\" for d in self . datasets . values (): return len ( d ) __repr__ () A method to get a string representation of the dataset. Returns: Name Type Description str str the string representation of the dataset. Source code in torch_choice/data/joint_dataset.py 68 69 70 71 72 73 74 75 76 77 78 def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" out = [ f 'JointDataset with { len ( self . datasets ) } sub-datasets: (' ] for name , dataset in self . datasets . items (): out . append ( f ' \\t { name } : { str ( dataset ) } ' ) out . append ( ')' ) return ' \\n ' . join ( out ) clone () Returns a copy of the dataset. Returns: Name Type Description JointDataset JointDataset a copy of the dataset. Source code in torch_choice/data/joint_dataset.py 103 104 105 106 107 108 109 def clone ( self ) -> \"JointDataset\" : \"\"\"Returns a copy of the dataset. Returns: JointDataset: a copy of the dataset. \"\"\" return JointDataset ( ** { name : d . clone () for ( name , d ) in self . datasets . items ()}) to ( device ) Moves all datasets in this dataset to the specified PyTorch device. Parameters: Name Type Description Default device Union [ str , torch . device ] the destination device. required Returns: Name Type Description ChoiceDataset JointDataset the modified dataset on the new device. Source code in torch_choice/data/joint_dataset.py 90 91 92 93 94 95 96 97 98 99 100 101 def to ( self , device : Union [ str , torch . device ]) -> \"JointDataset\" : \"\"\"Moves all datasets in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" for d in self . datasets . values (): d = d . to ( device ) return self Bases: nn . Module The more generalized version of conditional logit model, the model allows for research specific variable types(groups) and different levels of variations for coefficient. The model allows for the following levels for variable variations: unless the -full flag is specified (which means we want to explicitly model coefficients for all items), for all variation levels related to item (item specific and user-item specific), the model force coefficients for the first item to be zero. This design follows standard econometric practice. constant: constant over all users and items, user: user-specific parameters but constant across all items, item: item-specific parameters but constant across all users, parameters for the first item are forced to be zero. item-full: item-specific parameters but constant across all users, explicitly model for all items. user-item: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. user-item-full: parameters that are specific to both user and item, explicitly model for all items. Source code in torch_choice/model/conditional_logit_model.pyclass ConditionalLogitModel ( nn . Module ): \"\"\"The more generalized version of conditional logit model, the model allows for research specific variable types(groups) and different levels of variations for coefficient. The model allows for the following levels for variable variations: NOTE: unless the `-full` flag is specified (which means we want to explicitly model coefficients for all items), for all variation levels related to item (item specific and user-item specific), the model force coefficients for the first item to be zero. This design follows standard econometric practice. - constant: constant over all users and items, - user: user-specific parameters but constant across all items, - item: item-specific parameters but constant across all users, parameters for the first item are forced to be zero. - item-full: item-specific parameters but constant across all users, explicitly model for all items. - user-item: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. - user-item-full: parameters that are specific to both user and item, explicitly model for all items. \"\"\" def __init__ ( self , formula : Optional [ str ] = None , dataset : Optional [ ChoiceDataset ] = None , coef_variation_dict : Optional [ Dict [ str , str ]] = None , num_param_dict : Optional [ Dict [ str , int ]] = None , num_items : Optional [ int ] = None , num_users : Optional [ int ] = None , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\" Args: formula (str): a string representing the utility formula. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. data (ChoiceDataset): a ChoiceDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients from the ChoiceDataset. coef_variation_dict (Dict[str, str]): variable type to variation level dictionary. Keys of this dictionary should be variable names in the dataset (i.e., these starting with `itemsession_`, `price_`, `user_`, etc), or `intercept` if the researcher requires an intercept term. For each variable name X_var (e.g., `user_income`) or `intercept`, the corresponding dictionary key should be one of the following values, this value specifies the \"level of variation\" of the coefficient. - `constant`: the coefficient constant over all users and items: $X \\beta$. - `user`: user-specific parameters but constant across all items: $X \\beta_{u}$. - `item`: item-specific parameters but constant across all users, $X \\beta_{i}$. Note that the coefficients for the first item are forced to be zero following the standard practice in econometrics. - `item-full`: the same configuration as `item`, but does not force the coefficients of the first item to be zeros. The following configurations are supported by the package, but we don't recommend using them due to the large number of parameters. - `user-item`: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. - `user-item-full`: parameters that are specific to both user and item, explicitly model for all items. num_param_dict (Optional[Dict[str, int]]): variable type to number of parameters dictionary with keys exactly the same as the `coef_variation_dict`. Values of `num_param_dict` records numbers of features in each kind of variable. If None is supplied, num_param_dict will be a dictionary with the same keys as the `coef_variation_dict` dictionary and values of all ones. Default to be None. num_items (int): number of items in the dataset. num_users (int): number of users in the dataset. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. weight_initialization (Optional[Union[str, Dict[str, str]]]): controls for how coefficients are initialized; users can pass a string from {'normal', 'uniform', 'zero'} to initialize all coefficients in the same way. Alternatively, users can pass a dictionary with keys exactly the same as the `coef_variation_dict` dictionary, and values from {'normal', 'uniform', 'zero'} to initialize coefficients of different types of variables differently. By default, all coefficients are initialized following a standard normal distribution. \"\"\" # ============================================================================================================== # Check that the model received a valid combination of inputs so that it can be initialized. # ============================================================================================================== if coef_variation_dict is None and formula is None : raise ValueError ( \"Either coef_variation_dict or formula should be provided to specify the model.\" ) if ( coef_variation_dict is not None ) and ( formula is not None ): raise ValueError ( \"Only one of coef_variation_dict or formula should be provided to specify the model.\" ) if ( formula is not None ) and ( dataset is None ): raise ValueError ( \"If formula is provided, data should be provided to specify the model.\" ) # ============================================================================================================== # Build necessary dictionaries for model initialization. # ============================================================================================================== if formula is None : # Use dictionaries to initialize the model. if num_param_dict is None : warnings . warn ( \"`num_param_dict` is not provided, all variables will be treated as having one parameter.\" ) num_param_dict = { key : 1 for key in coef_variation_dict . keys ()} assert coef_variation_dict . keys () == num_param_dict . keys () # variable `var` with variation `spec` to variable `var[spec]`. rename = dict () # old variable name --> new variable name. for variable , specificity in coef_variation_dict . items (): rename [ variable ] = f \" { variable } [ { specificity } ]\" for old_name , new_name in rename . items (): coef_variation_dict [ new_name ] = coef_variation_dict . pop ( old_name ) num_param_dict [ new_name ] = num_param_dict . pop ( old_name ) else : # Use the formula to infer model. coef_variation_dict , num_param_dict = parse_formula ( formula , dataset ) # ============================================================================================================== # Model Initialization. # ============================================================================================================== super ( ConditionalLogitModel , self ) . __init__ () self . coef_variation_dict = deepcopy ( coef_variation_dict ) self . num_param_dict = deepcopy ( num_param_dict ) self . num_items = num_items self . num_users = num_users self . regularization = deepcopy ( regularization ) assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) # check number of parameters specified are all positive. for var_type , num_params in self . num_param_dict . items (): assert num_params > 0 , f 'num_params needs to be positive, got: { num_params } .' # infer the number of parameters for intercept if the researcher forgets. for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ) and variable not in self . num_param_dict . keys (): warnings . warn ( f \"` { variable } ` key found in coef_variation_dict but not in num_param_dict, num_param_dict[' { variable } '] has been set to 1.\" ) self . num_param_dict [ variable ] = 1 # inform coefficients their ways of being initialized. self . weight_initialization = deepcopy ( weight_initialization ) # construct trainable parameters. coef_dict = dict () for var_type , variation in self . coef_variation_dict . items (): if isinstance ( self . weight_initialization , dict ): if var_type . split ( '[' )[ 0 ] in self . weight_initialization . keys (): # use the variable-specific initialization if provided. init = self . weight_initialization [ var_type . split ( '[' )[ 0 ]] else : # use default initialization. init = None else : # initialize all coefficients in the same way. init = self . weight_initialization coef_dict [ var_type ] = Coefficient ( variation = variation , num_items = self . num_items , num_users = self . num_users , num_params = self . num_param_dict [ var_type ], init = init ) # A ModuleDict is required to properly register all trainable parameters. # self.parameter() will fail if a python dictionary is used instead. self . coef_dict = nn . ModuleDict ( coef_dict ) def __repr__ ( self ) -> str : \"\"\"Return a string representation of the model. Returns: str: the string representation of the model. \"\"\" out_str_lst = [ 'Conditional logistic discrete choice model, expects input features: \\n ' ] for var_type , num_params in self . num_param_dict . items (): out_str_lst . append ( f 'X[ { var_type } ] with { num_params } parameters, with { self . coef_variation_dict [ var_type ] } level variation.' ) return super () . __repr__ () + ' \\n ' + ' \\n ' . join ( out_str_lst ) + ' \\n ' + f 'device= { self . device } ' @property def num_params ( self ) -> int : \"\"\"Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: int: the total number of learnable parameters. \"\"\" return sum ( w . numel () for w in self . parameters ()) def summary ( self ): \"\"\"Print out the current model parameter.\"\"\" for var_type , coefficient in self . coef_dict . items (): if coefficient is not None : print ( 'Variable Type: ' , var_type ) print ( coefficient . coef ) def forward ( self , batch : ChoiceDataset , manual_coef_value_dict : Optional [ Dict [ str , torch . Tensor ]] = None ) -> torch . Tensor : \"\"\" Forward pass of the model. Args: batch: a `ChoiceDataset` object. manual_coef_value_dict (Optional[Dict[str, torch.Tensor]], optional): a dictionary with keys in {'u', 'i'} etc and tensors as values. If provided, the model will force coefficient to be the provided values and compute utility conditioned on the provided coefficient values. This feature is useful when the research wishes to plug in particular values of coefficients and examine the utility values. If not provided, the model will use the learned coefficient values in self.coef_dict. Defaults to None. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) whose (t, i) entry represents the utility from item i in trip t for the user involved in that trip. \"\"\" x_dict = batch . x_dict for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ): # intercept term has no input tensor from the ChoiceDataset data structure. # the tensor for intercept has only 1 feature, every entry is 1. x_dict [ 'intercept' ] = torch . ones (( len ( batch ), self . num_items , 1 ), device = batch . device ) break # compute the utility from each item in each choice session. total_utility = torch . zeros (( len ( batch ), self . num_items ), device = batch . device ) # for each type of variables, apply the corresponding coefficient to input x. for var_type , coef in self . coef_dict . items (): # variable type is named as \"observable_name[variation]\", retrieve the corresponding observable name. corresponding_observable = var_type . split ( \"[\" )[ 0 ] total_utility += coef ( x_dict [ corresponding_observable ], batch . user_index , manual_coef_value = None if manual_coef_value_dict is None else manual_coef_value_dict [ var_type ]) assert total_utility . shape == ( len ( batch ), self . num_items ) if batch . item_availability is not None : # mask out unavailable items. total_utility [ ~ batch . item_availability [ batch . session_index , :]] = torch . finfo ( total_utility . dtype ) . min / 2 return total_utility def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . Tensor , is_train : bool = True ) -> torch . Tensor : \"\"\"Computes the log-likelihood for the batch and label. TODO: consider remove y, change to label. TODO: consider move this method outside the model, the role of the model is to compute the utility. Args: batch (ChoiceDataset): a ChoiceDataset object containing the data. y (torch.Tensor): the label. is_train (bool, optional): whether to trace the gradient. Defaults to True. Returns: torch.Tensor: the negative log-likelihood. \"\"\" if is_train : self . train () else : self . eval () # (num_trips, num_items) total_utility = self . forward ( batch ) logP = torch . log_softmax ( total_utility , dim = 1 ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for param in self . parameters (): nll += self . regularization_weight * torch . norm ( param , p = L ) return nll @property def device ( self ) -> torch . device : \"\"\"Returns the device of the coefficient. Returns: torch.device: the device of the model. \"\"\" return next ( iter ( self . coef_dict . values ())) . device @staticmethod def is_intercept_term ( variable : str ): # check if the given variable is an intercept (fixed effect) term. # intercept (fixed effect) terms are defined as 'intercept[*]' and looks like 'intercept[user]', 'intercept[item]', etc. return ( variable . startswith ( 'intercept[' ) and variable . endswith ( ']' )) def get_coefficient ( self , variable : str ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" return self . state_dict ()[ f \"coef_dict. { variable } .coef\" ] . detach () . clone () device : torch . device property Returns the device of the coefficient. Returns: Type Description torch . device torch.device: the device of the model. num_params : int property Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: Name Type Description int int the total number of learnable parameters. __init__ ( formula = None , dataset = None , coef_variation_dict = None , num_param_dict = None , num_items = None , num_users = None , regularization = None , regularization_weight = None , weight_initialization = None ) Parameters: Name Type Description Default formula str a string representing the utility formula. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. None data ChoiceDataset a ChoiceDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients from the ChoiceDataset. required coef_variation_dict Dict [ str , str ] variable type to variation level dictionary. Keys of this dictionary should be variable names in the dataset (i.e., these starting with itemsession_ , price_ , user_ , etc), or intercept if the researcher requires an intercept term. For each variable name X_var (e.g., user_income ) or intercept , the corresponding dictionary key should be one of the following values, this value specifies the \"level of variation\" of the coefficient. constant : the coefficient constant over all users and items: \\(X \beta\\) . user : user-specific parameters but constant across all items: \\(X \beta_{u}\\) . item : item-specific parameters but constant across all users, \\(X \beta_{i}\\) . Note that the coefficients for the first item are forced to be zero following the standard practice in econometrics. item-full : the same configuration as item , but does not force the coefficients of the first item to be zeros. The following configurations are supported by the package, but we don't recommend using them due to the large number of parameters. - user-item : parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. user-item-full : parameters that are specific to both user and item, explicitly model for all items. None num_param_dict Optional [ Dict [ str , int ]] variable type to number of parameters dictionary with keys exactly the same as the coef_variation_dict . Values of num_param_dict records numbers of features in each kind of variable. If None is supplied, num_param_dict will be a dictionary with the same keys as the coef_variation_dict dictionary and values of all ones. Default to be None. None num_items int number of items in the dataset. None num_users int number of users in the dataset. None regularization Optional [ str ] this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. None regularization_weight Optional [ float ] the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. None weight_initialization Optional [ Union [ str , Dict [ str , str ]]] controls for how coefficients are initialized; users can pass a string from {'normal', 'uniform', 'zero'} to initialize all coefficients in the same way. Alternatively, users can pass a dictionary with keys exactly the same as the coef_variation_dict dictionary, and values from {'normal', 'uniform', 'zero'} to initialize coefficients of different types of variables differently. By default, all coefficients are initialized following a standard normal distribution. None Source code in torch_choice/model/conditional_logit_model.pydef __init__ ( self , formula : Optional [ str ] = None , dataset : Optional [ ChoiceDataset ] = None , coef_variation_dict : Optional [ Dict [ str , str ]] = None , num_param_dict : Optional [ Dict [ str , int ]] = None , num_items : Optional [ int ] = None , num_users : Optional [ int ] = None , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\" Args: formula (str): a string representing the utility formula. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. data (ChoiceDataset): a ChoiceDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients from the ChoiceDataset. coef_variation_dict (Dict[str, str]): variable type to variation level dictionary. Keys of this dictionary should be variable names in the dataset (i.e., these starting with `itemsession_`, `price_`, `user_`, etc), or `intercept` if the researcher requires an intercept term. For each variable name X_var (e.g., `user_income`) or `intercept`, the corresponding dictionary key should be one of the following values, this value specifies the \"level of variation\" of the coefficient. - `constant`: the coefficient constant over all users and items: $X \\beta$. - `user`: user-specific parameters but constant across all items: $X \\beta_{u}$. - `item`: item-specific parameters but constant across all users, $X \\beta_{i}$. Note that the coefficients for the first item are forced to be zero following the standard practice in econometrics. - `item-full`: the same configuration as `item`, but does not force the coefficients of the first item to be zeros. The following configurations are supported by the package, but we don't recommend using them due to the large number of parameters. - `user-item`: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. - `user-item-full`: parameters that are specific to both user and item, explicitly model for all items. num_param_dict (Optional[Dict[str, int]]): variable type to number of parameters dictionary with keys exactly the same as the `coef_variation_dict`. Values of `num_param_dict` records numbers of features in each kind of variable. If None is supplied, num_param_dict will be a dictionary with the same keys as the `coef_variation_dict` dictionary and values of all ones. Default to be None. num_items (int): number of items in the dataset. num_users (int): number of users in the dataset. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. weight_initialization (Optional[Union[str, Dict[str, str]]]): controls for how coefficients are initialized; users can pass a string from {'normal', 'uniform', 'zero'} to initialize all coefficients in the same way. Alternatively, users can pass a dictionary with keys exactly the same as the `coef_variation_dict` dictionary, and values from {'normal', 'uniform', 'zero'} to initialize coefficients of different types of variables differently. By default, all coefficients are initialized following a standard normal distribution. \"\"\" # ============================================================================================================== # Check that the model received a valid combination of inputs so that it can be initialized. # ============================================================================================================== if coef_variation_dict is None and formula is None : raise ValueError ( \"Either coef_variation_dict or formula should be provided to specify the model.\" ) if ( coef_variation_dict is not None ) and ( formula is not None ): raise ValueError ( \"Only one of coef_variation_dict or formula should be provided to specify the model.\" ) if ( formula is not None ) and ( dataset is None ): raise ValueError ( \"If formula is provided, data should be provided to specify the model.\" ) # ============================================================================================================== # Build necessary dictionaries for model initialization. # ============================================================================================================== if formula is None : # Use dictionaries to initialize the model. if num_param_dict is None : warnings . warn ( \"`num_param_dict` is not provided, all variables will be treated as having one parameter.\" ) num_param_dict = { key : 1 for key in coef_variation_dict . keys ()} assert coef_variation_dict . keys () == num_param_dict . keys () # variable `var` with variation `spec` to variable `var[spec]`. rename = dict () # old variable name --> new variable name. for variable , specificity in coef_variation_dict . items (): rename [ variable ] = f \" { variable } [ { specificity } ]\" for old_name , new_name in rename . items (): coef_variation_dict [ new_name ] = coef_variation_dict . pop ( old_name ) num_param_dict [ new_name ] = num_param_dict . pop ( old_name ) else : # Use the formula to infer model. coef_variation_dict , num_param_dict = parse_formula ( formula , dataset ) # ============================================================================================================== # Model Initialization. # ============================================================================================================== super ( ConditionalLogitModel , self ) . __init__ () self . coef_variation_dict = deepcopy ( coef_variation_dict ) self . num_param_dict = deepcopy ( num_param_dict ) self . num_items = num_items self . num_users = num_users self . regularization = deepcopy ( regularization ) assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) # check number of parameters specified are all positive. for var_type , num_params in self . num_param_dict . items (): assert num_params > 0 , f 'num_params needs to be positive, got: { num_params } .' # infer the number of parameters for intercept if the researcher forgets. for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ) and variable not in self . num_param_dict . keys (): warnings . warn ( f \"` { variable } ` key found in coef_variation_dict but not in num_param_dict, num_param_dict[' { variable } '] has been set to 1.\" ) self . num_param_dict [ variable ] = 1 # inform coefficients their ways of being initialized. self . weight_initialization = deepcopy ( weight_initialization ) # construct trainable parameters. coef_dict = dict () for var_type , variation in self . coef_variation_dict . items (): if isinstance ( self . weight_initialization , dict ): if var_type . split ( '[' )[ 0 ] in self . weight_initialization . keys (): # use the variable-specific initialization if provided. init = self . weight_initialization [ var_type . split ( '[' )[ 0 ]] else : # use default initialization. init = None else : # initialize all coefficients in the same way. init = self . weight_initialization coef_dict [ var_type ] = Coefficient ( variation = variation , num_items = self . num_items , num_users = self . num_users , num_params = self . num_param_dict [ var_type ], init = init ) # A ModuleDict is required to properly register all trainable parameters. # self.parameter() will fail if a python dictionary is used instead. self . coef_dict = nn . ModuleDict ( coef_dict ) __repr__ () Return a string representation of the model. Returns: Name Type Description str str the string representation of the model. Source code in torch_choice/model/conditional_logit_model.py 201 202 203 204 205 206 207 208 209 210 def __repr__ ( self ) -> str : \"\"\"Return a string representation of the model. Returns: str: the string representation of the model. \"\"\" out_str_lst = [ 'Conditional logistic discrete choice model, expects input features: \\n ' ] for var_type , num_params in self . num_param_dict . items (): out_str_lst . append ( f 'X[ { var_type } ] with { num_params } parameters, with { self . coef_variation_dict [ var_type ] } level variation.' ) return super () . __repr__ () + ' \\n ' + ' \\n ' . join ( out_str_lst ) + ' \\n ' + f 'device= { self . device } ' forward ( batch , manual_coef_value_dict = None ) Forward pass of the model. Parameters: Name Type Description Default batch ChoiceDataset a ChoiceDataset object. required manual_coef_value_dict Optional [ Dict [ str , torch . Tensor ]] a dictionary with keys in {'u', 'i'} etc and tensors as values. If provided, the model will force coefficient to be the provided values and compute utility conditioned on the provided coefficient values. This feature is useful when the research wishes to plug in particular values of coefficients and examine the utility values. If not provided, the model will use the learned coefficient values in self.coef_dict. Defaults to None. None Returns: Type Description torch . Tensor torch.Tensor: a tensor of shape (num_trips, num_items) whose (t, i) entry represents the utility from item i in trip t for the user involved in that trip. Source code in torch_choice/model/conditional_logit_model.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 def forward ( self , batch : ChoiceDataset , manual_coef_value_dict : Optional [ Dict [ str , torch . Tensor ]] = None ) -> torch . Tensor : \"\"\" Forward pass of the model. Args: batch: a `ChoiceDataset` object. manual_coef_value_dict (Optional[Dict[str, torch.Tensor]], optional): a dictionary with keys in {'u', 'i'} etc and tensors as values. If provided, the model will force coefficient to be the provided values and compute utility conditioned on the provided coefficient values. This feature is useful when the research wishes to plug in particular values of coefficients and examine the utility values. If not provided, the model will use the learned coefficient values in self.coef_dict. Defaults to None. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) whose (t, i) entry represents the utility from item i in trip t for the user involved in that trip. \"\"\" x_dict = batch . x_dict for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ): # intercept term has no input tensor from the ChoiceDataset data structure. # the tensor for intercept has only 1 feature, every entry is 1. x_dict [ 'intercept' ] = torch . ones (( len ( batch ), self . num_items , 1 ), device = batch . device ) break # compute the utility from each item in each choice session. total_utility = torch . zeros (( len ( batch ), self . num_items ), device = batch . device ) # for each type of variables, apply the corresponding coefficient to input x. for var_type , coef in self . coef_dict . items (): # variable type is named as \"observable_name[variation]\", retrieve the corresponding observable name. corresponding_observable = var_type . split ( \"[\" )[ 0 ] total_utility += coef ( x_dict [ corresponding_observable ], batch . user_index , manual_coef_value = None if manual_coef_value_dict is None else manual_coef_value_dict [ var_type ]) assert total_utility . shape == ( len ( batch ), self . num_items ) if batch . item_availability is not None : # mask out unavailable items. total_utility [ ~ batch . item_availability [ batch . session_index , :]] = torch . finfo ( total_utility . dtype ) . min / 2 return total_utility get_coefficient ( variable ) Retrieve the coefficient tensor for the given variable. Parameters: Name Type Description Default variable str the variable name. required Returns: Type Description torch . Tensor torch.Tensor: the corresponding coefficient tensor of the requested variable. Source code in torch_choice/model/conditional_logit_model.py 328 329 330 331 332 333 334 335 336 337 def get_coefficient ( self , variable : str ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" return self . state_dict ()[ f \"coef_dict. { variable } .coef\" ] . detach () . clone () loss ( * args , ** kwargs ) The loss function to be optimized. This is a wrapper of negative_log_likelihood + regularization loss if required. Source code in torch_choice/model/conditional_logit_model.py 304 305 306 307 308 309 310 311 def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for param in self . parameters (): nll += self . regularization_weight * torch . norm ( param , p = L ) return nll negative_log_likelihood ( batch , y , is_train = True ) Computes the log-likelihood for the batch and label. TODO: consider remove y, change to label. TODO: consider move this method outside the model, the role of the model is to compute the utility. Parameters: Name Type Description Default batch ChoiceDataset a ChoiceDataset object containing the data. required y torch . Tensor the label. required is_train bool whether to trace the gradient. Defaults to True. True Returns: Type Description torch . Tensor torch.Tensor: the negative log-likelihood. Source code in torch_choice/model/conditional_logit_model.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . Tensor , is_train : bool = True ) -> torch . Tensor : \"\"\"Computes the log-likelihood for the batch and label. TODO: consider remove y, change to label. TODO: consider move this method outside the model, the role of the model is to compute the utility. Args: batch (ChoiceDataset): a ChoiceDataset object containing the data. y (torch.Tensor): the label. is_train (bool, optional): whether to trace the gradient. Defaults to True. Returns: torch.Tensor: the negative log-likelihood. \"\"\" if is_train : self . train () else : self . eval () # (num_trips, num_items) total_utility = self . forward ( batch ) logP = torch . log_softmax ( total_utility , dim = 1 ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll summary () Print out the current model parameter. Source code in torch_choice/model/conditional_logit_model.py 223 224 225 226 227 228 def summary ( self ): \"\"\"Print out the current model parameter.\"\"\" for var_type , coefficient in self . coef_dict . items (): if coefficient is not None : print ( 'Variable Type: ' , var_type ) print ( coefficient . coef ) Bases: nn . Module Source code in torch_choice/model/nested_logit_model.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 class NestedLogitModel ( nn . Module ): def __init__ ( self , nest_to_item : Dict [ object , List [ int ]], # method 1: specify variation and num param. dictionary. nest_coef_variation_dict : Optional [ Dict [ str , str ]] = None , nest_num_param_dict : Optional [ Dict [ str , int ]] = None , item_coef_variation_dict : Optional [ Dict [ str , str ]] = None , item_num_param_dict : Optional [ Dict [ str , int ]] = None , # method 2: specify formula and dataset. item_formula : Optional [ str ] = None , nest_formula : Optional [ str ] = None , dataset : Optional [ JointDataset ] = None , num_users : Optional [ int ] = None , shared_lambda : bool = False , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , nest_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None , item_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\"Initialization method of the nested logit model. Args: nest_to_item (Dict[object, List[int]]): a dictionary maps a nest ID to a list of items IDs of the queried nest. nest_coef_variation_dict (Dict[str, str]): a dictionary maps a variable type (i.e., variable group) to the level of variation for the coefficient of this type of variables. nest_num_param_dict (Dict[str, int]): a dictionary maps a variable type name to the number of parameters in this variable group. item_coef_variation_dict (Dict[str, str]): the same as nest_coef_variation_dict but for item features. item_num_param_dict (Dict[str, int]): the same as nest_num_param_dict but for item features. {nest, item}_formula (str): a string representing the utility formula for the {nest, item} level logit model. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. dataset (JointDataset): a JointDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients for the nest level model from dataset.datasets['nest']. The parser will infer dimensions of variables and sizes of coefficients for the item level model from dataset.datasets['item']. num_users (Optional[int], optional): number of users to be modelled, this is only required if any of variable type requires user-specific variations. Defaults to None. shared_lambda (bool): a boolean indicating whether to enforce the elasticity lambda, which is the coefficient for inclusive values, to be constant for all nests. The lambda enters the nest-level selection as the following Utility of choosing nest k = lambda * inclusive value of nest k + linear combination of some other nest level features If set to True, a single lambda will be learned for all nests, otherwise, the model learns an individual lambda for each nest. Defaults to False. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. {nest, item}_weight_initialization (Optional[Union[str, Dict[str, str]]]): methods to initialize the weights of coefficients for {nest, item} level model. Please refer to the `weight_initialization` keyword in ConditionalLogitModel's documentation for more details. \"\"\" # handle nest level model. using_formula_to_initiate = ( item_formula is not None ) and ( nest_formula is not None ) if using_formula_to_initiate : # make sure that the research does not specify duplicated information, which might cause conflict. if ( nest_coef_variation_dict is not None ) or ( item_coef_variation_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_coef_variation_dict at the same time.' ) if ( nest_num_param_dict is not None ) or ( item_num_param_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_num_param_dict at the same time.' ) if dataset is None : raise ValueError ( 'Dataset is required if {item, nest}_formula is specified to initiate the model.' ) nest_coef_variation_dict , nest_num_param_dict = parse_formula ( nest_formula , dataset . datasets [ 'nest' ]) item_coef_variation_dict , item_num_param_dict = parse_formula ( item_formula , dataset . datasets [ 'item' ]) else : # check for conflicting information. if ( nest_formula is not None ) or ( item_formula is not None ): raise ValueError ( 'You should not specify {item, nest}_formula and {item, nest}_coef_variation_dict at the same time.' ) # make sure that the research specifies all the required information. if ( nest_coef_variation_dict is None ) or ( item_coef_variation_dict is None ): raise ValueError ( 'You should specify the {item, nest}_coef_variation_dict to initiate the model.' ) if ( nest_num_param_dict is None ) or ( item_num_param_dict is None ): raise ValueError ( 'You should specify the {item, nest}_num_param_dict to initiate the model.' ) super ( NestedLogitModel , self ) . __init__ () self . nest_to_item = nest_to_item self . nest_coef_variation_dict = nest_coef_variation_dict self . nest_num_param_dict = nest_num_param_dict self . item_coef_variation_dict = item_coef_variation_dict self . item_num_param_dict = item_num_param_dict self . num_users = num_users self . nests = list ( nest_to_item . keys ()) self . num_nests = len ( self . nests ) self . num_items = sum ( len ( items ) for items in nest_to_item . values ()) # nest coefficients. self . nest_coef_dict = self . _build_coef_dict ( self . nest_coef_variation_dict , self . nest_num_param_dict , self . num_nests , weight_initialization = deepcopy ( nest_weight_initialization )) # item coefficients. self . item_coef_dict = self . _build_coef_dict ( self . item_coef_variation_dict , self . item_num_param_dict , self . num_items , weight_initialization = deepcopy ( item_weight_initialization )) self . shared_lambda = shared_lambda if self . shared_lambda : self . lambda_weight = nn . Parameter ( torch . ones ( 1 ), requires_grad = True ) else : self . lambda_weight = nn . Parameter ( torch . ones ( self . num_nests ) / 2 , requires_grad = True ) # breakpoint() # self.iv_weights = nn.Parameter(torch.ones(1), requires_grad=True) # used to warn users if forgot to call clamp. self . _clamp_called_flag = True self . regularization = regularization assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) @property def num_params ( self ) -> int : \"\"\"Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: int: the total number of learnable parameters. \"\"\" return sum ( w . numel () for w in self . parameters ()) def _build_coef_dict ( self , coef_variation_dict : Dict [ str , str ], num_param_dict : Dict [ str , int ], num_items : int , weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> nn . ModuleDict : \"\"\"Builds a coefficient dictionary containing all trainable components of the model, mapping coefficient names to the corresponding Coefficient Module. num_items could be the actual number of items or the number of nests depends on the use case. NOTE: torch-choice users don't directly interact with this method. Args: coef_variation_dict (Dict[str, str]): a dictionary mapping coefficient names (e.g., theta_user) to the level of variation (e.g., 'user'). num_param_dict (Dict[str, int]): a dictionary mapping coefficient names to the number of parameters in this coefficient. Be aware that, for example, if there is one K-dimensional coefficient for every user, then the `num_param` should be K instead of K x number of users. num_items (int): the total number of items in the prediction problem. `num_items` should be the number of nests if _build_coef_dict() is used for nest-level prediction. Returns: nn.ModuleDict: a PyTorch ModuleDict object mapping from coefficient names to training Coefficient. \"\"\" coef_dict = dict () for var_type , variation in coef_variation_dict . items (): num_params = num_param_dict [ var_type ] if isinstance ( weight_initialization , dict ): if var_type . split ( '[' )[ 0 ] in weight_initialization . keys (): # use the variable-specific initialization if provided. init = weight_initialization [ var_type . split ( '[' )[ 0 ]] else : # use default initialization. init = None else : # initialize all coefficients in the same way. init = weight_initialization coef_dict [ var_type ] = Coefficient ( variation = variation , num_items = num_items , num_users = self . num_users , num_params = num_params , init = init ) return nn . ModuleDict ( coef_dict ) def forward ( self , batch : ChoiceDataset ) -> torch . Tensor : \"\"\"An standard forward method for the model, the user feeds a ChoiceDataset batch and the model returns the predicted log-likelihood tensor. The main forward passing happens in the _forward() method, but we provide this wrapper forward() method for a cleaner API, as forward() only requires a single batch argument. For more details about the forward passing, please refer to the _forward() method. # TODO: the ConditionalLogitModel returns predicted utility, the NestedLogitModel behaves the same? Args: batch (ChoiceDataset): a ChoiceDataset object containing the data batch. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability of choosing item i in trip t. \"\"\" return self . _forward ( batch [ 'nest' ] . x_dict , batch [ 'item' ] . x_dict , batch [ 'item' ] . user_index , batch [ 'item' ] . item_availability ) def _forward ( self , nest_x_dict : Dict [ str , torch . Tensor ], item_x_dict : Dict [ str , torch . Tensor ], user_index : Optional [ torch . LongTensor ] = None , item_availability : Optional [ torch . BoolTensor ] = None ) -> torch . Tensor : \"\"\"\"Computes log P[t, i] = the log probability for the user involved in trip t to choose item i. Let n denote the ID of the user involved in trip t, then P[t, i] = P_{ni} on page 86 of the book \"discrete choice methods with simulation\" by Train. The `_forward` method is an internal API, users should refer to the `forward` method. Args: nest_x_dict (torch.Tensor): a dictionary mapping from nest-level feature names to the corresponding feature tensor. item_x_dict (torch.Tensor): a dictionary mapping from item-level feature names to the corresponding feature tensor. More details on the shape of the tensors can be found in the docstring of the `x_dict` method of `ChoiceDataset`. user_index (torch.LongTensor): a tensor of shape (num_trips,) indicating which user is making decision in each trip. Setting user_index = None assumes the same user is making decisions in all trips. item_availability (torch.BoolTensor): a boolean tensor with shape (num_trips, num_items) indicating the aviliability of items in each trip. If item_availability[t, i] = False, the utility of choosing item i in trip t, V[t, i], will be set to -inf. Given the decomposition V[t, i] = W[t, k(i)] + Y[t, i] + eps, V[t, i] is set to -inf by setting Y[t, i] = -inf for unavilable items. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability of choosing item i in trip t. \"\"\" if self . shared_lambda : self . lambdas = self . lambda_weight . expand ( self . num_nests ) else : self . lambdas = self . lambda_weight # if not self._clamp_called_flag: # warnings.warn('Did you forget to call clamp_lambdas() after optimizer.step()?') # The overall utility of item can be decomposed into V[item] = W[nest] + Y[item] + eps. T = list ( item_x_dict . values ())[ 0 ] . shape [ 0 ] device = list ( item_x_dict . values ())[ 0 ] . device # compute nest-specific utility with shape (T, num_nests). W = torch . zeros ( T , self . num_nests ) . to ( device ) for variable in self . nest_coef_variation_dict . keys (): if self . is_intercept_term ( variable ): nest_x_dict [ 'intercept' ] = torch . ones (( T , self . num_nests , 1 )) . to ( device ) break for variable in self . item_coef_variation_dict . keys (): if self . is_intercept_term ( variable ): item_x_dict [ 'intercept' ] = torch . ones (( T , self . num_items , 1 )) . to ( device ) break for var_type , coef in self . nest_coef_dict . items (): corresponding_observable = var_type . split ( \"[\" )[ 0 ] W += coef ( nest_x_dict [ corresponding_observable ], user_index ) # compute item-specific utility (T, num_items). Y = torch . zeros ( T , self . num_items ) . to ( device ) for var_type , coef in self . item_coef_dict . items (): corresponding_observable = var_type . split ( \"[\" )[ 0 ] Y += coef ( item_x_dict [ corresponding_observable ], user_index ) if item_availability is not None : Y [ ~ item_availability ] = torch . finfo ( Y . dtype ) . min / 2 # ============================================================================= # compute the inclusive value of each nest. inclusive_value = dict () for k , Bk in self . nest_to_item . items (): # for nest k, divide the Y of all items in Bk by lambda_k. Y [:, Bk ] /= self . lambdas [ k ] # compute inclusive value for nest k. # mask out unavilable items. inclusive_value [ k ] = torch . logsumexp ( Y [:, Bk ], dim = 1 , keepdim = False ) # (T,) # boardcast inclusive value from (T, num_nests) to (T, num_items). # for trip t, I[t, i] is the inclusive value of the nest item i belongs to. I = torch . zeros ( T , self . num_items ) . to ( device ) for k , Bk in self . nest_to_item . items (): I [:, Bk ] = inclusive_value [ k ] . view ( - 1 , 1 ) # (T, |Bk|) # logP_item[t, i] = log P(ni|Bk), where Bk is the nest item i is in, n is the user in trip t. logP_item = Y - I # (T, num_items) # ============================================================================= # logP_nest[t, i] = log P(Bk), for item i in trip t, the probability of choosing the nest/bucket # item i belongs to. logP_nest has shape (T, num_items) # logit[t, i] = W[n, k] + lambda[k] I[n, k], where n is the user involved in trip t, k is # the nest item i belongs to. logit = torch . zeros ( T , self . num_items ) . to ( device ) for k , Bk in self . nest_to_item . items (): logit [:, Bk ] = ( W [:, k ] + self . lambdas [ k ] * inclusive_value [ k ]) . view ( - 1 , 1 ) # (T, |Bk|) # only count each nest once in the logsumexp within the nest level model. cols = [ x [ 0 ] for x in self . nest_to_item . values ()] logP_nest = logit - torch . logsumexp ( logit [:, cols ], dim = 1 , keepdim = True ) # ============================================================================= # compute the joint log P_{ni} as in the textbook. logP = logP_item + logP_nest self . _clamp_called_flag = False return logP def log_likelihood ( self , * args ): \"\"\"Computes the log likelihood of the model, please refer to the negative_log_likelihood() method. Returns: _type_: the log likelihood of the model. \"\"\" return - self . negative_log_likelihood ( * args ) def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . LongTensor , is_train : bool = True ) -> torch . scalar_tensor : \"\"\"Computes the negative log likelihood of the model. Please note the log-likelihood is summed over all samples in batch instead of the average. Args: batch (ChoiceDataset): the ChoiceDataset object containing the data. y (torch.LongTensor): the label. is_train (bool, optional): which mode of the model to be used for the forward passing, if we need Hessian of the NLL through auto-grad, `is_train` should be set to True. If we merely need a performance metric, then `is_train` can be set to False for better performance. Defaults to True. Returns: torch.scalar_tensor: the negative log likelihood of the model. \"\"\" # compute the negative log-likelihood loss directly. if is_train : self . train () else : self . eval () # (num_trips, num_items) logP = self . forward ( batch ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for name , param in self . named_parameters (): if name == 'lambda_weight' : # we don't regularize the lambda term, we only regularize coefficients. continue nll += self . regularization_weight * torch . norm ( param , p = L ) return nll @property def device ( self ) -> torch . device : \"\"\"Returns the device of the coefficient. Returns: torch.device: the device of the model. \"\"\" return next ( iter ( self . item_coef_dict . values ())) . device @staticmethod def is_intercept_term ( variable : str ): # check if the given variable is an intercept (fixed effect) term. # intercept (fixed effect) terms are defined as 'intercept[*]' and looks like 'intercept[user]', 'intercept[item]', etc. return ( variable . startswith ( 'intercept[' ) and variable . endswith ( ']' )) def get_coefficient ( self , variable : str , level : Optional [ str ] = None ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. level (str): from which level of model to extract the coefficient, can be 'item' or 'nest'. The `level` argument will be discarded if `variable` is `lambda`. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" if variable == 'lambda' : return self . lambda_weight . detach () . clone () if level not in [ 'item' , 'nest' ]: raise ValueError ( f \"Level should be either 'item' or 'nest', got { level } .\" ) return self . state_dict ()[ f ' { level } _coef_dict. { variable } .coef' ] . detach () . clone () device : torch . device property Returns the device of the coefficient. Returns: Type Description torch . device torch.device: the device of the model. num_params : int property Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: Name Type Description int int the total number of learnable parameters. __init__ ( nest_to_item , nest_coef_variation_dict = None , nest_num_param_dict = None , item_coef_variation_dict = None , item_num_param_dict = None , item_formula = None , nest_formula = None , dataset = None , num_users = None , shared_lambda = False , regularization = None , regularization_weight = None , nest_weight_initialization = None , item_weight_initialization = None ) Initialization method of the nested logit model. Parameters: Name Type Description Default nest_to_item Dict [ object , List [ int ]] a dictionary maps a nest ID to a list of items IDs of the queried nest. required nest_coef_variation_dict Dict [ str , str ] a dictionary maps a variable type (i.e., variable group) to the level of variation for the coefficient of this type of variables. None nest_num_param_dict Dict [ str , int ] a dictionary maps a variable type name to the number of parameters in this variable group. None item_coef_variation_dict Dict [ str , str ] the same as nest_coef_variation_dict but for item features. None item_num_param_dict Dict [ str , int ] the same as nest_num_param_dict but for item features. None {nest, item}_formula (str a string representing the utility formula for the {nest, item} level logit model. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. required dataset JointDataset a JointDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients for the nest level model from dataset.datasets['nest']. The parser will infer dimensions of variables and sizes of coefficients for the item level model from dataset.datasets['item']. None num_users Optional [ int ] number of users to be modelled, this is only required if any of variable type requires user-specific variations. Defaults to None. None shared_lambda bool a boolean indicating whether to enforce the elasticity lambda, which is the coefficient for inclusive values, to be constant for all nests. The lambda enters the nest-level selection as the following Utility of choosing nest k = lambda * inclusive value of nest k + linear combination of some other nest level features If set to True, a single lambda will be learned for all nests, otherwise, the model learns an individual lambda for each nest. Defaults to False. False regularization Optional [ str ] this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. None regularization_weight Optional [ float ] the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. None {nest, item}_weight_initialization (Optional[Union[str, Dict[str, str]]] methods to initialize the weights of coefficients for {nest, item} level model. Please refer to the weight_initialization keyword in ConditionalLogitModel's documentation for more details. required Source code in torch_choice/model/nested_logit_model.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def __init__ ( self , nest_to_item : Dict [ object , List [ int ]], # method 1: specify variation and num param. dictionary. nest_coef_variation_dict : Optional [ Dict [ str , str ]] = None , nest_num_param_dict : Optional [ Dict [ str , int ]] = None , item_coef_variation_dict : Optional [ Dict [ str , str ]] = None , item_num_param_dict : Optional [ Dict [ str , int ]] = None , # method 2: specify formula and dataset. item_formula : Optional [ str ] = None , nest_formula : Optional [ str ] = None , dataset : Optional [ JointDataset ] = None , num_users : Optional [ int ] = None , shared_lambda : bool = False , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , nest_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None , item_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\"Initialization method of the nested logit model. Args: nest_to_item (Dict[object, List[int]]): a dictionary maps a nest ID to a list of items IDs of the queried nest. nest_coef_variation_dict (Dict[str, str]): a dictionary maps a variable type (i.e., variable group) to the level of variation for the coefficient of this type of variables. nest_num_param_dict (Dict[str, int]): a dictionary maps a variable type name to the number of parameters in this variable group. item_coef_variation_dict (Dict[str, str]): the same as nest_coef_variation_dict but for item features. item_num_param_dict (Dict[str, int]): the same as nest_num_param_dict but for item features. {nest, item}_formula (str): a string representing the utility formula for the {nest, item} level logit model. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. dataset (JointDataset): a JointDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients for the nest level model from dataset.datasets['nest']. The parser will infer dimensions of variables and sizes of coefficients for the item level model from dataset.datasets['item']. num_users (Optional[int], optional): number of users to be modelled, this is only required if any of variable type requires user-specific variations. Defaults to None. shared_lambda (bool): a boolean indicating whether to enforce the elasticity lambda, which is the coefficient for inclusive values, to be constant for all nests. The lambda enters the nest-level selection as the following Utility of choosing nest k = lambda * inclusive value of nest k + linear combination of some other nest level features If set to True, a single lambda will be learned for all nests, otherwise, the model learns an individual lambda for each nest. Defaults to False. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. {nest, item}_weight_initialization (Optional[Union[str, Dict[str, str]]]): methods to initialize the weights of coefficients for {nest, item} level model. Please refer to the `weight_initialization` keyword in ConditionalLogitModel's documentation for more details. \"\"\" # handle nest level model. using_formula_to_initiate = ( item_formula is not None ) and ( nest_formula is not None ) if using_formula_to_initiate : # make sure that the research does not specify duplicated information, which might cause conflict. if ( nest_coef_variation_dict is not None ) or ( item_coef_variation_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_coef_variation_dict at the same time.' ) if ( nest_num_param_dict is not None ) or ( item_num_param_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_num_param_dict at the same time.' ) if dataset is None : raise ValueError ( 'Dataset is required if {item, nest}_formula is specified to initiate the model.' ) nest_coef_variation_dict , nest_num_param_dict = parse_formula ( nest_formula , dataset . datasets [ 'nest' ]) item_coef_variation_dict , item_num_param_dict = parse_formula ( item_formula , dataset . datasets [ 'item' ]) else : # check for conflicting information. if ( nest_formula is not None ) or ( item_formula is not None ): raise ValueError ( 'You should not specify {item, nest}_formula and {item, nest}_coef_variation_dict at the same time.' ) # make sure that the research specifies all the required information. if ( nest_coef_variation_dict is None ) or ( item_coef_variation_dict is None ): raise ValueError ( 'You should specify the {item, nest}_coef_variation_dict to initiate the model.' ) if ( nest_num_param_dict is None ) or ( item_num_param_dict is None ): raise ValueError ( 'You should specify the {item, nest}_num_param_dict to initiate the model.' ) super ( NestedLogitModel , self ) . __init__ () self . nest_to_item = nest_to_item self . nest_coef_variation_dict = nest_coef_variation_dict self . nest_num_param_dict = nest_num_param_dict self . item_coef_variation_dict = item_coef_variation_dict self . item_num_param_dict = item_num_param_dict self . num_users = num_users self . nests = list ( nest_to_item . keys ()) self . num_nests = len ( self . nests ) self . num_items = sum ( len ( items ) for items in nest_to_item . values ()) # nest coefficients. self . nest_coef_dict = self . _build_coef_dict ( self . nest_coef_variation_dict , self . nest_num_param_dict , self . num_nests , weight_initialization = deepcopy ( nest_weight_initialization )) # item coefficients. self . item_coef_dict = self . _build_coef_dict ( self . item_coef_variation_dict , self . item_num_param_dict , self . num_items , weight_initialization = deepcopy ( item_weight_initialization )) self . shared_lambda = shared_lambda if self . shared_lambda : self . lambda_weight = nn . Parameter ( torch . ones ( 1 ), requires_grad = True ) else : self . lambda_weight = nn . Parameter ( torch . ones ( self . num_nests ) / 2 , requires_grad = True ) # breakpoint() # self.iv_weights = nn.Parameter(torch.ones(1), requires_grad=True) # used to warn users if forgot to call clamp. self . _clamp_called_flag = True self . regularization = regularization assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) forward ( batch ) An standard forward method for the model, the user feeds a ChoiceDataset batch and the model returns the predicted log-likelihood tensor. The main forward passing happens in the _forward() method, but we provide this wrapper forward() method for a cleaner API, as forward() only requires a single batch argument. For more details about the forward passing, please refer to the _forward() method. TODO: the ConditionalLogitModel returns predicted utility, the NestedLogitModel behaves the same? Parameters: Name Type Description Default batch ChoiceDataset a ChoiceDataset object containing the data batch. required Returns: Type Description torch . Tensor torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability torch . Tensor of choosing item i in trip t. Source code in torch_choice/model/nested_logit_model.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 def forward ( self , batch : ChoiceDataset ) -> torch . Tensor : \"\"\"An standard forward method for the model, the user feeds a ChoiceDataset batch and the model returns the predicted log-likelihood tensor. The main forward passing happens in the _forward() method, but we provide this wrapper forward() method for a cleaner API, as forward() only requires a single batch argument. For more details about the forward passing, please refer to the _forward() method. # TODO: the ConditionalLogitModel returns predicted utility, the NestedLogitModel behaves the same? Args: batch (ChoiceDataset): a ChoiceDataset object containing the data batch. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability of choosing item i in trip t. \"\"\" return self . _forward ( batch [ 'nest' ] . x_dict , batch [ 'item' ] . x_dict , batch [ 'item' ] . user_index , batch [ 'item' ] . item_availability ) get_coefficient ( variable , level = None ) Retrieve the coefficient tensor for the given variable. Parameters: Name Type Description Default variable str the variable name. required level str from which level of model to extract the coefficient, can be 'item' or 'nest'. The level argument will be discarded if variable is lambda . None Returns: Type Description torch . Tensor torch.Tensor: the corresponding coefficient tensor of the requested variable. Source code in torch_choice/model/nested_logit_model.py 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 def get_coefficient ( self , variable : str , level : Optional [ str ] = None ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. level (str): from which level of model to extract the coefficient, can be 'item' or 'nest'. The `level` argument will be discarded if `variable` is `lambda`. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" if variable == 'lambda' : return self . lambda_weight . detach () . clone () if level not in [ 'item' , 'nest' ]: raise ValueError ( f \"Level should be either 'item' or 'nest', got { level } .\" ) return self . state_dict ()[ f ' { level } _coef_dict. { variable } .coef' ] . detach () . clone () log_likelihood ( * args ) Computes the log likelihood of the model, please refer to the negative_log_likelihood() method. Returns: Name Type Description _type_ the log likelihood of the model. Source code in torch_choice/model/nested_logit_model.py 342 343 344 345 346 347 348 def log_likelihood ( self , * args ): \"\"\"Computes the log likelihood of the model, please refer to the negative_log_likelihood() method. Returns: _type_: the log likelihood of the model. \"\"\" return - self . negative_log_likelihood ( * args ) loss ( * args , ** kwargs ) The loss function to be optimized. This is a wrapper of negative_log_likelihood + regularization loss if required. Source code in torch_choice/model/nested_logit_model.py 378 379 380 381 382 383 384 385 386 387 388 def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for name , param in self . named_parameters (): if name == 'lambda_weight' : # we don't regularize the lambda term, we only regularize coefficients. continue nll += self . regularization_weight * torch . norm ( param , p = L ) return nll negative_log_likelihood ( batch , y , is_train = True ) Computes the negative log likelihood of the model. Please note the log-likelihood is summed over all samples in batch instead of the average. Parameters: Name Type Description Default batch ChoiceDataset the ChoiceDataset object containing the data. required y torch . LongTensor the label. required is_train bool which mode of the model to be used for the forward passing, if we need Hessian of the NLL through auto-grad, is_train should be set to True. If we merely need a performance metric, then is_train can be set to False for better performance. Defaults to True. True Returns: Type Description torch . scalar_tensor torch.scalar_tensor: the negative log likelihood of the model. Source code in torch_choice/model/nested_logit_model.py 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . LongTensor , is_train : bool = True ) -> torch . scalar_tensor : \"\"\"Computes the negative log likelihood of the model. Please note the log-likelihood is summed over all samples in batch instead of the average. Args: batch (ChoiceDataset): the ChoiceDataset object containing the data. y (torch.LongTensor): the label. is_train (bool, optional): which mode of the model to be used for the forward passing, if we need Hessian of the NLL through auto-grad, `is_train` should be set to True. If we merely need a performance metric, then `is_train` can be set to False for better performance. Defaults to True. Returns: torch.scalar_tensor: the negative log likelihood of the model. \"\"\" # compute the negative log-likelihood loss directly. if is_train : self . train () else : self . eval () # (num_trips, num_items) logP = self . forward ( batch ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll","title":"API Reference Torch-Choice"},{"location":"api_torch_choice/#api-reference-torch-choice","text":"Bases: torch . utils . data . Dataset Source code in torch_choice/data/choice_dataset.pyclass ChoiceDataset ( torch . utils . data . Dataset ): def __init__ ( self , item_index : torch . LongTensor , num_items : int = None , num_users : int = None , label : Optional [ torch . LongTensor ] = None , user_index : Optional [ torch . LongTensor ] = None , session_index : Optional [ torch . LongTensor ] = None , item_availability : Optional [ torch . BoolTensor ] = None , ** kwargs ) -> None : \"\"\" Initialization methods for the dataset object, researchers should supply all information about the dataset using this initialization method. The number of choice instances are called `batch_size` in the documentation. The `batch_size` corresponds to the file length in wide-format dataset, and often denoted using `N`. We call it `batch_size` to follow the convention in machine learning literature. A `choice instance` is a row of the dataset, so there are `batch_size` choice instances in each `ChoiceDataset`. The dataset consists of: (1) a collection of `batch_size` tuples (item_id, user_id, session_id, label), where each tuple is a choice instance. (2) a collection of `observables` associated with item, user, session, etc. Args: item_index (torch.LongTensor): a tensor of shape (batch_size) indicating the relevant item in each row of the dataset, the relevant item can be: (1) the item bought in this choice instance, (2) or the item reviewed by the user. In the later case, we need the `label` tensor to specify the rating score. NOTE: The support for second case is under-development, currently, we are only supporting binary label. num_items (Optional[int]): the number of items in the dataset. If `None` is provided (default), the number of items will be inferred from the number of unique numbers in `item_index`. num_users (Optional[int]): the number of users in the dataset. If `None` is provided (default), the number of users will be inferred from the number of unique numbers in `user_index`. label (Optional[torch.LongTensor], optional): a tensor of shape (batch_size) indicating the label for prediction in each choice instance. While you want to predict the item bought, you can leave the `label` argument as `None` in the initialization method, and the model will use `item_index` as the object to be predicted. But if you are, for example, predicting the rating an user gave an item, label must be provided. Defaults to None. user_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the user who was involved in each choice instance. If `None` user index is provided, it's assumed that the choice instances are from the same user. `user_index` is required if and only if there are multiple users in the dataset, for example: (1) user-observables is involved in the utility form, (2) and/or the coefficient is user-specific. This tensor is used to select the corresponding user observables and coefficients assigned to the user (like theta_user) for making prediction for that purchase. Defaults to None. session_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the session when that choice instance occurred. This tensor is used to select the correct session observables or price observables for making prediction for that choice instance. Therefore, if there is no session/price observables, you can leave this argument as `None`. In this case, the `ChoiceDataset` object will assume each choice instance to be in its own session. Defaults to None. item_availability (Optional[torch.BoolTensor], optional): A boolean tensor of shape (num_sessions, num_items) indicating the availability of each item in each session. Utilities of unavailable items would be set to -infinite, and hence these unavailable items will be set to 0 while making prediction. We assume all items are available if set to None. Defaults to None. Other Kwargs (Observables): One can specify the following types of observables, where * in shape denotes any positive integer. Typically * represents the number of observables. Please refer to the documentation for a detailed guide to use observables. 1. user observables must start with 'user_' and have shape (num_users, *) 2. item observables must start with 'item_' and have shape (num_items, *) 3. session observables must start with 'session_' and have shape (num_sessions, *) 4. taste observables (those vary by user and item) must start with `taste_` and have shape (num_users, num_items, *). NOTE: we don't recommend using taste observables, because num_users * num_items is potentially large. 5. price observables (those vary by session and item) must start with `price_` and have shape (num_sessions, num_items, *) 6. itemsession observables starting with `itemsession_`, this is a more intuitive alias to the price observable. \"\"\" # ENHANCEMENT(Tianyu): add item_names for summary. super ( ChoiceDataset , self ) . __init__ () self . label = label self . item_index = item_index self . _num_items = num_items self . _num_users = num_users self . user_index = user_index self . session_index = session_index if self . session_index is None : # if any([x.startswith('session_') or x.startswith('price_') for x in kwargs.keys()]): # if any session sensitive observable is provided, but session index is not, # infer each row in the dataset to be a session. # TODO: (design choice) should we assign unique session index to each choice instance or the same session index. print ( 'No `session_index` is provided, assume each choice instance is in its own session.' ) self . session_index = torch . arange ( len ( self . item_index )) . long () self . item_availability = item_availability for key , item in kwargs . items (): if self . _is_attribute ( key ): # all observable should be float. item = item . float () setattr ( self , key , item ) # TODO: add a validation procedure to check the consistency of the dataset. def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> \"ChoiceDataset\" : \"\"\"Retrieves samples corresponding to the provided index or list of indices. Args: indices (Union[int, torch.LongTensor]): a single integer index or a tensor of indices. Returns: ChoiceDataset: a subset of the dataset. \"\"\" if isinstance ( indices , int ): # convert single integer index to an array of indices. indices = torch . LongTensor ([ indices ]) new_dict = dict () new_dict [ 'item_index' ] = self . item_index [ indices ] . clone () # copy optional attributes. new_dict [ 'label' ] = self . label [ indices ] . clone () if self . label is not None else None new_dict [ 'user_index' ] = self . user_index [ indices ] . clone () if self . user_index is not None else None new_dict [ 'session_index' ] = self . session_index [ indices ] . clone () if self . session_index is not None else None # item_availability has shape (num_sessions, num_items), no need to re-index it. new_dict [ 'item_availability' ] = self . item_availability # copy other attributes. for key , val in self . __dict__ . items (): if key not in new_dict . keys (): if torch . is_tensor ( val ): new_dict [ key ] = val . clone () else : new_dict [ key ] = copy . deepcopy ( val ) return self . _from_dict ( new_dict ) def __len__ ( self ) -> int : \"\"\"Returns number of samples in this dataset. Returns: int: length of the dataset. \"\"\" return len ( self . item_index ) def __contains__ ( self , key : str ) -> bool : return key in self . keys def __eq__ ( self , other : \"ChoiceDataset\" ) -> bool : \"\"\"Returns whether all tensor attributes of both ChoiceDatasets are equal.\"\"\" if not isinstance ( other , ChoiceDataset ): raise TypeError ( 'You can only compare with ChoiceDataset objects.' ) else : flag = True for key , val in self . __dict__ . items (): if torch . is_tensor ( val ): # ignore NaNs while comparing. if not torch . equal ( torch . nan_to_num ( val ), torch . nan_to_num ( other . __dict__ [ key ])): print ( 'Attribute {} is not equal.' . format ( key )) flag = False return flag @property def device ( self ) -> str : \"\"\"Returns the device of the dataset. Returns: str: the device of the dataset. \"\"\" for attr in self . __dict__ . values (): if torch . is_tensor ( attr ): return attr . device @property def num_users ( self ) -> int : \"\"\"Returns number of users involved in this dataset, returns 1 if there is no user identity. Returns: int: the number of users involved in this dataset. \"\"\" if self . _num_users is not None : return self . _num_users elif self . user_index is not None : # infer from the number of unique items in user_index. return len ( torch . unique ( self . user_index )) else : return 1 # for key, val in self.__dict__.items(): # if torch.is_tensor(val): # if self._is_user_attribute(key) or self._is_taste_attribute(key): # return val.shape[0] # return 1 @property def num_items ( self ) -> int : \"\"\"Returns the number of items involved in this dataset. Returns: int: the number of items involved in this dataset. \"\"\" if self . _num_items is not None : # return the _num_items provided in the constructor. return self . _num_items else : # infer the number of items from item_index. return len ( torch . unique ( self . item_index )) # for key, val in self.__dict__.items(): # if torch.is_tensor(val): # if self._is_item_attribute(key): # return val.shape[0] # elif self._is_taste_attribute(key) or self._is_price_attribute(key): # return val.shape[1] # return 1 @property def num_sessions ( self ) -> int : \"\"\"Returns the number of sessions involved in this dataset. Returns: int: the number of sessions involved in this dataset. \"\"\" return len ( torch . unique ( self . session_index )) # if self.session_index is None: # return 1 # for key, val in self.__dict__.items(): # if torch.is_tensor(val): # if self._is_session_attribute(key) or self._is_price_attribute(key): # return val.shape[0] # return 1 @property def x_dict ( self ) -> Dict [ object , torch . Tensor ]: \"\"\"Formats attributes of in this dataset into shape (num_sessions, num_items, num_params) and returns in a dictionary format. Models in this package are expecting this dictionary based data format. Returns: Dict[object, torch.Tensor]: a dictionary with attribute names in the dataset as keys, and reshaped attribute tensors as values. \"\"\" out = dict () for key , val in self . __dict__ . items (): if self . _is_attribute ( key ): # only include attributes. out [ key ] = self . _expand_tensor ( key , val ) # reshape to (num_sessions, num_items, num_params). return out @classmethod def _from_dict ( cls , dictionary : Dict [ str , torch . tensor ]) -> \"ChoiceDataset\" : \"\"\"Creates an instance of ChoiceDataset from a dictionary of arguments. Args: dictionary (Dict[str, torch.tensor]): a dictionary with keys as argument names and values as arguments. Returns: ChoiceDataset: the created copy of dataset. \"\"\" dataset = cls ( ** dictionary ) for key , item in dictionary . items (): setattr ( dataset , key , item ) return dataset def apply_tensor ( self , func : callable ) -> \"ChoiceDataset\" : \"\"\"This s a helper method to apply the provided function to all tensors and tensor values of all dictionaries. Args: func (callable): a callable function to be applied on tensors and tensor-values of dictionaries. Returns: ChoiceDataset: the modified dataset. \"\"\" for key , item in self . __dict__ . items (): if torch . is_tensor ( item ): setattr ( self , key , func ( item )) # boardcast func to dictionary of tensors as well. elif isinstance ( getattr ( self , key ), dict ): for obj_key , obj_item in getattr ( self , key ) . items (): if torch . is_tensor ( obj_item ): setattr ( getattr ( self , key ), obj_key , func ( obj_item )) return self def to ( self , device : Union [ str , torch . device ]) -> \"ChoiceDataset\" : \"\"\"Moves all tensors in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" return self . apply_tensor ( lambda x : x . to ( device )) def clone ( self ) -> \"ChoiceDataset\" : \"\"\"Creates a copy of self. Returns: ChoiceDataset: a copy of self. \"\"\" dictionary = {} for k , v in self . __dict__ . items (): if torch . is_tensor ( v ): dictionary [ k ] = v . clone () else : dictionary [ k ] = copy . deepcopy ( v ) return self . __class__ . _from_dict ( dictionary ) def _check_device_consistency ( self ) -> None : \"\"\"Checks if all tensors in this dataset are on the same device. Raises: Exception: an exception is raised if not all tensors are on the same device. \"\"\" # assert all tensors are on the same device. devices = list () for val in self . __dict__ . values (): if torch . is_tensor ( val ): devices . append ( val . device ) if len ( set ( devices )) > 1 : raise Exception ( f 'Found tensors on different devices: { set ( devices ) } .' , 'Use dataset.to() method to align devices.' ) def _size_repr ( self , value : object ) -> List [ int ]: \"\"\"A helper method to get the string-representation of object sizes, this is helpful while constructing the string representation of the dataset. Args: value (object): an object to examine its size. Returns: List[int]: list of integers representing the size of the object, length of the list is equal to dimension of `value`. \"\"\" if torch . is_tensor ( value ): return list ( value . size ()) elif isinstance ( value , int ) or isinstance ( value , float ): return [ 1 ] elif isinstance ( value , list ) or isinstance ( value , tuple ): return [ len ( value )] else : return [] def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" # don't print shapes of internal attributes like _num_users and _num_items. info = [ f ' { key } = { self . _size_repr ( item ) } ' for key , item in self . __dict__ . items () if not key . startswith ( '_' )] return f \" { self . __class__ . __name__ } ( { ', ' . join ( info ) } , device= { self . device } )\" # ================================================================================================================== # methods for checking attribute categories. # ================================================================================================================== @staticmethod def _is_item_attribute ( key : str ) -> bool : return key . startswith ( 'item_' ) and ( key != 'item_availability' ) and ( key != 'item_index' ) @staticmethod def _is_user_attribute ( key : str ) -> bool : return key . startswith ( 'user_' ) and ( key != 'user_index' ) @staticmethod def _is_useritem_attribute ( key : str ) -> bool : return key . startswith ( 'useritem_' ) @staticmethod def _is_session_attribute ( key : str ) -> bool : return key . startswith ( 'session_' ) and ( key != 'session_index' ) @staticmethod def _is_price_attribute ( key : str ) -> bool : return key . startswith ( 'price_' ) or key . startswith ( 'itemsession_' ) @staticmethod def _is_usersessionitem_attribute ( key : str ) -> bool : return key . startswith ( 'usersessionitem_' ) def _is_attribute ( self , key : str ) -> bool : return self . _is_item_attribute ( key ) \\ or self . _is_user_attribute ( key ) \\ or self . _is_useritem_attribute ( key ) \\ or self . _is_session_attribute ( key ) \\ or self . _is_price_attribute ( key ) \\ or self . _is_usersessionitem_attribute ( key ) def _expand_tensor ( self , key : str , val : torch . Tensor ) -> torch . Tensor : \"\"\"Expands attribute tensor to (len(self), num_items, num_params) shape for prediction tasks, this method won't reshape the tensor at all if the `key` (i.e., name of the tensor) suggests its not an attribute of any kind. Args: key (str): name of the attribute used to determine the raw shape of the tensor. For example, 'item_obs' means the raw tensor is in shape (num_items, num_params). val (torch.Tensor): the attribute tensor to be reshaped. Returns: torch.Tensor: the reshaped tensor with shape (num_sessions, num_items, num_params). \"\"\" if not self . _is_attribute ( key ): # this is a sanity check. raise ValueError ( f 'Warning: the input key { key } is not an attribute of the dataset, will NOT modify the provided tensor.' ) num_params = val . shape [ - 1 ] # the number of parameters/coefficients/observables. # convert attribute tensors to (len(self), num_items, num_params) shape. if self . _is_user_attribute ( key ): # user_attribute (num_users, *) out = val [ self . user_index , :] . view ( len ( self ), 1 , num_params ) . expand ( - 1 , self . num_items , - 1 ) elif self . _is_item_attribute ( key ): # item_attribute (num_items, *) out = val . view ( 1 , self . num_items , num_params ) . expand ( len ( self ), - 1 , - 1 ) elif self . _is_useritem_attribute ( key ): # useritem_attribute (num_users, num_items, *) out = val [ self . user_index , :, :] elif self . _is_session_attribute ( key ): # session_attribute (num_sessions, *) out = val [ self . session_index , :] . view ( len ( self ), 1 , num_params ) . expand ( - 1 , self . num_items , - 1 ) # elif self._is_taste_attribute(key): # # taste_attribute (num_users, num_items, *) # out = val[self.user_index, :, :] elif self . _is_price_attribute ( key ): # price_attribute (num_sessions, num_items, *) out = val [ self . session_index , :, :] elif self . _is_usersessionitem_attribute ( key ): # usersessionitem_attribute has shape (num_users, num_sessions, num_items, *) out = val [ self . user_index , self . session_index , :, :] # (len(self), num_items, *) else : raise ValueError ( f 'Warning: the input key { key } is not an attribute of the dataset, will NOT modify the provided tensor.' ) assert out . shape == ( len ( self ), self . num_items , num_params ) return out @staticmethod def unique ( tensor : torch . Tensor ) -> Tuple [ np . ndarray ]: arr = tensor . cpu () . numpy () unique , counts = np . unique ( arr , return_counts = True ) count_sort_ind = np . argsort ( - counts ) unique = unique [ count_sort_ind ] counts = counts [ count_sort_ind ] return unique , counts def summary ( self ) -> None : \"\"\"A method to summarize the dataset. Returns: str: the string representation of the dataset. \"\"\" summary = [ 'ChoiceDataset with {} sessions, {} items, {} users, {} purchase records (observations) .' . format ( self . num_sessions , self . num_items , self . num_users if self . user_index is not None else 'single' , len ( self ))] # summarize users. if self . user_index is not None : unique , counts = self . unique ( self . user_index ) summary . append ( f \"The most frequent user is { unique [ 0 ] } with { counts [ 0 ] } observations; the least frequent user is { unique [ - 1 ] } with { counts [ - 1 ] } observations; on average, there are { counts . astype ( float ) . mean () : .2f } observations per user.\" ) N = len ( unique ) K = min ( 5 , N ) string = f ' { K } most frequent users are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent users are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) # summarize items. unique , counts = self . unique ( self . item_index ) N = len ( unique ) K = min ( 5 , N ) summary . append ( f \"The most frequent item is { unique [ 0 ] } , it was chosen { counts [ 0 ] } times; the least frequent item is { unique [ - 1 ] } it was { counts [ - 1 ] } times; on average, each item was purchased { counts . astype ( float ) . mean () : .2f } times.\" ) string = f ' { K } most frequent items are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent items are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) summary . append ( 'Attribute Summaries:' ) for key , item in self . __dict__ . items (): if self . _is_attribute ( key ) and torch . is_tensor ( item ): summary . append ( \"Observable Tensor ' {} ' with shape {} \" . format ( key , item . shape )) # price attributes are 3-dimensional tensors, ignore for cleanness here. if ( not self . _is_price_attribute ( key )) and ( not self . _is_usersessionitem_attribute ( key )) and ( not self . _is_useritem_attribute ( key )): summary . append ( str ( pd . DataFrame ( item . to ( 'cpu' ) . float () . numpy ()) . describe ())) print ( ' \\n ' . join ( summary ) + f \" \\n device= { self . device } \" ) return None","title":"API Reference: Torch Choice"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.device","text":"Returns the device of the dataset. Returns: Name Type Description str str the device of the dataset.","title":"device"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.num_items","text":"Returns the number of items involved in this dataset. Returns: Name Type Description int int the number of items involved in this dataset.","title":"num_items"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.num_sessions","text":"Returns the number of sessions involved in this dataset. Returns: Name Type Description int int the number of sessions involved in this dataset.","title":"num_sessions"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.num_users","text":"Returns number of users involved in this dataset, returns 1 if there is no user identity. Returns: Name Type Description int int the number of users involved in this dataset.","title":"num_users"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.x_dict","text":"Formats attributes of in this dataset into shape (num_sessions, num_items, num_params) and returns in a dictionary format. Models in this package are expecting this dictionary based data format. Returns: Type Description Dict [ object , torch . Tensor ] Dict[object, torch.Tensor]: a dictionary with attribute names in the dataset as keys, and reshaped attribute tensors as values.","title":"x_dict"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.__eq__","text":"Returns whether all tensor attributes of both ChoiceDatasets are equal. Source code in torch_choice/data/choice_dataset.py 164 165 166 167 168 169 170 171 172 173 174 175 176 def __eq__ ( self , other : \"ChoiceDataset\" ) -> bool : \"\"\"Returns whether all tensor attributes of both ChoiceDatasets are equal.\"\"\" if not isinstance ( other , ChoiceDataset ): raise TypeError ( 'You can only compare with ChoiceDataset objects.' ) else : flag = True for key , val in self . __dict__ . items (): if torch . is_tensor ( val ): # ignore NaNs while comparing. if not torch . equal ( torch . nan_to_num ( val ), torch . nan_to_num ( other . __dict__ [ key ])): print ( 'Attribute {} is not equal.' . format ( key )) flag = False return flag","title":"__eq__()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.__getitem__","text":"Retrieves samples corresponding to the provided index or list of indices. Parameters: Name Type Description Default indices Union [ int , torch . LongTensor ] a single integer index or a tensor of indices. required Returns: Name Type Description ChoiceDataset ChoiceDataset a subset of the dataset. Source code in torch_choice/data/choice_dataset.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> \"ChoiceDataset\" : \"\"\"Retrieves samples corresponding to the provided index or list of indices. Args: indices (Union[int, torch.LongTensor]): a single integer index or a tensor of indices. Returns: ChoiceDataset: a subset of the dataset. \"\"\" if isinstance ( indices , int ): # convert single integer index to an array of indices. indices = torch . LongTensor ([ indices ]) new_dict = dict () new_dict [ 'item_index' ] = self . item_index [ indices ] . clone () # copy optional attributes. new_dict [ 'label' ] = self . label [ indices ] . clone () if self . label is not None else None new_dict [ 'user_index' ] = self . user_index [ indices ] . clone () if self . user_index is not None else None new_dict [ 'session_index' ] = self . session_index [ indices ] . clone () if self . session_index is not None else None # item_availability has shape (num_sessions, num_items), no need to re-index it. new_dict [ 'item_availability' ] = self . item_availability # copy other attributes. for key , val in self . __dict__ . items (): if key not in new_dict . keys (): if torch . is_tensor ( val ): new_dict [ key ] = val . clone () else : new_dict [ key ] = copy . deepcopy ( val ) return self . _from_dict ( new_dict )","title":"__getitem__()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.__init__","text":"Initialization methods for the dataset object, researchers should supply all information about the dataset using this initialization method. The number of choice instances are called batch_size in the documentation. The batch_size corresponds to the file length in wide-format dataset, and often denoted using N . We call it batch_size to follow the convention in machine learning literature. A choice instance is a row of the dataset, so there are batch_size choice instances in each ChoiceDataset . The dataset consists of: (1) a collection of batch_size tuples (item_id, user_id, session_id, label), where each tuple is a choice instance. (2) a collection of observables associated with item, user, session, etc. Parameters: Name Type Description Default item_index torch . LongTensor a tensor of shape (batch_size) indicating the relevant item in each row of the dataset, the relevant item can be: (1) the item bought in this choice instance, (2) or the item reviewed by the user. In the later case, we need the label tensor to specify the rating score. NOTE: The support for second case is under-development, currently, we are only supporting binary label. required num_items Optional [ int ] the number of items in the dataset. If None is provided (default), the number of items will be inferred from the number of unique numbers in item_index . None num_users Optional [ int ] the number of users in the dataset. If None is provided (default), the number of users will be inferred from the number of unique numbers in user_index . None label Optional [ torch . LongTensor ] a tensor of shape (batch_size) indicating the label for prediction in each choice instance. While you want to predict the item bought, you can leave the label argument as None in the initialization method, and the model will use item_index as the object to be predicted. But if you are, for example, predicting the rating an user gave an item, label must be provided. Defaults to None. None user_index Optional [ torch . LongTensor ] a tensor of shape num_purchases (batch_size) indicating the ID of the user who was involved in each choice instance. If None user index is provided, it's assumed that the choice instances are from the same user. user_index is required if and only if there are multiple users in the dataset, for example: (1) user-observables is involved in the utility form, (2) and/or the coefficient is user-specific. This tensor is used to select the corresponding user observables and coefficients assigned to the user (like theta_user) for making prediction for that purchase. Defaults to None. None session_index Optional [ torch . LongTensor ] a tensor of shape num_purchases (batch_size) indicating the ID of the session when that choice instance occurred. This tensor is used to select the correct session observables or price observables for making prediction for that choice instance. Therefore, if there is no session/price observables, you can leave this argument as None . In this case, the ChoiceDataset object will assume each choice instance to be in its own session. Defaults to None. None item_availability Optional [ torch . BoolTensor ] A boolean tensor of shape (num_sessions, num_items) indicating the availability of each item in each session. Utilities of unavailable items would be set to -infinite, and hence these unavailable items will be set to 0 while making prediction. We assume all items are available if set to None. Defaults to None. None Other Kwargs (Observables): One can specify the following types of observables, where * in shape denotes any positive integer. Typically * represents the number of observables. Please refer to the documentation for a detailed guide to use observables. 1. user observables must start with 'user_' and have shape (num_users, ) 2. item observables must start with 'item_' and have shape (num_items, ) 3. session observables must start with 'session_' and have shape (num_sessions, ) 4. taste observables (those vary by user and item) must start with taste_ and have shape (num_users, num_items, ). NOTE: we don't recommend using taste observables, because num_users * num_items is potentially large. 5. price observables (those vary by session and item) must start with price_ and have shape (num_sessions, num_items, *) 6. itemsession observables starting with itemsession_ , this is a more intuitive alias to the price observable. Source code in torch_choice/data/choice_dataset.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def __init__ ( self , item_index : torch . LongTensor , num_items : int = None , num_users : int = None , label : Optional [ torch . LongTensor ] = None , user_index : Optional [ torch . LongTensor ] = None , session_index : Optional [ torch . LongTensor ] = None , item_availability : Optional [ torch . BoolTensor ] = None , ** kwargs ) -> None : \"\"\" Initialization methods for the dataset object, researchers should supply all information about the dataset using this initialization method. The number of choice instances are called `batch_size` in the documentation. The `batch_size` corresponds to the file length in wide-format dataset, and often denoted using `N`. We call it `batch_size` to follow the convention in machine learning literature. A `choice instance` is a row of the dataset, so there are `batch_size` choice instances in each `ChoiceDataset`. The dataset consists of: (1) a collection of `batch_size` tuples (item_id, user_id, session_id, label), where each tuple is a choice instance. (2) a collection of `observables` associated with item, user, session, etc. Args: item_index (torch.LongTensor): a tensor of shape (batch_size) indicating the relevant item in each row of the dataset, the relevant item can be: (1) the item bought in this choice instance, (2) or the item reviewed by the user. In the later case, we need the `label` tensor to specify the rating score. NOTE: The support for second case is under-development, currently, we are only supporting binary label. num_items (Optional[int]): the number of items in the dataset. If `None` is provided (default), the number of items will be inferred from the number of unique numbers in `item_index`. num_users (Optional[int]): the number of users in the dataset. If `None` is provided (default), the number of users will be inferred from the number of unique numbers in `user_index`. label (Optional[torch.LongTensor], optional): a tensor of shape (batch_size) indicating the label for prediction in each choice instance. While you want to predict the item bought, you can leave the `label` argument as `None` in the initialization method, and the model will use `item_index` as the object to be predicted. But if you are, for example, predicting the rating an user gave an item, label must be provided. Defaults to None. user_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the user who was involved in each choice instance. If `None` user index is provided, it's assumed that the choice instances are from the same user. `user_index` is required if and only if there are multiple users in the dataset, for example: (1) user-observables is involved in the utility form, (2) and/or the coefficient is user-specific. This tensor is used to select the corresponding user observables and coefficients assigned to the user (like theta_user) for making prediction for that purchase. Defaults to None. session_index (Optional[torch.LongTensor], optional): a tensor of shape num_purchases (batch_size) indicating the ID of the session when that choice instance occurred. This tensor is used to select the correct session observables or price observables for making prediction for that choice instance. Therefore, if there is no session/price observables, you can leave this argument as `None`. In this case, the `ChoiceDataset` object will assume each choice instance to be in its own session. Defaults to None. item_availability (Optional[torch.BoolTensor], optional): A boolean tensor of shape (num_sessions, num_items) indicating the availability of each item in each session. Utilities of unavailable items would be set to -infinite, and hence these unavailable items will be set to 0 while making prediction. We assume all items are available if set to None. Defaults to None. Other Kwargs (Observables): One can specify the following types of observables, where * in shape denotes any positive integer. Typically * represents the number of observables. Please refer to the documentation for a detailed guide to use observables. 1. user observables must start with 'user_' and have shape (num_users, *) 2. item observables must start with 'item_' and have shape (num_items, *) 3. session observables must start with 'session_' and have shape (num_sessions, *) 4. taste observables (those vary by user and item) must start with `taste_` and have shape (num_users, num_items, *). NOTE: we don't recommend using taste observables, because num_users * num_items is potentially large. 5. price observables (those vary by session and item) must start with `price_` and have shape (num_sessions, num_items, *) 6. itemsession observables starting with `itemsession_`, this is a more intuitive alias to the price observable. \"\"\" # ENHANCEMENT(Tianyu): add item_names for summary. super ( ChoiceDataset , self ) . __init__ () self . label = label self . item_index = item_index self . _num_items = num_items self . _num_users = num_users self . user_index = user_index self . session_index = session_index if self . session_index is None : # if any([x.startswith('session_') or x.startswith('price_') for x in kwargs.keys()]): # if any session sensitive observable is provided, but session index is not, # infer each row in the dataset to be a session. # TODO: (design choice) should we assign unique session index to each choice instance or the same session index. print ( 'No `session_index` is provided, assume each choice instance is in its own session.' ) self . session_index = torch . arange ( len ( self . item_index )) . long () self . item_availability = item_availability for key , item in kwargs . items (): if self . _is_attribute ( key ): # all observable should be float. item = item . float () setattr ( self , key , item )","title":"__init__()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.__len__","text":"Returns number of samples in this dataset. Returns: Name Type Description int int length of the dataset. Source code in torch_choice/data/choice_dataset.py 153 154 155 156 157 158 159 def __len__ ( self ) -> int : \"\"\"Returns number of samples in this dataset. Returns: int: length of the dataset. \"\"\" return len ( self . item_index )","title":"__len__()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.__repr__","text":"A method to get a string representation of the dataset. Returns: Name Type Description str str the string representation of the dataset. Source code in torch_choice/data/choice_dataset.py 358 359 360 361 362 363 364 365 366 def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" # don't print shapes of internal attributes like _num_users and _num_items. info = [ f ' { key } = { self . _size_repr ( item ) } ' for key , item in self . __dict__ . items () if not key . startswith ( '_' )] return f \" { self . __class__ . __name__ } ( { ', ' . join ( info ) } , device= { self . device } )\"","title":"__repr__()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.apply_tensor","text":"This s a helper method to apply the provided function to all tensors and tensor values of all dictionaries. Parameters: Name Type Description Default func callable a callable function to be applied on tensors and tensor-values of dictionaries. required Returns: Name Type Description ChoiceDataset ChoiceDataset the modified dataset. Source code in torch_choice/data/choice_dataset.py 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 def apply_tensor ( self , func : callable ) -> \"ChoiceDataset\" : \"\"\"This s a helper method to apply the provided function to all tensors and tensor values of all dictionaries. Args: func (callable): a callable function to be applied on tensors and tensor-values of dictionaries. Returns: ChoiceDataset: the modified dataset. \"\"\" for key , item in self . __dict__ . items (): if torch . is_tensor ( item ): setattr ( self , key , func ( item )) # boardcast func to dictionary of tensors as well. elif isinstance ( getattr ( self , key ), dict ): for obj_key , obj_item in getattr ( self , key ) . items (): if torch . is_tensor ( obj_item ): setattr ( getattr ( self , key ), obj_key , func ( obj_item )) return self","title":"apply_tensor()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.clone","text":"Creates a copy of self. Returns: Name Type Description ChoiceDataset ChoiceDataset a copy of self. Source code in torch_choice/data/choice_dataset.py 310 311 312 313 314 315 316 317 318 319 320 321 322 def clone ( self ) -> \"ChoiceDataset\" : \"\"\"Creates a copy of self. Returns: ChoiceDataset: a copy of self. \"\"\" dictionary = {} for k , v in self . __dict__ . items (): if torch . is_tensor ( v ): dictionary [ k ] = v . clone () else : dictionary [ k ] = copy . deepcopy ( v ) return self . __class__ . _from_dict ( dictionary )","title":"clone()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.summary","text":"A method to summarize the dataset. Returns: Name Type Description str None the string representation of the dataset. Source code in torch_choice/data/choice_dataset.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 def summary ( self ) -> None : \"\"\"A method to summarize the dataset. Returns: str: the string representation of the dataset. \"\"\" summary = [ 'ChoiceDataset with {} sessions, {} items, {} users, {} purchase records (observations) .' . format ( self . num_sessions , self . num_items , self . num_users if self . user_index is not None else 'single' , len ( self ))] # summarize users. if self . user_index is not None : unique , counts = self . unique ( self . user_index ) summary . append ( f \"The most frequent user is { unique [ 0 ] } with { counts [ 0 ] } observations; the least frequent user is { unique [ - 1 ] } with { counts [ - 1 ] } observations; on average, there are { counts . astype ( float ) . mean () : .2f } observations per user.\" ) N = len ( unique ) K = min ( 5 , N ) string = f ' { K } most frequent users are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent users are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) # summarize items. unique , counts = self . unique ( self . item_index ) N = len ( unique ) K = min ( 5 , N ) summary . append ( f \"The most frequent item is { unique [ 0 ] } , it was chosen { counts [ 0 ] } times; the least frequent item is { unique [ - 1 ] } it was { counts [ - 1 ] } times; on average, each item was purchased { counts . astype ( float ) . mean () : .2f } times.\" ) string = f ' { K } most frequent items are: ' + ', ' . join ([ f ' { unique [ i ] } ( { counts [ i ] } times)' for i in range ( K )]) + '.' summary . append ( string ) string = f ' { K } least frequent items are: ' + ', ' . join ([ f ' { unique [ N - i ] } ( { counts [ N - i ] } times)' for i in range ( 1 , K + 1 )]) + '.' summary . append ( string ) summary . append ( 'Attribute Summaries:' ) for key , item in self . __dict__ . items (): if self . _is_attribute ( key ) and torch . is_tensor ( item ): summary . append ( \"Observable Tensor ' {} ' with shape {} \" . format ( key , item . shape )) # price attributes are 3-dimensional tensors, ignore for cleanness here. if ( not self . _is_price_attribute ( key )) and ( not self . _is_usersessionitem_attribute ( key )) and ( not self . _is_useritem_attribute ( key )): summary . append ( str ( pd . DataFrame ( item . to ( 'cpu' ) . float () . numpy ()) . describe ())) print ( ' \\n ' . join ( summary ) + f \" \\n device= { self . device } \" ) return None","title":"summary()"},{"location":"api_torch_choice/#torch_choice.data.choice_dataset.ChoiceDataset.to","text":"Moves all tensors in this dataset to the specified PyTorch device. Parameters: Name Type Description Default device Union [ str , torch . device ] the destination device. required Returns: Name Type Description ChoiceDataset ChoiceDataset the modified dataset on the new device. Source code in torch_choice/data/choice_dataset.py 299 300 301 302 303 304 305 306 307 308 def to ( self , device : Union [ str , torch . device ]) -> \"ChoiceDataset\" : \"\"\"Moves all tensors in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" return self . apply_tensor ( lambda x : x . to ( device )) Bases: torch . utils . data . Dataset A helper class for joining several pytorch datasets, using JointDataset and pytorch data loader allows for sampling the same batch index from several datasets. The JointDataset class is a wrapper for the torch.utils.data.ChoiceDataset class, it is particularly useful when we need to make prediction from multiple datasets. For example, you have data on consumer purchase records in a fast food store, and suppose every customer will purchase exactly a single main food and a single drink. In this case, you have two separate datasets: FoodDataset and DrinkDataset. You may want to use PyTorch sampler to sample them in a dependent manner: you want to take the i-th sample from both datasets, so that you know what (food, drink) combo the i-th customer purchased. You can do this by using the JointDataset class. Source code in torch_choice/data/joint_dataset.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class JointDataset ( torch . utils . data . Dataset ): \"\"\"A helper class for joining several pytorch datasets, using JointDataset and pytorch data loader allows for sampling the same batch index from several datasets. The JointDataset class is a wrapper for the torch.utils.data.ChoiceDataset class, it is particularly useful when we need to make prediction from multiple datasets. For example, you have data on consumer purchase records in a fast food store, and suppose every customer will purchase exactly a single main food and a single drink. In this case, you have two separate datasets: FoodDataset and DrinkDataset. You may want to use PyTorch sampler to sample them in a dependent manner: you want to take the i-th sample from both datasets, so that you know what (food, drink) combo the i-th customer purchased. You can do this by using the JointDataset class. \"\"\" def __init__ ( self , ** datasets ) -> None : \"\"\"The initialize methods. Args: Arbitrarily many datasets with arbitrary names as keys. In the example above, you can construct ``` dataset = JointDataset(food=FoodDataset, drink=DrinkDataset) ``` All datasets should have the same length. \"\"\" super ( JointDataset , self ) . __init__ () self . datasets = datasets # check the length of sub-datasets are the same. assert len ( set ([ len ( d ) for d in self . datasets . values ()])) == 1 def __len__ ( self ) -> int : \"\"\"Get the number of samples in the joint dataset. Returns: int: the number of samples in the joint dataset, which is the same as the number of samples in each dataset contained. \"\"\" for d in self . datasets . values (): return len ( d ) def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> Dict [ str , ChoiceDataset ]: \"\"\"Queries samples from the dataset by index. Args: indices (Union[int, torch.LongTensor]): an integer or a 1D tensor of multiple indices. Returns: Dict[str, ChoiceDataset]: the subset of the dataset. Keys of the dictionary will be names of each dataset contained (the same as the keys of the ``datasets`` argument in the constructor). Values will be subsets of contained datasets, sliced using the provided indices. \"\"\" return dict (( name , d [ indices ]) for ( name , d ) in self . datasets . items ()) def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" out = [ f 'JointDataset with { len ( self . datasets ) } sub-datasets: (' ] for name , dataset in self . datasets . items (): out . append ( f ' \\t { name } : { str ( dataset ) } ' ) out . append ( ')' ) return ' \\n ' . join ( out ) @property def device ( self ) -> str : \"\"\"Returns the device of datasets contained in the joint dataset. Returns: str: the device of the dataset. \"\"\" for d in self . datasets . values (): return d . device def to ( self , device : Union [ str , torch . device ]) -> \"JointDataset\" : \"\"\"Moves all datasets in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" for d in self . datasets . values (): d = d . to ( device ) return self def clone ( self ) -> \"JointDataset\" : \"\"\"Returns a copy of the dataset. Returns: JointDataset: a copy of the dataset. \"\"\" return JointDataset ( ** { name : d . clone () for ( name , d ) in self . datasets . items ()}) @property def item_index ( self ) -> torch . LongTensor : \"\"\"Returns the current index of each dataset. Returns: torch.LongTensor: the indices of items chosen. \"\"\" return self . datasets [ \"item\" ] . item_index","title":"to()"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.device","text":"Returns the device of datasets contained in the joint dataset. Returns: Name Type Description str str the device of the dataset.","title":"device"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.item_index","text":"Returns the current index of each dataset. Returns: Type Description torch . LongTensor torch.LongTensor: the indices of items chosen.","title":"item_index"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.__getitem__","text":"Queries samples from the dataset by index. Parameters: Name Type Description Default indices Union [ int , torch . LongTensor ] an integer or a 1D tensor of multiple indices. required Returns: Type Description Dict [ str , ChoiceDataset ] Dict[str, ChoiceDataset]: the subset of the dataset. Keys of the dictionary will be names of each dataset contained (the same as the keys of the datasets argument in the constructor). Values will be subsets of contained datasets, sliced using the provided indices. Source code in torch_choice/data/joint_dataset.py 55 56 57 58 59 60 61 62 63 64 65 66 def __getitem__ ( self , indices : Union [ int , torch . LongTensor ]) -> Dict [ str , ChoiceDataset ]: \"\"\"Queries samples from the dataset by index. Args: indices (Union[int, torch.LongTensor]): an integer or a 1D tensor of multiple indices. Returns: Dict[str, ChoiceDataset]: the subset of the dataset. Keys of the dictionary will be names of each dataset contained (the same as the keys of the ``datasets`` argument in the constructor). Values will be subsets of contained datasets, sliced using the provided indices. \"\"\" return dict (( name , d [ indices ]) for ( name , d ) in self . datasets . items ())","title":"__getitem__()"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.__init__","text":"The initialize methods. Source code in torch_choice/data/joint_dataset.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , ** datasets ) -> None : \"\"\"The initialize methods. Args: Arbitrarily many datasets with arbitrary names as keys. In the example above, you can construct ``` dataset = JointDataset(food=FoodDataset, drink=DrinkDataset) ``` All datasets should have the same length. \"\"\" super ( JointDataset , self ) . __init__ () self . datasets = datasets # check the length of sub-datasets are the same. assert len ( set ([ len ( d ) for d in self . datasets . values ()])) == 1","title":"__init__()"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.__len__","text":"Get the number of samples in the joint dataset. Returns: Name Type Description int int the number of samples in the joint dataset, which is the same as the number of samples in each dataset contained. Source code in torch_choice/data/joint_dataset.py 46 47 48 49 50 51 52 53 def __len__ ( self ) -> int : \"\"\"Get the number of samples in the joint dataset. Returns: int: the number of samples in the joint dataset, which is the same as the number of samples in each dataset contained. \"\"\" for d in self . datasets . values (): return len ( d )","title":"__len__()"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.__repr__","text":"A method to get a string representation of the dataset. Returns: Name Type Description str str the string representation of the dataset. Source code in torch_choice/data/joint_dataset.py 68 69 70 71 72 73 74 75 76 77 78 def __repr__ ( self ) -> str : \"\"\"A method to get a string representation of the dataset. Returns: str: the string representation of the dataset. \"\"\" out = [ f 'JointDataset with { len ( self . datasets ) } sub-datasets: (' ] for name , dataset in self . datasets . items (): out . append ( f ' \\t { name } : { str ( dataset ) } ' ) out . append ( ')' ) return ' \\n ' . join ( out )","title":"__repr__()"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.clone","text":"Returns a copy of the dataset. Returns: Name Type Description JointDataset JointDataset a copy of the dataset. Source code in torch_choice/data/joint_dataset.py 103 104 105 106 107 108 109 def clone ( self ) -> \"JointDataset\" : \"\"\"Returns a copy of the dataset. Returns: JointDataset: a copy of the dataset. \"\"\" return JointDataset ( ** { name : d . clone () for ( name , d ) in self . datasets . items ()})","title":"clone()"},{"location":"api_torch_choice/#torch_choice.data.joint_dataset.JointDataset.to","text":"Moves all datasets in this dataset to the specified PyTorch device. Parameters: Name Type Description Default device Union [ str , torch . device ] the destination device. required Returns: Name Type Description ChoiceDataset JointDataset the modified dataset on the new device. Source code in torch_choice/data/joint_dataset.py 90 91 92 93 94 95 96 97 98 99 100 101 def to ( self , device : Union [ str , torch . device ]) -> \"JointDataset\" : \"\"\"Moves all datasets in this dataset to the specified PyTorch device. Args: device (Union[str, torch.device]): the destination device. Returns: ChoiceDataset: the modified dataset on the new device. \"\"\" for d in self . datasets . values (): d = d . to ( device ) return self Bases: nn . Module The more generalized version of conditional logit model, the model allows for research specific variable types(groups) and different levels of variations for coefficient. The model allows for the following levels for variable variations: unless the -full flag is specified (which means we want to explicitly model coefficients for all items), for all variation levels related to item (item specific and user-item specific), the model force coefficients for the first item to be zero. This design follows standard econometric practice. constant: constant over all users and items, user: user-specific parameters but constant across all items, item: item-specific parameters but constant across all users, parameters for the first item are forced to be zero. item-full: item-specific parameters but constant across all users, explicitly model for all items. user-item: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. user-item-full: parameters that are specific to both user and item, explicitly model for all items. Source code in torch_choice/model/conditional_logit_model.pyclass ConditionalLogitModel ( nn . Module ): \"\"\"The more generalized version of conditional logit model, the model allows for research specific variable types(groups) and different levels of variations for coefficient. The model allows for the following levels for variable variations: NOTE: unless the `-full` flag is specified (which means we want to explicitly model coefficients for all items), for all variation levels related to item (item specific and user-item specific), the model force coefficients for the first item to be zero. This design follows standard econometric practice. - constant: constant over all users and items, - user: user-specific parameters but constant across all items, - item: item-specific parameters but constant across all users, parameters for the first item are forced to be zero. - item-full: item-specific parameters but constant across all users, explicitly model for all items. - user-item: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. - user-item-full: parameters that are specific to both user and item, explicitly model for all items. \"\"\" def __init__ ( self , formula : Optional [ str ] = None , dataset : Optional [ ChoiceDataset ] = None , coef_variation_dict : Optional [ Dict [ str , str ]] = None , num_param_dict : Optional [ Dict [ str , int ]] = None , num_items : Optional [ int ] = None , num_users : Optional [ int ] = None , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\" Args: formula (str): a string representing the utility formula. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. data (ChoiceDataset): a ChoiceDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients from the ChoiceDataset. coef_variation_dict (Dict[str, str]): variable type to variation level dictionary. Keys of this dictionary should be variable names in the dataset (i.e., these starting with `itemsession_`, `price_`, `user_`, etc), or `intercept` if the researcher requires an intercept term. For each variable name X_var (e.g., `user_income`) or `intercept`, the corresponding dictionary key should be one of the following values, this value specifies the \"level of variation\" of the coefficient. - `constant`: the coefficient constant over all users and items: $X \\beta$. - `user`: user-specific parameters but constant across all items: $X \\beta_{u}$. - `item`: item-specific parameters but constant across all users, $X \\beta_{i}$. Note that the coefficients for the first item are forced to be zero following the standard practice in econometrics. - `item-full`: the same configuration as `item`, but does not force the coefficients of the first item to be zeros. The following configurations are supported by the package, but we don't recommend using them due to the large number of parameters. - `user-item`: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. - `user-item-full`: parameters that are specific to both user and item, explicitly model for all items. num_param_dict (Optional[Dict[str, int]]): variable type to number of parameters dictionary with keys exactly the same as the `coef_variation_dict`. Values of `num_param_dict` records numbers of features in each kind of variable. If None is supplied, num_param_dict will be a dictionary with the same keys as the `coef_variation_dict` dictionary and values of all ones. Default to be None. num_items (int): number of items in the dataset. num_users (int): number of users in the dataset. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. weight_initialization (Optional[Union[str, Dict[str, str]]]): controls for how coefficients are initialized; users can pass a string from {'normal', 'uniform', 'zero'} to initialize all coefficients in the same way. Alternatively, users can pass a dictionary with keys exactly the same as the `coef_variation_dict` dictionary, and values from {'normal', 'uniform', 'zero'} to initialize coefficients of different types of variables differently. By default, all coefficients are initialized following a standard normal distribution. \"\"\" # ============================================================================================================== # Check that the model received a valid combination of inputs so that it can be initialized. # ============================================================================================================== if coef_variation_dict is None and formula is None : raise ValueError ( \"Either coef_variation_dict or formula should be provided to specify the model.\" ) if ( coef_variation_dict is not None ) and ( formula is not None ): raise ValueError ( \"Only one of coef_variation_dict or formula should be provided to specify the model.\" ) if ( formula is not None ) and ( dataset is None ): raise ValueError ( \"If formula is provided, data should be provided to specify the model.\" ) # ============================================================================================================== # Build necessary dictionaries for model initialization. # ============================================================================================================== if formula is None : # Use dictionaries to initialize the model. if num_param_dict is None : warnings . warn ( \"`num_param_dict` is not provided, all variables will be treated as having one parameter.\" ) num_param_dict = { key : 1 for key in coef_variation_dict . keys ()} assert coef_variation_dict . keys () == num_param_dict . keys () # variable `var` with variation `spec` to variable `var[spec]`. rename = dict () # old variable name --> new variable name. for variable , specificity in coef_variation_dict . items (): rename [ variable ] = f \" { variable } [ { specificity } ]\" for old_name , new_name in rename . items (): coef_variation_dict [ new_name ] = coef_variation_dict . pop ( old_name ) num_param_dict [ new_name ] = num_param_dict . pop ( old_name ) else : # Use the formula to infer model. coef_variation_dict , num_param_dict = parse_formula ( formula , dataset ) # ============================================================================================================== # Model Initialization. # ============================================================================================================== super ( ConditionalLogitModel , self ) . __init__ () self . coef_variation_dict = deepcopy ( coef_variation_dict ) self . num_param_dict = deepcopy ( num_param_dict ) self . num_items = num_items self . num_users = num_users self . regularization = deepcopy ( regularization ) assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) # check number of parameters specified are all positive. for var_type , num_params in self . num_param_dict . items (): assert num_params > 0 , f 'num_params needs to be positive, got: { num_params } .' # infer the number of parameters for intercept if the researcher forgets. for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ) and variable not in self . num_param_dict . keys (): warnings . warn ( f \"` { variable } ` key found in coef_variation_dict but not in num_param_dict, num_param_dict[' { variable } '] has been set to 1.\" ) self . num_param_dict [ variable ] = 1 # inform coefficients their ways of being initialized. self . weight_initialization = deepcopy ( weight_initialization ) # construct trainable parameters. coef_dict = dict () for var_type , variation in self . coef_variation_dict . items (): if isinstance ( self . weight_initialization , dict ): if var_type . split ( '[' )[ 0 ] in self . weight_initialization . keys (): # use the variable-specific initialization if provided. init = self . weight_initialization [ var_type . split ( '[' )[ 0 ]] else : # use default initialization. init = None else : # initialize all coefficients in the same way. init = self . weight_initialization coef_dict [ var_type ] = Coefficient ( variation = variation , num_items = self . num_items , num_users = self . num_users , num_params = self . num_param_dict [ var_type ], init = init ) # A ModuleDict is required to properly register all trainable parameters. # self.parameter() will fail if a python dictionary is used instead. self . coef_dict = nn . ModuleDict ( coef_dict ) def __repr__ ( self ) -> str : \"\"\"Return a string representation of the model. Returns: str: the string representation of the model. \"\"\" out_str_lst = [ 'Conditional logistic discrete choice model, expects input features: \\n ' ] for var_type , num_params in self . num_param_dict . items (): out_str_lst . append ( f 'X[ { var_type } ] with { num_params } parameters, with { self . coef_variation_dict [ var_type ] } level variation.' ) return super () . __repr__ () + ' \\n ' + ' \\n ' . join ( out_str_lst ) + ' \\n ' + f 'device= { self . device } ' @property def num_params ( self ) -> int : \"\"\"Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: int: the total number of learnable parameters. \"\"\" return sum ( w . numel () for w in self . parameters ()) def summary ( self ): \"\"\"Print out the current model parameter.\"\"\" for var_type , coefficient in self . coef_dict . items (): if coefficient is not None : print ( 'Variable Type: ' , var_type ) print ( coefficient . coef ) def forward ( self , batch : ChoiceDataset , manual_coef_value_dict : Optional [ Dict [ str , torch . Tensor ]] = None ) -> torch . Tensor : \"\"\" Forward pass of the model. Args: batch: a `ChoiceDataset` object. manual_coef_value_dict (Optional[Dict[str, torch.Tensor]], optional): a dictionary with keys in {'u', 'i'} etc and tensors as values. If provided, the model will force coefficient to be the provided values and compute utility conditioned on the provided coefficient values. This feature is useful when the research wishes to plug in particular values of coefficients and examine the utility values. If not provided, the model will use the learned coefficient values in self.coef_dict. Defaults to None. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) whose (t, i) entry represents the utility from item i in trip t for the user involved in that trip. \"\"\" x_dict = batch . x_dict for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ): # intercept term has no input tensor from the ChoiceDataset data structure. # the tensor for intercept has only 1 feature, every entry is 1. x_dict [ 'intercept' ] = torch . ones (( len ( batch ), self . num_items , 1 ), device = batch . device ) break # compute the utility from each item in each choice session. total_utility = torch . zeros (( len ( batch ), self . num_items ), device = batch . device ) # for each type of variables, apply the corresponding coefficient to input x. for var_type , coef in self . coef_dict . items (): # variable type is named as \"observable_name[variation]\", retrieve the corresponding observable name. corresponding_observable = var_type . split ( \"[\" )[ 0 ] total_utility += coef ( x_dict [ corresponding_observable ], batch . user_index , manual_coef_value = None if manual_coef_value_dict is None else manual_coef_value_dict [ var_type ]) assert total_utility . shape == ( len ( batch ), self . num_items ) if batch . item_availability is not None : # mask out unavailable items. total_utility [ ~ batch . item_availability [ batch . session_index , :]] = torch . finfo ( total_utility . dtype ) . min / 2 return total_utility def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . Tensor , is_train : bool = True ) -> torch . Tensor : \"\"\"Computes the log-likelihood for the batch and label. TODO: consider remove y, change to label. TODO: consider move this method outside the model, the role of the model is to compute the utility. Args: batch (ChoiceDataset): a ChoiceDataset object containing the data. y (torch.Tensor): the label. is_train (bool, optional): whether to trace the gradient. Defaults to True. Returns: torch.Tensor: the negative log-likelihood. \"\"\" if is_train : self . train () else : self . eval () # (num_trips, num_items) total_utility = self . forward ( batch ) logP = torch . log_softmax ( total_utility , dim = 1 ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for param in self . parameters (): nll += self . regularization_weight * torch . norm ( param , p = L ) return nll @property def device ( self ) -> torch . device : \"\"\"Returns the device of the coefficient. Returns: torch.device: the device of the model. \"\"\" return next ( iter ( self . coef_dict . values ())) . device @staticmethod def is_intercept_term ( variable : str ): # check if the given variable is an intercept (fixed effect) term. # intercept (fixed effect) terms are defined as 'intercept[*]' and looks like 'intercept[user]', 'intercept[item]', etc. return ( variable . startswith ( 'intercept[' ) and variable . endswith ( ']' )) def get_coefficient ( self , variable : str ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" return self . state_dict ()[ f \"coef_dict. { variable } .coef\" ] . detach () . clone ()","title":"to()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.device","text":"Returns the device of the coefficient. Returns: Type Description torch . device torch.device: the device of the model.","title":"device"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.num_params","text":"Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: Name Type Description int int the total number of learnable parameters.","title":"num_params"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.__init__","text":"Parameters: Name Type Description Default formula str a string representing the utility formula. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. None data ChoiceDataset a ChoiceDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients from the ChoiceDataset. required coef_variation_dict Dict [ str , str ] variable type to variation level dictionary. Keys of this dictionary should be variable names in the dataset (i.e., these starting with itemsession_ , price_ , user_ , etc), or intercept if the researcher requires an intercept term. For each variable name X_var (e.g., user_income ) or intercept , the corresponding dictionary key should be one of the following values, this value specifies the \"level of variation\" of the coefficient. constant : the coefficient constant over all users and items: \\(X \beta\\) . user : user-specific parameters but constant across all items: \\(X \beta_{u}\\) . item : item-specific parameters but constant across all users, \\(X \beta_{i}\\) . Note that the coefficients for the first item are forced to be zero following the standard practice in econometrics. item-full : the same configuration as item , but does not force the coefficients of the first item to be zeros. The following configurations are supported by the package, but we don't recommend using them due to the large number of parameters. - user-item : parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. user-item-full : parameters that are specific to both user and item, explicitly model for all items. None num_param_dict Optional [ Dict [ str , int ]] variable type to number of parameters dictionary with keys exactly the same as the coef_variation_dict . Values of num_param_dict records numbers of features in each kind of variable. If None is supplied, num_param_dict will be a dictionary with the same keys as the coef_variation_dict dictionary and values of all ones. Default to be None. None num_items int number of items in the dataset. None num_users int number of users in the dataset. None regularization Optional [ str ] this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. None regularization_weight Optional [ float ] the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. None weight_initialization Optional [ Union [ str , Dict [ str , str ]]] controls for how coefficients are initialized; users can pass a string from {'normal', 'uniform', 'zero'} to initialize all coefficients in the same way. Alternatively, users can pass a dictionary with keys exactly the same as the coef_variation_dict dictionary, and values from {'normal', 'uniform', 'zero'} to initialize coefficients of different types of variables differently. By default, all coefficients are initialized following a standard normal distribution. None Source code in torch_choice/model/conditional_logit_model.pydef __init__ ( self , formula : Optional [ str ] = None , dataset : Optional [ ChoiceDataset ] = None , coef_variation_dict : Optional [ Dict [ str , str ]] = None , num_param_dict : Optional [ Dict [ str , int ]] = None , num_items : Optional [ int ] = None , num_users : Optional [ int ] = None , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\" Args: formula (str): a string representing the utility formula. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. data (ChoiceDataset): a ChoiceDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients from the ChoiceDataset. coef_variation_dict (Dict[str, str]): variable type to variation level dictionary. Keys of this dictionary should be variable names in the dataset (i.e., these starting with `itemsession_`, `price_`, `user_`, etc), or `intercept` if the researcher requires an intercept term. For each variable name X_var (e.g., `user_income`) or `intercept`, the corresponding dictionary key should be one of the following values, this value specifies the \"level of variation\" of the coefficient. - `constant`: the coefficient constant over all users and items: $X \\beta$. - `user`: user-specific parameters but constant across all items: $X \\beta_{u}$. - `item`: item-specific parameters but constant across all users, $X \\beta_{i}$. Note that the coefficients for the first item are forced to be zero following the standard practice in econometrics. - `item-full`: the same configuration as `item`, but does not force the coefficients of the first item to be zeros. The following configurations are supported by the package, but we don't recommend using them due to the large number of parameters. - `user-item`: parameters that are specific to both user and item, parameter for the first item for all users are forced to be zero. - `user-item-full`: parameters that are specific to both user and item, explicitly model for all items. num_param_dict (Optional[Dict[str, int]]): variable type to number of parameters dictionary with keys exactly the same as the `coef_variation_dict`. Values of `num_param_dict` records numbers of features in each kind of variable. If None is supplied, num_param_dict will be a dictionary with the same keys as the `coef_variation_dict` dictionary and values of all ones. Default to be None. num_items (int): number of items in the dataset. num_users (int): number of users in the dataset. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. weight_initialization (Optional[Union[str, Dict[str, str]]]): controls for how coefficients are initialized; users can pass a string from {'normal', 'uniform', 'zero'} to initialize all coefficients in the same way. Alternatively, users can pass a dictionary with keys exactly the same as the `coef_variation_dict` dictionary, and values from {'normal', 'uniform', 'zero'} to initialize coefficients of different types of variables differently. By default, all coefficients are initialized following a standard normal distribution. \"\"\" # ============================================================================================================== # Check that the model received a valid combination of inputs so that it can be initialized. # ============================================================================================================== if coef_variation_dict is None and formula is None : raise ValueError ( \"Either coef_variation_dict or formula should be provided to specify the model.\" ) if ( coef_variation_dict is not None ) and ( formula is not None ): raise ValueError ( \"Only one of coef_variation_dict or formula should be provided to specify the model.\" ) if ( formula is not None ) and ( dataset is None ): raise ValueError ( \"If formula is provided, data should be provided to specify the model.\" ) # ============================================================================================================== # Build necessary dictionaries for model initialization. # ============================================================================================================== if formula is None : # Use dictionaries to initialize the model. if num_param_dict is None : warnings . warn ( \"`num_param_dict` is not provided, all variables will be treated as having one parameter.\" ) num_param_dict = { key : 1 for key in coef_variation_dict . keys ()} assert coef_variation_dict . keys () == num_param_dict . keys () # variable `var` with variation `spec` to variable `var[spec]`. rename = dict () # old variable name --> new variable name. for variable , specificity in coef_variation_dict . items (): rename [ variable ] = f \" { variable } [ { specificity } ]\" for old_name , new_name in rename . items (): coef_variation_dict [ new_name ] = coef_variation_dict . pop ( old_name ) num_param_dict [ new_name ] = num_param_dict . pop ( old_name ) else : # Use the formula to infer model. coef_variation_dict , num_param_dict = parse_formula ( formula , dataset ) # ============================================================================================================== # Model Initialization. # ============================================================================================================== super ( ConditionalLogitModel , self ) . __init__ () self . coef_variation_dict = deepcopy ( coef_variation_dict ) self . num_param_dict = deepcopy ( num_param_dict ) self . num_items = num_items self . num_users = num_users self . regularization = deepcopy ( regularization ) assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) # check number of parameters specified are all positive. for var_type , num_params in self . num_param_dict . items (): assert num_params > 0 , f 'num_params needs to be positive, got: { num_params } .' # infer the number of parameters for intercept if the researcher forgets. for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ) and variable not in self . num_param_dict . keys (): warnings . warn ( f \"` { variable } ` key found in coef_variation_dict but not in num_param_dict, num_param_dict[' { variable } '] has been set to 1.\" ) self . num_param_dict [ variable ] = 1 # inform coefficients their ways of being initialized. self . weight_initialization = deepcopy ( weight_initialization ) # construct trainable parameters. coef_dict = dict () for var_type , variation in self . coef_variation_dict . items (): if isinstance ( self . weight_initialization , dict ): if var_type . split ( '[' )[ 0 ] in self . weight_initialization . keys (): # use the variable-specific initialization if provided. init = self . weight_initialization [ var_type . split ( '[' )[ 0 ]] else : # use default initialization. init = None else : # initialize all coefficients in the same way. init = self . weight_initialization coef_dict [ var_type ] = Coefficient ( variation = variation , num_items = self . num_items , num_users = self . num_users , num_params = self . num_param_dict [ var_type ], init = init ) # A ModuleDict is required to properly register all trainable parameters. # self.parameter() will fail if a python dictionary is used instead. self . coef_dict = nn . ModuleDict ( coef_dict )","title":"__init__()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.__repr__","text":"Return a string representation of the model. Returns: Name Type Description str str the string representation of the model. Source code in torch_choice/model/conditional_logit_model.py 201 202 203 204 205 206 207 208 209 210 def __repr__ ( self ) -> str : \"\"\"Return a string representation of the model. Returns: str: the string representation of the model. \"\"\" out_str_lst = [ 'Conditional logistic discrete choice model, expects input features: \\n ' ] for var_type , num_params in self . num_param_dict . items (): out_str_lst . append ( f 'X[ { var_type } ] with { num_params } parameters, with { self . coef_variation_dict [ var_type ] } level variation.' ) return super () . __repr__ () + ' \\n ' + ' \\n ' . join ( out_str_lst ) + ' \\n ' + f 'device= { self . device } '","title":"__repr__()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.forward","text":"Forward pass of the model. Parameters: Name Type Description Default batch ChoiceDataset a ChoiceDataset object. required manual_coef_value_dict Optional [ Dict [ str , torch . Tensor ]] a dictionary with keys in {'u', 'i'} etc and tensors as values. If provided, the model will force coefficient to be the provided values and compute utility conditioned on the provided coefficient values. This feature is useful when the research wishes to plug in particular values of coefficients and examine the utility values. If not provided, the model will use the learned coefficient values in self.coef_dict. Defaults to None. None Returns: Type Description torch . Tensor torch.Tensor: a tensor of shape (num_trips, num_items) whose (t, i) entry represents the utility from item i in trip t for the user involved in that trip. Source code in torch_choice/model/conditional_logit_model.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 def forward ( self , batch : ChoiceDataset , manual_coef_value_dict : Optional [ Dict [ str , torch . Tensor ]] = None ) -> torch . Tensor : \"\"\" Forward pass of the model. Args: batch: a `ChoiceDataset` object. manual_coef_value_dict (Optional[Dict[str, torch.Tensor]], optional): a dictionary with keys in {'u', 'i'} etc and tensors as values. If provided, the model will force coefficient to be the provided values and compute utility conditioned on the provided coefficient values. This feature is useful when the research wishes to plug in particular values of coefficients and examine the utility values. If not provided, the model will use the learned coefficient values in self.coef_dict. Defaults to None. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) whose (t, i) entry represents the utility from item i in trip t for the user involved in that trip. \"\"\" x_dict = batch . x_dict for variable in self . coef_variation_dict . keys (): if self . is_intercept_term ( variable ): # intercept term has no input tensor from the ChoiceDataset data structure. # the tensor for intercept has only 1 feature, every entry is 1. x_dict [ 'intercept' ] = torch . ones (( len ( batch ), self . num_items , 1 ), device = batch . device ) break # compute the utility from each item in each choice session. total_utility = torch . zeros (( len ( batch ), self . num_items ), device = batch . device ) # for each type of variables, apply the corresponding coefficient to input x. for var_type , coef in self . coef_dict . items (): # variable type is named as \"observable_name[variation]\", retrieve the corresponding observable name. corresponding_observable = var_type . split ( \"[\" )[ 0 ] total_utility += coef ( x_dict [ corresponding_observable ], batch . user_index , manual_coef_value = None if manual_coef_value_dict is None else manual_coef_value_dict [ var_type ]) assert total_utility . shape == ( len ( batch ), self . num_items ) if batch . item_availability is not None : # mask out unavailable items. total_utility [ ~ batch . item_availability [ batch . session_index , :]] = torch . finfo ( total_utility . dtype ) . min / 2 return total_utility","title":"forward()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.get_coefficient","text":"Retrieve the coefficient tensor for the given variable. Parameters: Name Type Description Default variable str the variable name. required Returns: Type Description torch . Tensor torch.Tensor: the corresponding coefficient tensor of the requested variable. Source code in torch_choice/model/conditional_logit_model.py 328 329 330 331 332 333 334 335 336 337 def get_coefficient ( self , variable : str ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" return self . state_dict ()[ f \"coef_dict. { variable } .coef\" ] . detach () . clone ()","title":"get_coefficient()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.loss","text":"The loss function to be optimized. This is a wrapper of negative_log_likelihood + regularization loss if required. Source code in torch_choice/model/conditional_logit_model.py 304 305 306 307 308 309 310 311 def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for param in self . parameters (): nll += self . regularization_weight * torch . norm ( param , p = L ) return nll","title":"loss()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.negative_log_likelihood","text":"Computes the log-likelihood for the batch and label. TODO: consider remove y, change to label. TODO: consider move this method outside the model, the role of the model is to compute the utility. Parameters: Name Type Description Default batch ChoiceDataset a ChoiceDataset object containing the data. required y torch . Tensor the label. required is_train bool whether to trace the gradient. Defaults to True. True Returns: Type Description torch . Tensor torch.Tensor: the negative log-likelihood. Source code in torch_choice/model/conditional_logit_model.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . Tensor , is_train : bool = True ) -> torch . Tensor : \"\"\"Computes the log-likelihood for the batch and label. TODO: consider remove y, change to label. TODO: consider move this method outside the model, the role of the model is to compute the utility. Args: batch (ChoiceDataset): a ChoiceDataset object containing the data. y (torch.Tensor): the label. is_train (bool, optional): whether to trace the gradient. Defaults to True. Returns: torch.Tensor: the negative log-likelihood. \"\"\" if is_train : self . train () else : self . eval () # (num_trips, num_items) total_utility = self . forward ( batch ) logP = torch . log_softmax ( total_utility , dim = 1 ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll","title":"negative_log_likelihood()"},{"location":"api_torch_choice/#torch_choice.model.conditional_logit_model.ConditionalLogitModel.summary","text":"Print out the current model parameter. Source code in torch_choice/model/conditional_logit_model.py 223 224 225 226 227 228 def summary ( self ): \"\"\"Print out the current model parameter.\"\"\" for var_type , coefficient in self . coef_dict . items (): if coefficient is not None : print ( 'Variable Type: ' , var_type ) print ( coefficient . coef ) Bases: nn . Module Source code in torch_choice/model/nested_logit_model.pyclass NestedLogitModel ( nn . Module ): def __init__ ( self , nest_to_item : Dict [ object , List [ int ]], # method 1: specify variation and num param. dictionary. nest_coef_variation_dict : Optional [ Dict [ str , str ]] = None , nest_num_param_dict : Optional [ Dict [ str , int ]] = None , item_coef_variation_dict : Optional [ Dict [ str , str ]] = None , item_num_param_dict : Optional [ Dict [ str , int ]] = None , # method 2: specify formula and dataset. item_formula : Optional [ str ] = None , nest_formula : Optional [ str ] = None , dataset : Optional [ JointDataset ] = None , num_users : Optional [ int ] = None , shared_lambda : bool = False , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , nest_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None , item_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\"Initialization method of the nested logit model. Args: nest_to_item (Dict[object, List[int]]): a dictionary maps a nest ID to a list of items IDs of the queried nest. nest_coef_variation_dict (Dict[str, str]): a dictionary maps a variable type (i.e., variable group) to the level of variation for the coefficient of this type of variables. nest_num_param_dict (Dict[str, int]): a dictionary maps a variable type name to the number of parameters in this variable group. item_coef_variation_dict (Dict[str, str]): the same as nest_coef_variation_dict but for item features. item_num_param_dict (Dict[str, int]): the same as nest_num_param_dict but for item features. {nest, item}_formula (str): a string representing the utility formula for the {nest, item} level logit model. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. dataset (JointDataset): a JointDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients for the nest level model from dataset.datasets['nest']. The parser will infer dimensions of variables and sizes of coefficients for the item level model from dataset.datasets['item']. num_users (Optional[int], optional): number of users to be modelled, this is only required if any of variable type requires user-specific variations. Defaults to None. shared_lambda (bool): a boolean indicating whether to enforce the elasticity lambda, which is the coefficient for inclusive values, to be constant for all nests. The lambda enters the nest-level selection as the following Utility of choosing nest k = lambda * inclusive value of nest k + linear combination of some other nest level features If set to True, a single lambda will be learned for all nests, otherwise, the model learns an individual lambda for each nest. Defaults to False. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. {nest, item}_weight_initialization (Optional[Union[str, Dict[str, str]]]): methods to initialize the weights of coefficients for {nest, item} level model. Please refer to the `weight_initialization` keyword in ConditionalLogitModel's documentation for more details. \"\"\" # handle nest level model. using_formula_to_initiate = ( item_formula is not None ) and ( nest_formula is not None ) if using_formula_to_initiate : # make sure that the research does not specify duplicated information, which might cause conflict. if ( nest_coef_variation_dict is not None ) or ( item_coef_variation_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_coef_variation_dict at the same time.' ) if ( nest_num_param_dict is not None ) or ( item_num_param_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_num_param_dict at the same time.' ) if dataset is None : raise ValueError ( 'Dataset is required if {item, nest}_formula is specified to initiate the model.' ) nest_coef_variation_dict , nest_num_param_dict = parse_formula ( nest_formula , dataset . datasets [ 'nest' ]) item_coef_variation_dict , item_num_param_dict = parse_formula ( item_formula , dataset . datasets [ 'item' ]) else : # check for conflicting information. if ( nest_formula is not None ) or ( item_formula is not None ): raise ValueError ( 'You should not specify {item, nest}_formula and {item, nest}_coef_variation_dict at the same time.' ) # make sure that the research specifies all the required information. if ( nest_coef_variation_dict is None ) or ( item_coef_variation_dict is None ): raise ValueError ( 'You should specify the {item, nest}_coef_variation_dict to initiate the model.' ) if ( nest_num_param_dict is None ) or ( item_num_param_dict is None ): raise ValueError ( 'You should specify the {item, nest}_num_param_dict to initiate the model.' ) super ( NestedLogitModel , self ) . __init__ () self . nest_to_item = nest_to_item self . nest_coef_variation_dict = nest_coef_variation_dict self . nest_num_param_dict = nest_num_param_dict self . item_coef_variation_dict = item_coef_variation_dict self . item_num_param_dict = item_num_param_dict self . num_users = num_users self . nests = list ( nest_to_item . keys ()) self . num_nests = len ( self . nests ) self . num_items = sum ( len ( items ) for items in nest_to_item . values ()) # nest coefficients. self . nest_coef_dict = self . _build_coef_dict ( self . nest_coef_variation_dict , self . nest_num_param_dict , self . num_nests , weight_initialization = deepcopy ( nest_weight_initialization )) # item coefficients. self . item_coef_dict = self . _build_coef_dict ( self . item_coef_variation_dict , self . item_num_param_dict , self . num_items , weight_initialization = deepcopy ( item_weight_initialization )) self . shared_lambda = shared_lambda if self . shared_lambda : self . lambda_weight = nn . Parameter ( torch . ones ( 1 ), requires_grad = True ) else : self . lambda_weight = nn . Parameter ( torch . ones ( self . num_nests ) / 2 , requires_grad = True ) # breakpoint() # self.iv_weights = nn.Parameter(torch.ones(1), requires_grad=True) # used to warn users if forgot to call clamp. self . _clamp_called_flag = True self . regularization = regularization assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' ) @property def num_params ( self ) -> int : \"\"\"Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: int: the total number of learnable parameters. \"\"\" return sum ( w . numel () for w in self . parameters ()) def _build_coef_dict ( self , coef_variation_dict : Dict [ str , str ], num_param_dict : Dict [ str , int ], num_items : int , weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> nn . ModuleDict : \"\"\"Builds a coefficient dictionary containing all trainable components of the model, mapping coefficient names to the corresponding Coefficient Module. num_items could be the actual number of items or the number of nests depends on the use case. NOTE: torch-choice users don't directly interact with this method. Args: coef_variation_dict (Dict[str, str]): a dictionary mapping coefficient names (e.g., theta_user) to the level of variation (e.g., 'user'). num_param_dict (Dict[str, int]): a dictionary mapping coefficient names to the number of parameters in this coefficient. Be aware that, for example, if there is one K-dimensional coefficient for every user, then the `num_param` should be K instead of K x number of users. num_items (int): the total number of items in the prediction problem. `num_items` should be the number of nests if _build_coef_dict() is used for nest-level prediction. Returns: nn.ModuleDict: a PyTorch ModuleDict object mapping from coefficient names to training Coefficient. \"\"\" coef_dict = dict () for var_type , variation in coef_variation_dict . items (): num_params = num_param_dict [ var_type ] if isinstance ( weight_initialization , dict ): if var_type . split ( '[' )[ 0 ] in weight_initialization . keys (): # use the variable-specific initialization if provided. init = weight_initialization [ var_type . split ( '[' )[ 0 ]] else : # use default initialization. init = None else : # initialize all coefficients in the same way. init = weight_initialization coef_dict [ var_type ] = Coefficient ( variation = variation , num_items = num_items , num_users = self . num_users , num_params = num_params , init = init ) return nn . ModuleDict ( coef_dict ) def forward ( self , batch : ChoiceDataset ) -> torch . Tensor : \"\"\"An standard forward method for the model, the user feeds a ChoiceDataset batch and the model returns the predicted log-likelihood tensor. The main forward passing happens in the _forward() method, but we provide this wrapper forward() method for a cleaner API, as forward() only requires a single batch argument. For more details about the forward passing, please refer to the _forward() method. # TODO: the ConditionalLogitModel returns predicted utility, the NestedLogitModel behaves the same? Args: batch (ChoiceDataset): a ChoiceDataset object containing the data batch. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability of choosing item i in trip t. \"\"\" return self . _forward ( batch [ 'nest' ] . x_dict , batch [ 'item' ] . x_dict , batch [ 'item' ] . user_index , batch [ 'item' ] . item_availability ) def _forward ( self , nest_x_dict : Dict [ str , torch . Tensor ], item_x_dict : Dict [ str , torch . Tensor ], user_index : Optional [ torch . LongTensor ] = None , item_availability : Optional [ torch . BoolTensor ] = None ) -> torch . Tensor : \"\"\"\"Computes log P[t, i] = the log probability for the user involved in trip t to choose item i. Let n denote the ID of the user involved in trip t, then P[t, i] = P_{ni} on page 86 of the book \"discrete choice methods with simulation\" by Train. The `_forward` method is an internal API, users should refer to the `forward` method. Args: nest_x_dict (torch.Tensor): a dictionary mapping from nest-level feature names to the corresponding feature tensor. item_x_dict (torch.Tensor): a dictionary mapping from item-level feature names to the corresponding feature tensor. More details on the shape of the tensors can be found in the docstring of the `x_dict` method of `ChoiceDataset`. user_index (torch.LongTensor): a tensor of shape (num_trips,) indicating which user is making decision in each trip. Setting user_index = None assumes the same user is making decisions in all trips. item_availability (torch.BoolTensor): a boolean tensor with shape (num_trips, num_items) indicating the aviliability of items in each trip. If item_availability[t, i] = False, the utility of choosing item i in trip t, V[t, i], will be set to -inf. Given the decomposition V[t, i] = W[t, k(i)] + Y[t, i] + eps, V[t, i] is set to -inf by setting Y[t, i] = -inf for unavilable items. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability of choosing item i in trip t. \"\"\" if self . shared_lambda : self . lambdas = self . lambda_weight . expand ( self . num_nests ) else : self . lambdas = self . lambda_weight # if not self._clamp_called_flag: # warnings.warn('Did you forget to call clamp_lambdas() after optimizer.step()?') # The overall utility of item can be decomposed into V[item] = W[nest] + Y[item] + eps. T = list ( item_x_dict . values ())[ 0 ] . shape [ 0 ] device = list ( item_x_dict . values ())[ 0 ] . device # compute nest-specific utility with shape (T, num_nests). W = torch . zeros ( T , self . num_nests ) . to ( device ) for variable in self . nest_coef_variation_dict . keys (): if self . is_intercept_term ( variable ): nest_x_dict [ 'intercept' ] = torch . ones (( T , self . num_nests , 1 )) . to ( device ) break for variable in self . item_coef_variation_dict . keys (): if self . is_intercept_term ( variable ): item_x_dict [ 'intercept' ] = torch . ones (( T , self . num_items , 1 )) . to ( device ) break for var_type , coef in self . nest_coef_dict . items (): corresponding_observable = var_type . split ( \"[\" )[ 0 ] W += coef ( nest_x_dict [ corresponding_observable ], user_index ) # compute item-specific utility (T, num_items). Y = torch . zeros ( T , self . num_items ) . to ( device ) for var_type , coef in self . item_coef_dict . items (): corresponding_observable = var_type . split ( \"[\" )[ 0 ] Y += coef ( item_x_dict [ corresponding_observable ], user_index ) if item_availability is not None : Y [ ~ item_availability ] = torch . finfo ( Y . dtype ) . min / 2 # ============================================================================= # compute the inclusive value of each nest. inclusive_value = dict () for k , Bk in self . nest_to_item . items (): # for nest k, divide the Y of all items in Bk by lambda_k. Y [:, Bk ] /= self . lambdas [ k ] # compute inclusive value for nest k. # mask out unavilable items. inclusive_value [ k ] = torch . logsumexp ( Y [:, Bk ], dim = 1 , keepdim = False ) # (T,) # boardcast inclusive value from (T, num_nests) to (T, num_items). # for trip t, I[t, i] is the inclusive value of the nest item i belongs to. I = torch . zeros ( T , self . num_items ) . to ( device ) for k , Bk in self . nest_to_item . items (): I [:, Bk ] = inclusive_value [ k ] . view ( - 1 , 1 ) # (T, |Bk|) # logP_item[t, i] = log P(ni|Bk), where Bk is the nest item i is in, n is the user in trip t. logP_item = Y - I # (T, num_items) # ============================================================================= # logP_nest[t, i] = log P(Bk), for item i in trip t, the probability of choosing the nest/bucket # item i belongs to. logP_nest has shape (T, num_items) # logit[t, i] = W[n, k] + lambda[k] I[n, k], where n is the user involved in trip t, k is # the nest item i belongs to. logit = torch . zeros ( T , self . num_items ) . to ( device ) for k , Bk in self . nest_to_item . items (): logit [:, Bk ] = ( W [:, k ] + self . lambdas [ k ] * inclusive_value [ k ]) . view ( - 1 , 1 ) # (T, |Bk|) # only count each nest once in the logsumexp within the nest level model. cols = [ x [ 0 ] for x in self . nest_to_item . values ()] logP_nest = logit - torch . logsumexp ( logit [:, cols ], dim = 1 , keepdim = True ) # ============================================================================= # compute the joint log P_{ni} as in the textbook. logP = logP_item + logP_nest self . _clamp_called_flag = False return logP def log_likelihood ( self , * args ): \"\"\"Computes the log likelihood of the model, please refer to the negative_log_likelihood() method. Returns: _type_: the log likelihood of the model. \"\"\" return - self . negative_log_likelihood ( * args ) def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . LongTensor , is_train : bool = True ) -> torch . scalar_tensor : \"\"\"Computes the negative log likelihood of the model. Please note the log-likelihood is summed over all samples in batch instead of the average. Args: batch (ChoiceDataset): the ChoiceDataset object containing the data. y (torch.LongTensor): the label. is_train (bool, optional): which mode of the model to be used for the forward passing, if we need Hessian of the NLL through auto-grad, `is_train` should be set to True. If we merely need a performance metric, then `is_train` can be set to False for better performance. Defaults to True. Returns: torch.scalar_tensor: the negative log likelihood of the model. \"\"\" # compute the negative log-likelihood loss directly. if is_train : self . train () else : self . eval () # (num_trips, num_items) logP = self . forward ( batch ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for name , param in self . named_parameters (): if name == 'lambda_weight' : # we don't regularize the lambda term, we only regularize coefficients. continue nll += self . regularization_weight * torch . norm ( param , p = L ) return nll @property def device ( self ) -> torch . device : \"\"\"Returns the device of the coefficient. Returns: torch.device: the device of the model. \"\"\" return next ( iter ( self . item_coef_dict . values ())) . device @staticmethod def is_intercept_term ( variable : str ): # check if the given variable is an intercept (fixed effect) term. # intercept (fixed effect) terms are defined as 'intercept[*]' and looks like 'intercept[user]', 'intercept[item]', etc. return ( variable . startswith ( 'intercept[' ) and variable . endswith ( ']' )) def get_coefficient ( self , variable : str , level : Optional [ str ] = None ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. level (str): from which level of model to extract the coefficient, can be 'item' or 'nest'. The `level` argument will be discarded if `variable` is `lambda`. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" if variable == 'lambda' : return self . lambda_weight . detach () . clone () if level not in [ 'item' , 'nest' ]: raise ValueError ( f \"Level should be either 'item' or 'nest', got { level } .\" ) return self . state_dict ()[ f ' { level } _coef_dict. { variable } .coef' ] . detach () . clone ()","title":"summary()"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.device","text":"Returns the device of the coefficient. Returns: Type Description torch . device torch.device: the device of the model.","title":"device"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.num_params","text":"Get the total number of parameters. For example, if there is only an user-specific coefficient to be multiplied with the K-dimensional observable, then the total number of parameters would be K x number of users, assuming no intercept is involved. Returns: Name Type Description int int the total number of learnable parameters.","title":"num_params"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.__init__","text":"Initialization method of the nested logit model. Parameters: Name Type Description Default nest_to_item Dict [ object , List [ int ]] a dictionary maps a nest ID to a list of items IDs of the queried nest. required nest_coef_variation_dict Dict [ str , str ] a dictionary maps a variable type (i.e., variable group) to the level of variation for the coefficient of this type of variables. None nest_num_param_dict Dict [ str , int ] a dictionary maps a variable type name to the number of parameters in this variable group. None item_coef_variation_dict Dict [ str , str ] the same as nest_coef_variation_dict but for item features. None item_num_param_dict Dict [ str , int ] the same as nest_num_param_dict but for item features. None {nest, item}_formula (str a string representing the utility formula for the {nest, item} level logit model. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. required dataset JointDataset a JointDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients for the nest level model from dataset.datasets['nest']. The parser will infer dimensions of variables and sizes of coefficients for the item level model from dataset.datasets['item']. None num_users Optional [ int ] number of users to be modelled, this is only required if any of variable type requires user-specific variations. Defaults to None. None shared_lambda bool a boolean indicating whether to enforce the elasticity lambda, which is the coefficient for inclusive values, to be constant for all nests. The lambda enters the nest-level selection as the following Utility of choosing nest k = lambda * inclusive value of nest k + linear combination of some other nest level features If set to True, a single lambda will be learned for all nests, otherwise, the model learns an individual lambda for each nest. Defaults to False. False regularization Optional [ str ] this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. None regularization_weight Optional [ float ] the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. None {nest, item}_weight_initialization (Optional[Union[str, Dict[str, str]]] methods to initialize the weights of coefficients for {nest, item} level model. Please refer to the weight_initialization keyword in ConditionalLogitModel's documentation for more details. required Source code in torch_choice/model/nested_logit_model.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def __init__ ( self , nest_to_item : Dict [ object , List [ int ]], # method 1: specify variation and num param. dictionary. nest_coef_variation_dict : Optional [ Dict [ str , str ]] = None , nest_num_param_dict : Optional [ Dict [ str , int ]] = None , item_coef_variation_dict : Optional [ Dict [ str , str ]] = None , item_num_param_dict : Optional [ Dict [ str , int ]] = None , # method 2: specify formula and dataset. item_formula : Optional [ str ] = None , nest_formula : Optional [ str ] = None , dataset : Optional [ JointDataset ] = None , num_users : Optional [ int ] = None , shared_lambda : bool = False , regularization : Optional [ str ] = None , regularization_weight : Optional [ float ] = None , nest_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None , item_weight_initialization : Optional [ Union [ str , Dict [ str , str ]]] = None ) -> None : \"\"\"Initialization method of the nested logit model. Args: nest_to_item (Dict[object, List[int]]): a dictionary maps a nest ID to a list of items IDs of the queried nest. nest_coef_variation_dict (Dict[str, str]): a dictionary maps a variable type (i.e., variable group) to the level of variation for the coefficient of this type of variables. nest_num_param_dict (Dict[str, int]): a dictionary maps a variable type name to the number of parameters in this variable group. item_coef_variation_dict (Dict[str, str]): the same as nest_coef_variation_dict but for item features. item_num_param_dict (Dict[str, int]): the same as nest_num_param_dict but for item features. {nest, item}_formula (str): a string representing the utility formula for the {nest, item} level logit model. The formula consists of '(variable_name|variation)'s separated by '+', for example: \"(var1|item) + (var2|user) + (var3|constant)\" where the first part of each term is the name of the variable and the second part is the variation of the coefficient. The variation can be one of the following: 'constant', 'item', 'item-full', 'user', 'user-item', 'user-item-full'. All spaces in the formula will be ignored, hence please do not use spaces in variable/observable names. dataset (JointDataset): a JointDataset object for training the model, the parser will infer dimensions of variables and sizes of coefficients for the nest level model from dataset.datasets['nest']. The parser will infer dimensions of variables and sizes of coefficients for the item level model from dataset.datasets['item']. num_users (Optional[int], optional): number of users to be modelled, this is only required if any of variable type requires user-specific variations. Defaults to None. shared_lambda (bool): a boolean indicating whether to enforce the elasticity lambda, which is the coefficient for inclusive values, to be constant for all nests. The lambda enters the nest-level selection as the following Utility of choosing nest k = lambda * inclusive value of nest k + linear combination of some other nest level features If set to True, a single lambda will be learned for all nests, otherwise, the model learns an individual lambda for each nest. Defaults to False. regularization (Optional[str]): this argument takes values from {'L1', 'L2', None}, which specifies the type of regularization added to the log-likelihood. - 'L1' will subtract regularization_weight * 1-norm of parameters from the log-likelihood. - 'L2' will subtract regularization_weight * 2-norm of parameters from the log-likelihood. - None does not modify the log-likelihood. Defaults to None. regularization_weight (Optional[float]): the weight of parameter norm subtracted from the log-likelihood. This term controls the strength of regularization. This argument is required if and only if regularization is not None. Defaults to None. {nest, item}_weight_initialization (Optional[Union[str, Dict[str, str]]]): methods to initialize the weights of coefficients for {nest, item} level model. Please refer to the `weight_initialization` keyword in ConditionalLogitModel's documentation for more details. \"\"\" # handle nest level model. using_formula_to_initiate = ( item_formula is not None ) and ( nest_formula is not None ) if using_formula_to_initiate : # make sure that the research does not specify duplicated information, which might cause conflict. if ( nest_coef_variation_dict is not None ) or ( item_coef_variation_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_coef_variation_dict at the same time.' ) if ( nest_num_param_dict is not None ) or ( item_num_param_dict is not None ): raise ValueError ( 'You specify the {item, nest}_formula to initiate the model, you should not specify the {item, nest}_num_param_dict at the same time.' ) if dataset is None : raise ValueError ( 'Dataset is required if {item, nest}_formula is specified to initiate the model.' ) nest_coef_variation_dict , nest_num_param_dict = parse_formula ( nest_formula , dataset . datasets [ 'nest' ]) item_coef_variation_dict , item_num_param_dict = parse_formula ( item_formula , dataset . datasets [ 'item' ]) else : # check for conflicting information. if ( nest_formula is not None ) or ( item_formula is not None ): raise ValueError ( 'You should not specify {item, nest}_formula and {item, nest}_coef_variation_dict at the same time.' ) # make sure that the research specifies all the required information. if ( nest_coef_variation_dict is None ) or ( item_coef_variation_dict is None ): raise ValueError ( 'You should specify the {item, nest}_coef_variation_dict to initiate the model.' ) if ( nest_num_param_dict is None ) or ( item_num_param_dict is None ): raise ValueError ( 'You should specify the {item, nest}_num_param_dict to initiate the model.' ) super ( NestedLogitModel , self ) . __init__ () self . nest_to_item = nest_to_item self . nest_coef_variation_dict = nest_coef_variation_dict self . nest_num_param_dict = nest_num_param_dict self . item_coef_variation_dict = item_coef_variation_dict self . item_num_param_dict = item_num_param_dict self . num_users = num_users self . nests = list ( nest_to_item . keys ()) self . num_nests = len ( self . nests ) self . num_items = sum ( len ( items ) for items in nest_to_item . values ()) # nest coefficients. self . nest_coef_dict = self . _build_coef_dict ( self . nest_coef_variation_dict , self . nest_num_param_dict , self . num_nests , weight_initialization = deepcopy ( nest_weight_initialization )) # item coefficients. self . item_coef_dict = self . _build_coef_dict ( self . item_coef_variation_dict , self . item_num_param_dict , self . num_items , weight_initialization = deepcopy ( item_weight_initialization )) self . shared_lambda = shared_lambda if self . shared_lambda : self . lambda_weight = nn . Parameter ( torch . ones ( 1 ), requires_grad = True ) else : self . lambda_weight = nn . Parameter ( torch . ones ( self . num_nests ) / 2 , requires_grad = True ) # breakpoint() # self.iv_weights = nn.Parameter(torch.ones(1), requires_grad=True) # used to warn users if forgot to call clamp. self . _clamp_called_flag = True self . regularization = regularization assert self . regularization in [ 'L1' , 'L2' , None ], f \"Provided regularization= { self . regularization } is not allowed, allowed values are ['L1', 'L2', None].\" self . regularization_weight = regularization_weight if ( self . regularization is not None ) and ( self . regularization_weight is None ): raise ValueError ( f 'You specified regularization type { self . regularization } without providing regularization_weight.' ) if ( self . regularization is None ) and ( self . regularization_weight is not None ): raise ValueError ( f 'You specified no regularization but you provide regularization_weight= { self . regularization_weight } , you should leave regularization_weight as None if you do not want to regularize the model.' )","title":"__init__()"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.forward","text":"An standard forward method for the model, the user feeds a ChoiceDataset batch and the model returns the predicted log-likelihood tensor. The main forward passing happens in the _forward() method, but we provide this wrapper forward() method for a cleaner API, as forward() only requires a single batch argument. For more details about the forward passing, please refer to the _forward() method.","title":"forward()"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.forward--todo-the-conditionallogitmodel-returns-predicted-utility-the-nestedlogitmodel-behaves-the-same","text":"Parameters: Name Type Description Default batch ChoiceDataset a ChoiceDataset object containing the data batch. required Returns: Type Description torch . Tensor torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability torch . Tensor of choosing item i in trip t. Source code in torch_choice/model/nested_logit_model.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 def forward ( self , batch : ChoiceDataset ) -> torch . Tensor : \"\"\"An standard forward method for the model, the user feeds a ChoiceDataset batch and the model returns the predicted log-likelihood tensor. The main forward passing happens in the _forward() method, but we provide this wrapper forward() method for a cleaner API, as forward() only requires a single batch argument. For more details about the forward passing, please refer to the _forward() method. # TODO: the ConditionalLogitModel returns predicted utility, the NestedLogitModel behaves the same? Args: batch (ChoiceDataset): a ChoiceDataset object containing the data batch. Returns: torch.Tensor: a tensor of shape (num_trips, num_items) including the log probability of choosing item i in trip t. \"\"\" return self . _forward ( batch [ 'nest' ] . x_dict , batch [ 'item' ] . x_dict , batch [ 'item' ] . user_index , batch [ 'item' ] . item_availability )","title":"TODO: the ConditionalLogitModel returns predicted utility, the NestedLogitModel behaves the same?"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.get_coefficient","text":"Retrieve the coefficient tensor for the given variable. Parameters: Name Type Description Default variable str the variable name. required level str from which level of model to extract the coefficient, can be 'item' or 'nest'. The level argument will be discarded if variable is lambda . None Returns: Type Description torch . Tensor torch.Tensor: the corresponding coefficient tensor of the requested variable. Source code in torch_choice/model/nested_logit_model.py 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 def get_coefficient ( self , variable : str , level : Optional [ str ] = None ) -> torch . Tensor : \"\"\"Retrieve the coefficient tensor for the given variable. Args: variable (str): the variable name. level (str): from which level of model to extract the coefficient, can be 'item' or 'nest'. The `level` argument will be discarded if `variable` is `lambda`. Returns: torch.Tensor: the corresponding coefficient tensor of the requested variable. \"\"\" if variable == 'lambda' : return self . lambda_weight . detach () . clone () if level not in [ 'item' , 'nest' ]: raise ValueError ( f \"Level should be either 'item' or 'nest', got { level } .\" ) return self . state_dict ()[ f ' { level } _coef_dict. { variable } .coef' ] . detach () . clone ()","title":"get_coefficient()"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.log_likelihood","text":"Computes the log likelihood of the model, please refer to the negative_log_likelihood() method. Returns: Name Type Description _type_ the log likelihood of the model. Source code in torch_choice/model/nested_logit_model.py 342 343 344 345 346 347 348 def log_likelihood ( self , * args ): \"\"\"Computes the log likelihood of the model, please refer to the negative_log_likelihood() method. Returns: _type_: the log likelihood of the model. \"\"\" return - self . negative_log_likelihood ( * args )","title":"log_likelihood()"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.loss","text":"The loss function to be optimized. This is a wrapper of negative_log_likelihood + regularization loss if required. Source code in torch_choice/model/nested_logit_model.py 378 379 380 381 382 383 384 385 386 387 388 def loss ( self , * args , ** kwargs ): \"\"\"The loss function to be optimized. This is a wrapper of `negative_log_likelihood` + regularization loss if required.\"\"\" nll = self . negative_log_likelihood ( * args , ** kwargs ) if self . regularization is not None : L = { 'L1' : 1 , 'L2' : 2 }[ self . regularization ] for name , param in self . named_parameters (): if name == 'lambda_weight' : # we don't regularize the lambda term, we only regularize coefficients. continue nll += self . regularization_weight * torch . norm ( param , p = L ) return nll","title":"loss()"},{"location":"api_torch_choice/#torch_choice.model.nested_logit_model.NestedLogitModel.negative_log_likelihood","text":"Computes the negative log likelihood of the model. Please note the log-likelihood is summed over all samples in batch instead of the average. Parameters: Name Type Description Default batch ChoiceDataset the ChoiceDataset object containing the data. required y torch . LongTensor the label. required is_train bool which mode of the model to be used for the forward passing, if we need Hessian of the NLL through auto-grad, is_train should be set to True. If we merely need a performance metric, then is_train can be set to False for better performance. Defaults to True. True Returns: Type Description torch . scalar_tensor torch.scalar_tensor: the negative log likelihood of the model. Source code in torch_choice/model/nested_logit_model.py 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def negative_log_likelihood ( self , batch : ChoiceDataset , y : torch . LongTensor , is_train : bool = True ) -> torch . scalar_tensor : \"\"\"Computes the negative log likelihood of the model. Please note the log-likelihood is summed over all samples in batch instead of the average. Args: batch (ChoiceDataset): the ChoiceDataset object containing the data. y (torch.LongTensor): the label. is_train (bool, optional): which mode of the model to be used for the forward passing, if we need Hessian of the NLL through auto-grad, `is_train` should be set to True. If we merely need a performance metric, then `is_train` can be set to False for better performance. Defaults to True. Returns: torch.scalar_tensor: the negative log likelihood of the model. \"\"\" # compute the negative log-likelihood loss directly. if is_train : self . train () else : self . eval () # (num_trips, num_items) logP = self . forward ( batch ) nll = - logP [ torch . arange ( len ( y )), y ] . sum () return nll","title":"negative_log_likelihood()"},{"location":"coefficient_initialization/","text":"Coefficient Initialization Tianyu Du Added since version 1.0.4 [From ChatGPT] Coefficient initialization is an essential component of model estimation, especially in the context of machine learning and deep learning. The choice of initial coefficients can dramatically impact the efficiency, speed, and even the ultimate success of model training. Poor initialization can lead to slow convergence during the optimization process or result in the model getting stuck in suboptimal local minima, particularly in models with non-convex loss landscapes such as neural networks. Additionally, it can exacerbate the problem of vanishing or exploding gradients, inhibiting the backpropagation process. Conversely, thoughtful and strategic initialization, like Xavier or He initialization, can lead to faster convergence, better generalization performance, and more robust models. Thus, the way coefficients are initialized can significantly influence the effectiveness and reliability of machine learning models. import torch import torch_choice import matplotlib.pyplot as plt /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\") Conditional Logit Models By default, coefficients are initialized following a standard Gaussian distribution. Here we create a \"big\" model of thousands of parameters to illustrate the distribution of coefficients. model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 ) def plot_model_initial_coefficients ( model_to_plot : torch . nn . Module ) -> None : fig , axes = plt . subplots ( nrows = 1 , ncols = 4 , figsize = ( 20 , 4 ), dpi = 150 ) for i , ( coef_name , coef_value ) in enumerate ( model_to_plot . state_dict () . items ()): arr = coef_value . view ( - 1 ,) . to ( \"cpu\" ) . numpy () axes [ i ] . hist ( arr , bins = 40 ) axes [ i ] . set_title ( f \" { coef_name } (K= { len ( arr ) } )\" ) plot_model_initial_coefficients ( model ) Alternatively, you can initialize to uniform or zeros using the weight_initialization argument. model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = \"uniform\" ) plot_model_initial_coefficients ( model ) model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = \"zero\" ) plot_model_initial_coefficients ( model ) model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = \"normal\" ) plot_model_initial_coefficients ( model ) You can initialize different sets of coefficients differently by passing a dictionary to weight_initialization . For coefficients not in weight_initialization , they are initialized as a standard normal distribution (the default). model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = { 'var_1' : 'uniform' , 'var_2' : 'normal' , 'var_3' : 'zero' }) # <-- 'var_4' is missing, and it's initialized using Gaussian. plot_model_initial_coefficients ( model ) For sure, the model complains if you ask it to initialize using something else... model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = { 'var_1' : 'a-non-existing-distribution' , 'var_2' : 'normal' , 'var_3' : 'zero' }) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) /var/folders/r3/rj0t5xcj557855yt3xr0qwnh0000gn/T/ipykernel_55114/3320609896.py in <module> ----> 1 model = torch_choice.model.ConditionalLogitModel( 2 coef_variation_dict={'var_1': 'constant', 'var_2': 'item', 'var_3': 'item-full', 'var_4': 'user'}, 3 num_param_dict={'var_1': 300, 'var_2': 500, 'var_3': 700, 'var_4': 900}, 4 num_items=4, 5 num_users=10, ~/Development/torch-choice/torch_choice/model/conditional_logit_model.py in __init__(self, formula, dataset, coef_variation_dict, num_param_dict, num_items, num_users, regularization, regularization_weight, weight_initialization) 190 init = self.weight_initialization 191 --> 192 coef_dict[var_type] = Coefficient(variation=variation, 193 num_items=self.num_items, 194 num_users=self.num_users, ~/Development/torch-choice/torch_choice/model/coefficient.py in __init__(self, variation, num_params, num_items, num_users, init) 57 init_func = str_to_init_func[self.init] # retrieve the initialization function. 58 else: ---> 59 raise ValueError(f\"Unsupported initialization method: {self.init}, supported methods are {list(str_to_init_func.keys())}\") 60 61 # construct the trainable. ValueError: Unsupported initialization method: a-non-existing-distribution, supported methods are ['zero', 'uniform', 'normal', None] You can inspect the method of initialization in the string representation of model coefficients (e.g., initialization=normal ). model ConditionalLogitModel( (coef_dict): ModuleDict( (var_1[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=300, 300 trainable parameters in total, initialization=uniform, device=cpu). (var_2[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=500, 1500 trainable parameters in total, initialization=normal, device=cpu). (var_3[item-full]): Coefficient(variation=item-full, num_items=4, num_users=10, num_params=700, 2800 trainable parameters in total, initialization=zero, device=cpu). (var_4[user]): Coefficient(variation=user, num_items=4, num_users=10, num_params=900, 9000 trainable parameters in total, initialization=normal, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[var_1[constant]] with 300 parameters, with constant level variation. X[var_2[item]] with 500 parameters, with item level variation. X[var_3[item-full]] with 700 parameters, with item-full level variation. X[var_4[user]] with 900 parameters, with user level variation. device=cpu Nested Logit Model Initializing nested logit models is very similar to initializing conditional logit models. The only difference is you need to pass-in two arguments: nest_weight_initialization and item_weight_initialization . By default, every coefficient is initialized to a standard Gaussian distribution. The coefficient for inclusive values \\(\\lambda\\) has its own way of initialization and cannot be modified. model = torch_choice . model . NestedLogitModel ( nest_to_item = { 1 : [ 0 , 1 , 2 ], 2 : [ 3 , 4 ], 3 : [ 5 , 6 , 7 ]}, # nest_coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' }, nest_num_param_dict = { 'var_1' : 300 , 'var_2' : 500 }, # item_coef_variation_dict = { 'var_3' : 'item-full' , 'var_4' : 'user' }, item_num_param_dict = { 'var_3' : 700 , 'var_4' : 900 }, num_users = 100 , # nest_weight_initialization = { 'var_1' : 'uniform' , 'var_2' : 'zero' }, item_weight_initialization = { 'var_4' : 'uniform' } # <-- var_3 is missing, it is initialized to Gaussian by default. ) def plot_model_initial_coefficients ( model_to_plot : torch . nn . Module ) -> None : fig , axes = plt . subplots ( nrows = 1 , ncols = 5 , figsize = ( 25 , 4 ), dpi = 150 ) for i , ( coef_name , coef_value ) in enumerate ( model_to_plot . state_dict () . items ()): arr = coef_value . view ( - 1 ,) . to ( \"cpu\" ) . numpy () axes [ i ] . hist ( arr , bins = 40 ) axes [ i ] . set_title ( f \" { coef_name } (K= { len ( arr ) } )\" ) plot_model_initial_coefficients ( model )","title":"Coefficient Initialization"},{"location":"coefficient_initialization/#coefficient-initialization","text":"Tianyu Du Added since version 1.0.4 [From ChatGPT] Coefficient initialization is an essential component of model estimation, especially in the context of machine learning and deep learning. The choice of initial coefficients can dramatically impact the efficiency, speed, and even the ultimate success of model training. Poor initialization can lead to slow convergence during the optimization process or result in the model getting stuck in suboptimal local minima, particularly in models with non-convex loss landscapes such as neural networks. Additionally, it can exacerbate the problem of vanishing or exploding gradients, inhibiting the backpropagation process. Conversely, thoughtful and strategic initialization, like Xavier or He initialization, can lead to faster convergence, better generalization performance, and more robust models. Thus, the way coefficients are initialized can significantly influence the effectiveness and reliability of machine learning models. import torch import torch_choice import matplotlib.pyplot as plt /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\")","title":"Coefficient Initialization"},{"location":"coefficient_initialization/#conditional-logit-models","text":"","title":"Conditional Logit Models"},{"location":"coefficient_initialization/#by-default-coefficients-are-initialized-following-a-standard-gaussian-distribution","text":"Here we create a \"big\" model of thousands of parameters to illustrate the distribution of coefficients. model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 ) def plot_model_initial_coefficients ( model_to_plot : torch . nn . Module ) -> None : fig , axes = plt . subplots ( nrows = 1 , ncols = 4 , figsize = ( 20 , 4 ), dpi = 150 ) for i , ( coef_name , coef_value ) in enumerate ( model_to_plot . state_dict () . items ()): arr = coef_value . view ( - 1 ,) . to ( \"cpu\" ) . numpy () axes [ i ] . hist ( arr , bins = 40 ) axes [ i ] . set_title ( f \" { coef_name } (K= { len ( arr ) } )\" ) plot_model_initial_coefficients ( model )","title":"By default, coefficients are initialized following a standard Gaussian distribution."},{"location":"coefficient_initialization/#alternatively-you-can-initialize-to-uniform-or-zeros-using-the-weight_initialization-argument","text":"model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = \"uniform\" ) plot_model_initial_coefficients ( model ) model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = \"zero\" ) plot_model_initial_coefficients ( model ) model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = \"normal\" ) plot_model_initial_coefficients ( model )","title":"Alternatively, you can initialize to uniform or zeros using the weight_initialization argument."},{"location":"coefficient_initialization/#you-can-initialize-different-sets-of-coefficients-differently-by-passing-a-dictionary-to-weight_initialization-for-coefficients-not-in-weight_initialization-they-are-initialized-as-a-standard-normal-distribution-the-default","text":"model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = { 'var_1' : 'uniform' , 'var_2' : 'normal' , 'var_3' : 'zero' }) # <-- 'var_4' is missing, and it's initialized using Gaussian. plot_model_initial_coefficients ( model )","title":"You can initialize different sets of coefficients differently by passing a dictionary to weight_initialization. For coefficients not in weight_initialization, they are initialized as a standard normal distribution (the default)."},{"location":"coefficient_initialization/#for-sure-the-model-complains-if-you-ask-it-to-initialize-using-something-else","text":"model = torch_choice . model . ConditionalLogitModel ( coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' , 'var_3' : 'item-full' , 'var_4' : 'user' }, num_param_dict = { 'var_1' : 300 , 'var_2' : 500 , 'var_3' : 700 , 'var_4' : 900 }, num_items = 4 , num_users = 10 , weight_initialization = { 'var_1' : 'a-non-existing-distribution' , 'var_2' : 'normal' , 'var_3' : 'zero' }) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) /var/folders/r3/rj0t5xcj557855yt3xr0qwnh0000gn/T/ipykernel_55114/3320609896.py in <module> ----> 1 model = torch_choice.model.ConditionalLogitModel( 2 coef_variation_dict={'var_1': 'constant', 'var_2': 'item', 'var_3': 'item-full', 'var_4': 'user'}, 3 num_param_dict={'var_1': 300, 'var_2': 500, 'var_3': 700, 'var_4': 900}, 4 num_items=4, 5 num_users=10, ~/Development/torch-choice/torch_choice/model/conditional_logit_model.py in __init__(self, formula, dataset, coef_variation_dict, num_param_dict, num_items, num_users, regularization, regularization_weight, weight_initialization) 190 init = self.weight_initialization 191 --> 192 coef_dict[var_type] = Coefficient(variation=variation, 193 num_items=self.num_items, 194 num_users=self.num_users, ~/Development/torch-choice/torch_choice/model/coefficient.py in __init__(self, variation, num_params, num_items, num_users, init) 57 init_func = str_to_init_func[self.init] # retrieve the initialization function. 58 else: ---> 59 raise ValueError(f\"Unsupported initialization method: {self.init}, supported methods are {list(str_to_init_func.keys())}\") 60 61 # construct the trainable. ValueError: Unsupported initialization method: a-non-existing-distribution, supported methods are ['zero', 'uniform', 'normal', None]","title":"For sure, the model complains if you ask it to initialize using something else..."},{"location":"coefficient_initialization/#you-can-inspect-the-method-of-initialization-in-the-string-representation-of-model-coefficients-eg-initializationnormal","text":"model ConditionalLogitModel( (coef_dict): ModuleDict( (var_1[constant]): Coefficient(variation=constant, num_items=4, num_users=10, num_params=300, 300 trainable parameters in total, initialization=uniform, device=cpu). (var_2[item]): Coefficient(variation=item, num_items=4, num_users=10, num_params=500, 1500 trainable parameters in total, initialization=normal, device=cpu). (var_3[item-full]): Coefficient(variation=item-full, num_items=4, num_users=10, num_params=700, 2800 trainable parameters in total, initialization=zero, device=cpu). (var_4[user]): Coefficient(variation=user, num_items=4, num_users=10, num_params=900, 9000 trainable parameters in total, initialization=normal, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[var_1[constant]] with 300 parameters, with constant level variation. X[var_2[item]] with 500 parameters, with item level variation. X[var_3[item-full]] with 700 parameters, with item-full level variation. X[var_4[user]] with 900 parameters, with user level variation. device=cpu","title":"You can inspect the method of initialization in the string representation of model coefficients (e.g., initialization=normal)."},{"location":"coefficient_initialization/#nested-logit-model","text":"Initializing nested logit models is very similar to initializing conditional logit models. The only difference is you need to pass-in two arguments: nest_weight_initialization and item_weight_initialization . By default, every coefficient is initialized to a standard Gaussian distribution. The coefficient for inclusive values \\(\\lambda\\) has its own way of initialization and cannot be modified. model = torch_choice . model . NestedLogitModel ( nest_to_item = { 1 : [ 0 , 1 , 2 ], 2 : [ 3 , 4 ], 3 : [ 5 , 6 , 7 ]}, # nest_coef_variation_dict = { 'var_1' : 'constant' , 'var_2' : 'item' }, nest_num_param_dict = { 'var_1' : 300 , 'var_2' : 500 }, # item_coef_variation_dict = { 'var_3' : 'item-full' , 'var_4' : 'user' }, item_num_param_dict = { 'var_3' : 700 , 'var_4' : 900 }, num_users = 100 , # nest_weight_initialization = { 'var_1' : 'uniform' , 'var_2' : 'zero' }, item_weight_initialization = { 'var_4' : 'uniform' } # <-- var_3 is missing, it is initialized to Gaussian by default. ) def plot_model_initial_coefficients ( model_to_plot : torch . nn . Module ) -> None : fig , axes = plt . subplots ( nrows = 1 , ncols = 5 , figsize = ( 25 , 4 ), dpi = 150 ) for i , ( coef_name , coef_value ) in enumerate ( model_to_plot . state_dict () . items ()): arr = coef_value . view ( - 1 ,) . to ( \"cpu\" ) . numpy () axes [ i ] . hist ( arr , bins = 40 ) axes [ i ] . set_title ( f \" { coef_name } (K= { len ( arr ) } )\" ) plot_model_initial_coefficients ( model )","title":"Nested Logit Model"},{"location":"conditional_logit_model_mode_canada/","text":"Tutorial: Conditional Logit Model on ModeCanada Dataset Author: Tianyu Du (tianyudu@stanford.edu) Update: May. 3, 2022 Reference: This tutorial is modified from the Random utility model and the multinomial logit model in th documentation of mlogit package in R. Please note that the dataset involved in this example is fairly small (2,779 choice records), so we don't expect the performance to be faster than the R implementation. We provide this tutorial mainly to check the correctness of our prediction. The fully potential of PyTorch is better exploited on much larger dataset. The executable Jupyter notebook for this tutorial is located at Random Utility Model (RUM) 1: Conditional Logit Model . Let's first import essential Python packages. from time import time import pandas as pd import torch from torch_choice.data import ChoiceDataset , utils from torch_choice.model import ConditionalLogitModel from torch_choice import run /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\") This tutorial will run both with and without graphic processing unit (GPU). However, our package is much faster with GPU. if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) device = 'cuda' else : print ( 'Running tutorial on CPU.' ) device = 'cpu' Running tutorial on CPU. Load Dataset We have included the ModeCanada dataset in our package, which is located at ./public_datasets/ . The ModeCanada dataset contains individuals' choice on traveling methods. The raw dataset is in a long-format, in which the case variable identifies each choice. Using the terminology mentioned in the data management tutorial, each choice is called a purchasing record (i.e., consumer bought the ticket of a particular travelling mode), and the total number of choices made is denoted as \\(B\\) . For example, the first four row below (with case == 109 ) corresponds to the first choice, the alt column lists all alternatives/items available. The choice column identifies which alternative/item is chosen. The second row in the data snapshot below, we have choice == 1 and alt == 'air' for case == 109 . This indicates the travelling mode chosen in case = 109 was air . Now we convert the raw dataset into the format compatible with our model, for a detailed tutorial on the compatible formats, please refer to the data management tutorial. We focus on cases when four alternatives were available by filtering noalt == 4 . df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) df = df . query ( 'noalt == 4' ) . reset_index ( drop = True ) df . sort_values ( by = 'case' , inplace = True ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 case alt choice dist cost ivt ovt freq income urban noalt 0 304 109 train 0 377 58.25 215 74 4 45 0 4 1 305 109 air 1 377 142.80 56 85 9 45 0 4 2 306 109 bus 0 377 27.52 301 63 8 45 0 4 3 307 109 car 0 377 71.63 262 0 0 45 0 4 4 308 110 train 0 377 58.25 215 74 4 70 0 4 Since there are 4 rows corresponding to each purchasing record , the length of the long-format data is \\(4 \\times B\\) . Please refer to the data management tutorial for notations. df . shape (11116, 12) Construct the item_index tensor The first thing is to construct the item_index tensor identifying which item (i.e., travel mode) was chosen in each purchasing record. We can now construct the item_index array containing which item was chosen in each purchasing record. item_index = df [ df [ 'choice' ] == 1 ] . sort_values ( by = 'case' )[ 'alt' ] . reset_index ( drop = True ) print ( item_index ) 0 air 1 air 2 air 3 air 4 air ... 2774 car 2775 car 2776 car 2777 car 2778 car Name: alt, Length: 2779, dtype: object Since we will be training our model using PyTorch , we need to encode {'air', 'bus', 'car', 'train'} into integer values. Travel Mode Name Encoded Integer Values air 0 bus 1 car 2 train 3 The generated item_index would be a tensor of shape 2,778 (i.e., number of purchasing records in this dataset) with values {0, 1, 2, 3} . item_names = [ 'air' , 'bus' , 'car' , 'train' ] num_items = 4 encoder = dict ( zip ( item_names , range ( num_items ))) print ( f \" { encoder =:} \" ) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) print ( f \" { item_index =:} \" ) encoder={'air': 0, 'bus': 1, 'car': 2, 'train': 3} item_index=tensor([0, 0, 0, ..., 2, 2, 2]) Construct Observables Then let's constrct tensors for observables. As mentioned in the data management tutorial, the session is capturing the temporal dimension of our data. Since we have different values cost , freq and ovt for each purchasing record and for each item, it's natural to say each purchasing record has its own session. Consequently, these three variables are price observables since they vary by both item and session. The tensor holding these observables has shape \\((\\text{numer of purchasing records}, \\text{number of items}, 3)\\) We do the same for variable ivt , we put ivt into a separate tensor because we want to model its coefficient differently later. price_cost_freq_ovt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = [ 'cost' , 'freq' , 'ovt' ]) print ( f ' { price_cost_freq_ovt . shape =:} ' ) price_ivt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = 'ivt' ) print ( f ' { price_ivt . shape =:} ' ) price_cost_freq_ovt.shape=torch.Size([2779, 4, 3]) price_ivt.shape=torch.Size([2779, 4, 1]) In contrast, the income variable varies only by session (i.e., purchasing record), but not by item. income is therefore naturally a session variable. session_income = df . groupby ( 'case' )[ 'income' ] . first () session_income = torch . Tensor ( session_income . values ) . view ( - 1 , 1 ) print ( f ' { session_income . shape =:} ' ) session_income.shape=torch.Size([2779, 1]) To summarize, the ChoiceDataset constructed contains 2779 choice records. Since the original dataset did not reveal the identity of each decision maker, we consider all 2779 choices were made by a single user but in 2779 different sessions to handle variations. In this case, the cost , freq and ovt are observables depending on both sessions and items, we created a price_cost_freq_ovt tensor with shape (num_sessions, num_items, 3) = (2779, 4, 3) to contain these variables. In contrast, the income information depends only on session but not on items, hence we create the session_income tensor to store it. Because we wish to fit item-specific coefficients for the ivt variable, which varies by both sessions and items as well, we create another price_ivt tensor in addition to the price_cost_freq_ovt tensor. Lastly, we put all tensors we created to a single ChoiceDataset object, and move the dataset to the appropriate device. dataset = ChoiceDataset ( item_index = item_index , price_cost_freq_ovt = price_cost_freq_ovt , session_income = session_income , price_ivt = price_ivt ) . to ( device ) No `session_index` is provided, assume each choice instance is in its own session. You can print(dataset) to check shapes of tensors contained in the ChoiceDataset . print ( dataset ) ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) Create the Model We now construct the ConditionalLogitModel to fit the dataset we constructed above. To start with, we aim to estimate the following model formulation: \\[ U_{uit} = \\beta^0_i + \\beta^{1\\top} X^{price: (cost, freq, ovt)}_{it} + \\beta^2_i X^{session:income}_t + \\beta^3_i X_{it}^{price:ivt} + \\epsilon_{uit} \\] We now initialize the ConditionalLogitModel to predict choices from the dataset. Please see the documentation for a complete description of the ConditionalLogitModel class. At it's core, the ConditionalLogitModel constructor requires the following four components. Define variation of each \\(\\beta\\) using coef_variation_dict The keyword coef_variation_dict is a dictionary with variable names (defined above while constructing the dataset) as keys and values from {constant, user, item, item-full} . For instance, since we wish to have constant coefficients for cost , freq and ovt observables, and these three observables are stored in the price_cost_freq_ovt tensor of the choice dataset, we set coef_variation_dict['price_cost_freq_ovt'] = 'constant' (corresponding to the \\(\\beta^{1\\top} X^{price: (cost, freq, ovt)}_{it}\\) term above). The models allows for the option of zeroing coefficient for one item. The variation of \\(\\beta^3\\) above is specified as item-full which indicates 4 values of \\(\\beta^3\\) is learned (one for each item). In contrast, \\(\\beta^0, \\beta^2\\) are specified to have variation item instead of item-full . In this case, the \\(\\beta\\) correspond to the first item (i.e., the baseline item, which is encoded as 0 in the label tensor, air in our example) is force to be zero. The researcher needs to declare intercept explicitly for the model to fit an intercept as well, otherwise the model assumes zero intercept term. Define the dimension of each \\(\\beta\\) using num_param_dict The num_param_dict is a dictionary with keys exactly the same as the coef_variation_dict . Each of dictionary values tells the dimension of the corresponding observables, hence the dimension of the coefficient. For example, the price_cost_freq_ovt consists of three observables and we set the corresponding to three. Even the model can infer num_param_dict['intercept'] = 1 , but we recommend the research to include it for completeness. Number of items The num_items keyword informs the model how many alternatives users are choosing from. Number of users The num_users keyword is an optional integer informing the model how many users there are in the dataset. However, in this example we implicitly assume there is only one user making all the decisions and we do not have any user_obs involved, hence num_users argument is not supplied. model = ConditionalLogitModel ( coef_variation_dict = { 'price_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'price_ivt' : 'item-full' , 'intercept' : 'item' }, num_param_dict = { 'price_cost_freq_ovt' : 3 , 'session_income' : 1 , 'price_ivt' : 1 , 'intercept' : 1 }, num_items = 4 ) Then we move the model to the appropriate device. model = model . to ( device ) One can print the ConditionalLogitModel object to obtain a summary of the model. print ( model ) ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu Creating Model using Formula Alternatively, researchers can create the model using a formula like in R. The formula consists of a list of additive terms separated by + sign, and each term looks like (variable_name|variation) . Where variable_name is the name of the variable in the dataset, and variation is one of constant , user , item , item-full . Initializing the model using formula requires you to pass in the ChoiceDataset object as well so that the model can infer the dimension of each variable. These two ways of creating models lead to equivalent models. model = model = ConditionalLogitModel ( formula = '(price_cost_freq_ovt|constant) + (session_income|item) + (price_ivt|item-full) + (intercept|item)' , dataset = dataset , num_items = 4 ) print ( model ) ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu Train the Model We provide an easy-to-use helper function run() imported from torch_choice.utils.run_helper to fit the model with a particular dataset. We provide an easy-to-use model runner for both ConditionalLogitModel and NestedLogitModel (see later) instances. The run() mehtod supports mini-batch updating as well, for small datasets like the one we are dealing right now, we can use batch_size = -1 to conduct full-batch gradient update. Here we use the LBFGS optimizer since we are working on a small dataset with only 2,779 choice records and 13 coefficients to be estimated. For larger datasets and larger models, we recommend using the Adam optimizer instead. start_time = time () run ( model , dataset , num_epochs = 500 , learning_rate = 0.01 , model_optimizer = \"LBFGS\" , batch_size =- 1 ) print ( 'Time taken:' , time () - start_time ) ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/setup.py:201: UserWarning: MPS available but not used. Set `accelerator` and `devices` using `Trainer(accelerator='mps', devices=1)`. rank_zero_warn( /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/configuration_validator.py:108: PossibleUserWarning: You defined a `validation_step` but have no `val_dataloader`. Skipping val loop. rank_zero_warn( | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 13 ------------------------------------------------ 13 Trainable params 0 Non-trainable params 13 Total params 0.000 Total estimated model params size (MB) /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:224: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 10 which is the number of cpus on this machine) in the `DataLoader` init to improve performance. rank_zero_warn( /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py:1609: PossibleUserWarning: The number of training batches (1) is smaller than the logging interval Trainer(log_every_n_steps=5). Set a lower value for log_every_n_steps if you want to see logs for the training epoch. rank_zero_warn( Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 76.72it/s, loss=1.87e+03, v_num=32] `Trainer.fit` stopped: `max_epochs=500` reached. Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 69.67it/s, loss=1.87e+03, v_num=32] Time taken for training: 11.521849155426025 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -1874.3427734375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:--------------------------------|-------------:|------------:|-----------:|------------:|:---------------| | price_cost_freq_ovt[constant]_0 | -0.0333421 | 0.00709556 | -4.69901 | 2.61425e-06 | *** | | price_cost_freq_ovt[constant]_1 | 0.0925304 | 0.00509757 | 18.1518 | 0 | *** | | price_cost_freq_ovt[constant]_2 | -0.0430032 | 0.00322472 | -13.3355 | 0 | *** | | session_income[item]_0 | -0.0890796 | 0.0183469 | -4.8553 | 1.20205e-06 | *** | | session_income[item]_1 | -0.0279925 | 0.00387254 | -7.22846 | 4.88498e-13 | *** | | session_income[item]_2 | -0.038146 | 0.00408307 | -9.34248 | 0 | *** | | price_ivt[item-full]_0 | 0.0595089 | 0.0100727 | 5.90794 | 3.46418e-09 | *** | | price_ivt[item-full]_1 | -0.00678188 | 0.00443289 | -1.5299 | 0.126042 | | | price_ivt[item-full]_2 | -0.00645982 | 0.00189848 | -3.40262 | 0.000667424 | *** | | price_ivt[item-full]_3 | -0.00145029 | 0.00118748 | -1.22132 | 0.221965 | | | intercept[item]_0 | 0.697311 | 1.28022 | 0.544681 | 0.585973 | | | intercept[item]_1 | 1.8437 | 0.708514 | 2.6022 | 0.0092627 | ** | | intercept[item]_2 | 3.27381 | 0.624416 | 5.24299 | 1.57999e-07 | *** | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 Time taken: 11.617464065551758 Parameter Estimation from R The following is the R-output from the mlogit implementation, the estimation, standard error, and log-likelihood from our torch_choice implementation is the same as the result from mlogit implementation. We see that the final log-likelihood of models estimated using two packages are all around -1874 . The run() method calculates the standard deviation using \\(\\sqrt{\\text{diag}(H^{-1})}\\) , where \\(H\\) is the hessian of negative log-likelihood with repsect to model parameters. Names of coefficients are slightly different, one can use the following conversion table to compare estimations and standard deviations reported by both packages. R Output install.packages ( \"mlogit\" ) library ( \"mlogit\" ) data ( \"ModeCanada\" , package = \"mlogit\" ) MC <- dfidx ( ModeCanada , subset = noalt == 4 ) ml.MC1 <- mlogit ( choice ~ cost + freq + ovt | income | ivt , MC , reflevel = 'air' ) summary ( ml.MC1 ) Call: mlogit(formula = choice ~ cost + freq + ovt | income | ivt, data = MC, reflevel = \"air\", method = \"nr\") Frequencies of alternatives:choice air train bus car 0.3738755 0.1666067 0.0035984 0.4559194 nr method 9 iterations, 0h:0m:0s g'(-H)^-1g = 0.00014 successive function values within tolerance limits Coefficients : Estimate Std. Error z-value Pr(>|z|) (Intercept):train 3.2741952 0.6244152 5.2436 1.575e-07 *** (Intercept):bus 0.6983381 1.2802466 0.5455 0.5854292 (Intercept):car 1.8441129 0.7085089 2.6028 0.0092464 ** cost -0.0333389 0.0070955 -4.6986 2.620e-06 *** freq 0.0925297 0.0050976 18.1517 < 2.2e-16 *** ovt -0.0430036 0.0032247 -13.3356 < 2.2e-16 *** income:train -0.0381466 0.0040831 -9.3426 < 2.2e-16 *** income:bus -0.0890867 0.0183471 -4.8556 1.200e-06 *** income:car -0.0279930 0.0038726 -7.2286 4.881e-13 *** ivt:air 0.0595097 0.0100727 5.9080 3.463e-09 *** ivt:train -0.0014504 0.0011875 -1.2214 0.2219430 ivt:bus -0.0067835 0.0044334 -1.5301 0.1259938 ivt:car -0.0064603 0.0018985 -3.4029 0.0006668 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Log-Likelihood: -1874.3 McFadden R^2: 0.35443 Likelihood ratio test : chisq = 2058.1 (p.value = < 2.22e-16)","title":"Conditional Logit Model"},{"location":"conditional_logit_model_mode_canada/#tutorial-conditional-logit-model-on-modecanada-dataset","text":"Author: Tianyu Du (tianyudu@stanford.edu) Update: May. 3, 2022 Reference: This tutorial is modified from the Random utility model and the multinomial logit model in th documentation of mlogit package in R. Please note that the dataset involved in this example is fairly small (2,779 choice records), so we don't expect the performance to be faster than the R implementation. We provide this tutorial mainly to check the correctness of our prediction. The fully potential of PyTorch is better exploited on much larger dataset. The executable Jupyter notebook for this tutorial is located at Random Utility Model (RUM) 1: Conditional Logit Model . Let's first import essential Python packages. from time import time import pandas as pd import torch from torch_choice.data import ChoiceDataset , utils from torch_choice.model import ConditionalLogitModel from torch_choice import run /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\") This tutorial will run both with and without graphic processing unit (GPU). However, our package is much faster with GPU. if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) device = 'cuda' else : print ( 'Running tutorial on CPU.' ) device = 'cpu' Running tutorial on CPU.","title":"Tutorial: Conditional Logit Model on ModeCanada Dataset"},{"location":"conditional_logit_model_mode_canada/#load-dataset","text":"We have included the ModeCanada dataset in our package, which is located at ./public_datasets/ . The ModeCanada dataset contains individuals' choice on traveling methods. The raw dataset is in a long-format, in which the case variable identifies each choice. Using the terminology mentioned in the data management tutorial, each choice is called a purchasing record (i.e., consumer bought the ticket of a particular travelling mode), and the total number of choices made is denoted as \\(B\\) . For example, the first four row below (with case == 109 ) corresponds to the first choice, the alt column lists all alternatives/items available. The choice column identifies which alternative/item is chosen. The second row in the data snapshot below, we have choice == 1 and alt == 'air' for case == 109 . This indicates the travelling mode chosen in case = 109 was air . Now we convert the raw dataset into the format compatible with our model, for a detailed tutorial on the compatible formats, please refer to the data management tutorial. We focus on cases when four alternatives were available by filtering noalt == 4 . df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) df = df . query ( 'noalt == 4' ) . reset_index ( drop = True ) df . sort_values ( by = 'case' , inplace = True ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 case alt choice dist cost ivt ovt freq income urban noalt 0 304 109 train 0 377 58.25 215 74 4 45 0 4 1 305 109 air 1 377 142.80 56 85 9 45 0 4 2 306 109 bus 0 377 27.52 301 63 8 45 0 4 3 307 109 car 0 377 71.63 262 0 0 45 0 4 4 308 110 train 0 377 58.25 215 74 4 70 0 4 Since there are 4 rows corresponding to each purchasing record , the length of the long-format data is \\(4 \\times B\\) . Please refer to the data management tutorial for notations. df . shape (11116, 12)","title":"Load Dataset"},{"location":"conditional_logit_model_mode_canada/#construct-the-item_index-tensor","text":"The first thing is to construct the item_index tensor identifying which item (i.e., travel mode) was chosen in each purchasing record. We can now construct the item_index array containing which item was chosen in each purchasing record. item_index = df [ df [ 'choice' ] == 1 ] . sort_values ( by = 'case' )[ 'alt' ] . reset_index ( drop = True ) print ( item_index ) 0 air 1 air 2 air 3 air 4 air ... 2774 car 2775 car 2776 car 2777 car 2778 car Name: alt, Length: 2779, dtype: object Since we will be training our model using PyTorch , we need to encode {'air', 'bus', 'car', 'train'} into integer values. Travel Mode Name Encoded Integer Values air 0 bus 1 car 2 train 3 The generated item_index would be a tensor of shape 2,778 (i.e., number of purchasing records in this dataset) with values {0, 1, 2, 3} . item_names = [ 'air' , 'bus' , 'car' , 'train' ] num_items = 4 encoder = dict ( zip ( item_names , range ( num_items ))) print ( f \" { encoder =:} \" ) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) print ( f \" { item_index =:} \" ) encoder={'air': 0, 'bus': 1, 'car': 2, 'train': 3} item_index=tensor([0, 0, 0, ..., 2, 2, 2])","title":"Construct the item_index tensor"},{"location":"conditional_logit_model_mode_canada/#construct-observables","text":"Then let's constrct tensors for observables. As mentioned in the data management tutorial, the session is capturing the temporal dimension of our data. Since we have different values cost , freq and ovt for each purchasing record and for each item, it's natural to say each purchasing record has its own session. Consequently, these three variables are price observables since they vary by both item and session. The tensor holding these observables has shape \\((\\text{numer of purchasing records}, \\text{number of items}, 3)\\) We do the same for variable ivt , we put ivt into a separate tensor because we want to model its coefficient differently later. price_cost_freq_ovt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = [ 'cost' , 'freq' , 'ovt' ]) print ( f ' { price_cost_freq_ovt . shape =:} ' ) price_ivt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = 'ivt' ) print ( f ' { price_ivt . shape =:} ' ) price_cost_freq_ovt.shape=torch.Size([2779, 4, 3]) price_ivt.shape=torch.Size([2779, 4, 1]) In contrast, the income variable varies only by session (i.e., purchasing record), but not by item. income is therefore naturally a session variable. session_income = df . groupby ( 'case' )[ 'income' ] . first () session_income = torch . Tensor ( session_income . values ) . view ( - 1 , 1 ) print ( f ' { session_income . shape =:} ' ) session_income.shape=torch.Size([2779, 1]) To summarize, the ChoiceDataset constructed contains 2779 choice records. Since the original dataset did not reveal the identity of each decision maker, we consider all 2779 choices were made by a single user but in 2779 different sessions to handle variations. In this case, the cost , freq and ovt are observables depending on both sessions and items, we created a price_cost_freq_ovt tensor with shape (num_sessions, num_items, 3) = (2779, 4, 3) to contain these variables. In contrast, the income information depends only on session but not on items, hence we create the session_income tensor to store it. Because we wish to fit item-specific coefficients for the ivt variable, which varies by both sessions and items as well, we create another price_ivt tensor in addition to the price_cost_freq_ovt tensor. Lastly, we put all tensors we created to a single ChoiceDataset object, and move the dataset to the appropriate device. dataset = ChoiceDataset ( item_index = item_index , price_cost_freq_ovt = price_cost_freq_ovt , session_income = session_income , price_ivt = price_ivt ) . to ( device ) No `session_index` is provided, assume each choice instance is in its own session. You can print(dataset) to check shapes of tensors contained in the ChoiceDataset . print ( dataset ) ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu)","title":"Construct Observables"},{"location":"conditional_logit_model_mode_canada/#create-the-model","text":"We now construct the ConditionalLogitModel to fit the dataset we constructed above. To start with, we aim to estimate the following model formulation: \\[ U_{uit} = \\beta^0_i + \\beta^{1\\top} X^{price: (cost, freq, ovt)}_{it} + \\beta^2_i X^{session:income}_t + \\beta^3_i X_{it}^{price:ivt} + \\epsilon_{uit} \\] We now initialize the ConditionalLogitModel to predict choices from the dataset. Please see the documentation for a complete description of the ConditionalLogitModel class. At it's core, the ConditionalLogitModel constructor requires the following four components.","title":"Create the Model"},{"location":"conditional_logit_model_mode_canada/#define-variation-of-each-beta-using-coef_variation_dict","text":"The keyword coef_variation_dict is a dictionary with variable names (defined above while constructing the dataset) as keys and values from {constant, user, item, item-full} . For instance, since we wish to have constant coefficients for cost , freq and ovt observables, and these three observables are stored in the price_cost_freq_ovt tensor of the choice dataset, we set coef_variation_dict['price_cost_freq_ovt'] = 'constant' (corresponding to the \\(\\beta^{1\\top} X^{price: (cost, freq, ovt)}_{it}\\) term above). The models allows for the option of zeroing coefficient for one item. The variation of \\(\\beta^3\\) above is specified as item-full which indicates 4 values of \\(\\beta^3\\) is learned (one for each item). In contrast, \\(\\beta^0, \\beta^2\\) are specified to have variation item instead of item-full . In this case, the \\(\\beta\\) correspond to the first item (i.e., the baseline item, which is encoded as 0 in the label tensor, air in our example) is force to be zero. The researcher needs to declare intercept explicitly for the model to fit an intercept as well, otherwise the model assumes zero intercept term.","title":"Define variation of each \\(\\beta\\) using coef_variation_dict"},{"location":"conditional_logit_model_mode_canada/#define-the-dimension-of-each-beta-using-num_param_dict","text":"The num_param_dict is a dictionary with keys exactly the same as the coef_variation_dict . Each of dictionary values tells the dimension of the corresponding observables, hence the dimension of the coefficient. For example, the price_cost_freq_ovt consists of three observables and we set the corresponding to three. Even the model can infer num_param_dict['intercept'] = 1 , but we recommend the research to include it for completeness.","title":"Define the dimension of each \\(\\beta\\) using num_param_dict"},{"location":"conditional_logit_model_mode_canada/#number-of-items","text":"The num_items keyword informs the model how many alternatives users are choosing from.","title":"Number of items"},{"location":"conditional_logit_model_mode_canada/#number-of-users","text":"The num_users keyword is an optional integer informing the model how many users there are in the dataset. However, in this example we implicitly assume there is only one user making all the decisions and we do not have any user_obs involved, hence num_users argument is not supplied. model = ConditionalLogitModel ( coef_variation_dict = { 'price_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'price_ivt' : 'item-full' , 'intercept' : 'item' }, num_param_dict = { 'price_cost_freq_ovt' : 3 , 'session_income' : 1 , 'price_ivt' : 1 , 'intercept' : 1 }, num_items = 4 ) Then we move the model to the appropriate device. model = model . to ( device ) One can print the ConditionalLogitModel object to obtain a summary of the model. print ( model ) ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu","title":"Number of users"},{"location":"conditional_logit_model_mode_canada/#creating-model-using-formula","text":"Alternatively, researchers can create the model using a formula like in R. The formula consists of a list of additive terms separated by + sign, and each term looks like (variable_name|variation) . Where variable_name is the name of the variable in the dataset, and variation is one of constant , user , item , item-full . Initializing the model using formula requires you to pass in the ChoiceDataset object as well so that the model can infer the dimension of each variable. These two ways of creating models lead to equivalent models. model = model = ConditionalLogitModel ( formula = '(price_cost_freq_ovt|constant) + (session_income|item) + (price_ivt|item-full) + (intercept|item)' , dataset = dataset , num_items = 4 ) print ( model ) ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu","title":"Creating Model using Formula"},{"location":"conditional_logit_model_mode_canada/#train-the-model","text":"We provide an easy-to-use helper function run() imported from torch_choice.utils.run_helper to fit the model with a particular dataset. We provide an easy-to-use model runner for both ConditionalLogitModel and NestedLogitModel (see later) instances. The run() mehtod supports mini-batch updating as well, for small datasets like the one we are dealing right now, we can use batch_size = -1 to conduct full-batch gradient update. Here we use the LBFGS optimizer since we are working on a small dataset with only 2,779 choice records and 13 coefficients to be estimated. For larger datasets and larger models, we recommend using the Adam optimizer instead. start_time = time () run ( model , dataset , num_epochs = 500 , learning_rate = 0.01 , model_optimizer = \"LBFGS\" , batch_size =- 1 ) print ( 'Time taken:' , time () - start_time ) ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/setup.py:201: UserWarning: MPS available but not used. Set `accelerator` and `devices` using `Trainer(accelerator='mps', devices=1)`. rank_zero_warn( /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/configuration_validator.py:108: PossibleUserWarning: You defined a `validation_step` but have no `val_dataloader`. Skipping val loop. rank_zero_warn( | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 13 ------------------------------------------------ 13 Trainable params 0 Non-trainable params 13 Total params 0.000 Total estimated model params size (MB) /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:224: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 10 which is the number of cpus on this machine) in the `DataLoader` init to improve performance. rank_zero_warn( /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py:1609: PossibleUserWarning: The number of training batches (1) is smaller than the logging interval Trainer(log_every_n_steps=5). Set a lower value for log_every_n_steps if you want to see logs for the training epoch. rank_zero_warn( Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 76.72it/s, loss=1.87e+03, v_num=32] `Trainer.fit` stopped: `max_epochs=500` reached. Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 69.67it/s, loss=1.87e+03, v_num=32] Time taken for training: 11.521849155426025 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -1874.3427734375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:--------------------------------|-------------:|------------:|-----------:|------------:|:---------------| | price_cost_freq_ovt[constant]_0 | -0.0333421 | 0.00709556 | -4.69901 | 2.61425e-06 | *** | | price_cost_freq_ovt[constant]_1 | 0.0925304 | 0.00509757 | 18.1518 | 0 | *** | | price_cost_freq_ovt[constant]_2 | -0.0430032 | 0.00322472 | -13.3355 | 0 | *** | | session_income[item]_0 | -0.0890796 | 0.0183469 | -4.8553 | 1.20205e-06 | *** | | session_income[item]_1 | -0.0279925 | 0.00387254 | -7.22846 | 4.88498e-13 | *** | | session_income[item]_2 | -0.038146 | 0.00408307 | -9.34248 | 0 | *** | | price_ivt[item-full]_0 | 0.0595089 | 0.0100727 | 5.90794 | 3.46418e-09 | *** | | price_ivt[item-full]_1 | -0.00678188 | 0.00443289 | -1.5299 | 0.126042 | | | price_ivt[item-full]_2 | -0.00645982 | 0.00189848 | -3.40262 | 0.000667424 | *** | | price_ivt[item-full]_3 | -0.00145029 | 0.00118748 | -1.22132 | 0.221965 | | | intercept[item]_0 | 0.697311 | 1.28022 | 0.544681 | 0.585973 | | | intercept[item]_1 | 1.8437 | 0.708514 | 2.6022 | 0.0092627 | ** | | intercept[item]_2 | 3.27381 | 0.624416 | 5.24299 | 1.57999e-07 | *** | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 Time taken: 11.617464065551758","title":"Train the Model"},{"location":"conditional_logit_model_mode_canada/#parameter-estimation-from-r","text":"The following is the R-output from the mlogit implementation, the estimation, standard error, and log-likelihood from our torch_choice implementation is the same as the result from mlogit implementation. We see that the final log-likelihood of models estimated using two packages are all around -1874 . The run() method calculates the standard deviation using \\(\\sqrt{\\text{diag}(H^{-1})}\\) , where \\(H\\) is the hessian of negative log-likelihood with repsect to model parameters. Names of coefficients are slightly different, one can use the following conversion table to compare estimations and standard deviations reported by both packages.","title":"Parameter Estimation from R"},{"location":"conditional_logit_model_mode_canada/#r-output","text":"install.packages ( \"mlogit\" ) library ( \"mlogit\" ) data ( \"ModeCanada\" , package = \"mlogit\" ) MC <- dfidx ( ModeCanada , subset = noalt == 4 ) ml.MC1 <- mlogit ( choice ~ cost + freq + ovt | income | ivt , MC , reflevel = 'air' ) summary ( ml.MC1 ) Call: mlogit(formula = choice ~ cost + freq + ovt | income | ivt, data = MC, reflevel = \"air\", method = \"nr\") Frequencies of alternatives:choice air train bus car 0.3738755 0.1666067 0.0035984 0.4559194 nr method 9 iterations, 0h:0m:0s g'(-H)^-1g = 0.00014 successive function values within tolerance limits Coefficients : Estimate Std. Error z-value Pr(>|z|) (Intercept):train 3.2741952 0.6244152 5.2436 1.575e-07 *** (Intercept):bus 0.6983381 1.2802466 0.5455 0.5854292 (Intercept):car 1.8441129 0.7085089 2.6028 0.0092464 ** cost -0.0333389 0.0070955 -4.6986 2.620e-06 *** freq 0.0925297 0.0050976 18.1517 < 2.2e-16 *** ovt -0.0430036 0.0032247 -13.3356 < 2.2e-16 *** income:train -0.0381466 0.0040831 -9.3426 < 2.2e-16 *** income:bus -0.0890867 0.0183471 -4.8556 1.200e-06 *** income:car -0.0279930 0.0038726 -7.2286 4.881e-13 *** ivt:air 0.0595097 0.0100727 5.9080 3.463e-09 *** ivt:train -0.0014504 0.0011875 -1.2214 0.2219430 ivt:bus -0.0067835 0.0044334 -1.5301 0.1259938 ivt:car -0.0064603 0.0018985 -3.4029 0.0006668 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Log-Likelihood: -1874.3 McFadden R^2: 0.35443 Likelihood ratio test : chisq = 2058.1 (p.value = < 2.22e-16)","title":"R Output"},{"location":"data_management/","text":"Tutorial: Data Management Author: Tianyu Du (tianyudu@stanford.edu) Note : please go through the introduction tutorial here before proceeding. This notebook aims to help users understand the functionality of ChoiceDataset object. The ChoiceDataset is an instance of the more general PyTorch dataset object holding information of consumer choices. The ChoiceDataset offers easy, clean and efficient data management. The Jupyter-notebook version of this tutorial can be found here . This tutorial provides in-depth explanations on how the torch-choice library manages data. We are also providing an easy-to-use data wrapper converting long-format dataset to ChoiceDataset here , you can harness the torch-choice library without going through this tutorial. Note : since this package was initially proposed for modelling consumer choices, attribute names of ChoiceDataset are borrowed from the consumer choice literature. Note : PyTorch uses the term tensor to denote high dimensional matrices, we will be using tensor and matrix interchangeably. After walking through this tutorial, you should be abel to initiate a ChoiceDataset object as the following and use it to manage data. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , # additional keywords of __init__ user_obs = user_obs , item_obs = item_obs , session_obs = session_obs , price_obs = price_obs ) Observables Observables are tensors with specific shapes, we classify observables into four categories based on their variations. Basic Usage Optionally, the researcher can incorporate observables of, for example, users and items. Currently, the package support the following types of observables, where \\(K_{...}\\) denote the number of observables. user_obs \\(\\in \\mathbb{R}^{U\\times K_{user}}\\) : user observables such as user age. item_obs \\(\\in \\mathbb{R}^{I\\times K_{item}}\\) : item observables such as item quality. session_obs \\(\\in \\mathbb{R}^{S \\times K_{session}}\\) : session observable such as whether the purchase was made on weekdays. price_obs \\(\\in \\mathbb{R}^{S \\times I \\times K_{price}}\\) , price observables are values depending on both session and item such as the price of item. The researcher should supply them with as appropriate keyword arguments while constructing the ChoiceDataset object. (Optional) Advanced Usage: Additional Observables In some cases, the researcher have multiple sets of user (or item, or session, or price) observables, say user income (a scalar variable) and user market membership . The user income a matrix in \\(\\mathbb{R}^{U\\times 1}\\) . Further, suppose there are four types of market membership: no-membership, silver-membership, gold-membership, and diamond-membership. The user market membership is a binary matrix in \\(\\{0, 1\\}^{U\\times 4}\\) if we one-hot encode users' membership status. In this case, the researcher can either 1. concatenate user_income and user_market_membership to a \\(\\mathbb{R}^{U\\times (1+4)}\\) matrix and supply it as a single user_obs as the following: dataset = ChoiceDataset ( ... , user_obs = torch . cat ([ user_income , user_market_membership ], dim = 1 ), ... ) 2. Or, supply these two sets of observables separately, namely a user_income \\(\\in \\mathbb{R}^{U \\times 1}\\) matrix and a user_market_membership \\(\\in \\mathbb{R}^{U \\times 4}\\) matrix as the following: dataset = ChoiceDataset ( ... , user_income = user_income , user_market_membership = user_market_membership , ... ) Supplying two separate sets of observables is particularly useful when the researcher wants different kinds of coefficients for different kinds of observables. For example, the researcher wishes to model the utility for user \\(u\\) to purchase item \\(i\\) in session \\(s\\) as the following: \\[ U_{usi} = \\beta_{i} X^{(u)}_{user\\ income} + \\gamma X^{(u)}_{user\\ market\\ membership} + \\varepsilon \\] Please note that the \\(\\beta_i\\) coefficient has an \\(i\\) subscript, which means it's item specific. The \\(\\gamma\\) coefficient has no subscript, which means it's the same for all items. The coefficient for user income is item-specific so that it captures the nature of the product (i.e., a luxury or an essential good). Additionally, the utility representation admits an user market membership becomes shoppers with active memberships tend to purchase more, and the coefficient of this term is constant across all items. As we will cover later in the modelling section, we need to supply two user observable tensors in this case for the model to build coefficient with different levels of variations (i.e., item-specific coefficients versus constant coefficients). In this case, the researcher needs to supply two tensors user_income and user_market_membership as keyword arguments to the ChoiceDataset constructor. Generally, the ChoiceDataset handles multiple user/item/session/price observables internally, the ChoiceDataset class identifies the variation of observables by their prefixes. For example, every keyword arguments passed into ChoiceDataset with name starting with item_ (except for the reserved item_availability ) will be treated as item observable tensors. Similarly, all keywords with names starting user_ , session_ and price_ (except for reserved names like user_index and session_index mentioned above) will be interpreted as user/session/price observable tensors. # import required dependencies. import numpy as np import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset # let's get a helper def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' ) Creating ChoiceDataset Object # Feel free to modify it as you want. num_users = 10 num_items = 4 num_sessions = 500 length_of_dataset = 10000 Step 1: Generate some random purchase records and observables We will be creating a randomly generated dataset with 10000 purchase records from 10 users, 4 items and 500 sessions. We use the term purchase record to denote the observation in the dataset due to the convention in Stata documentation (because observation meant something else in the Stata documentation and we don't want to confuse existing Stata users). As mentioned in the introduction tutorial, one purchase record consists of who (i.e., user) bought what (i.e., item) when and where (i.e., session). The length of the dataset equals the number of purchase records in it. The first step is to randomly generate the purchase records using the following code. For simplicity, we assume all items are available in all sessions. # create observables/features, the number of parameters are arbitrarily chosen. # generate 128 features for each user, e.g., race, gender. user_obs = torch . randn ( num_users , 128 ) # generate 64 features for each user, e.g., quality. item_obs = torch . randn ( num_items , 64 ) # generate 10 features for each session, e.g., weekday indicator. session_obs = torch . randn ( num_sessions , 10 ) # generate 12 features for each session user pair, e.g., the budget of that user at the shopping day. price_obs = torch . randn ( num_sessions , num_items , 12 ) We then generate random observable tensors for users, items, sessions and price observables, the size of observables of each type (i.e., the last dimension in the shape) is arbitrarily chosen. Notes on Encodings Since we will be using PyTorch to train our model, we represent their identities with consecutive integer values instead of the raw human-readable names of items (e.g., Dell 24-inch LCD monitor). Similarly, you would need to encode user indices and session indices as well. Raw item names can be encoded easily with sklearn.preprocessing.LabelEncoder (The sklearn.preprocessing.OrdinalEncoder works as well). item_index = torch . LongTensor ( np . random . choice ( num_items , size = length_of_dataset )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = length_of_dataset )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = length_of_dataset )) # assume all items are available in all sessions. item_availability = torch . ones ( num_sessions , num_items ) . bool () Step 2: Initialize the ChoiceDataset . You can construct a choice set using the following code, which manage all information for you. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , # additional keywords of __init__ user_obs = user_obs , item_obs = item_obs , session_obs = session_obs , price_obs = price_obs ) What you can do with the ChoiceDataset ? print(dataset) and dataset.__str__ The command print(dataset) will provide a quick overview of shapes of tensors included in the object as well as where the dataset is located (i.e., host memory or GPU memory). print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) dataset.summary() The summary method provides preliminary summarization of the dataset. print ( pd . DataFrame ( dataset . user_index ) . value_counts ()) 4 1038 8 1035 5 1024 1 1010 2 997 0 990 6 981 9 980 3 974 7 971 dtype: int64 print ( pd . DataFrame ( dataset . item_index ) . value_counts ()) 0 2575 1 2539 2 2467 3 2419 dtype: int64 dataset . summary () ChoiceDataset with 500 sessions, 4 items, 10 users, 10000 purchase records (observations) . The most frequent user is 4 with 1038 observations; the least frequent user is 7 with 971 observations; on average, there are 1000.00 observations per user. 5 most frequent users are: 4(1038 times), 8(1035 times), 5(1024 times), 1(1010 times), 2(997 times). 5 least frequent users are: 7(971 times), 3(974 times), 9(980 times), 6(981 times), 0(990 times). The most frequent item is 0, it was chosen 2575 times; the least frequent item is 3 it was 2419 times; on average, each item was purchased 2500.00 times. 4 most frequent items are: 0(2575 times), 1(2539 times), 2(2467 times), 3(2419 times). 4 least frequent items are: 3(2419 times), 2(2467 times), 1(2539 times), 0(2575 times). Attribute Summaries: Observable Tensor 'user_obs' with shape torch.Size([10, 128]) 0 1 2 3 4 5 \\ count 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 mean 0.687878 -0.339077 -0.375829 0.086242 0.250604 -0.344643 std 0.738520 1.259936 0.844018 0.766233 0.802785 0.645239 min -0.578577 -2.135251 -1.335928 -0.911508 -1.396776 -1.519729 25% 0.264708 -0.889820 -0.845100 -0.414891 -0.132619 -0.699887 50% 0.902505 -0.603065 -0.638757 -0.289223 0.297693 -0.405371 75% 1.155211 0.021188 -0.190907 0.712183 0.768554 0.117107 max 1.623162 2.217712 1.624211 1.252059 1.273116 0.571998 6 7 8 9 ... 118 119 \\ count 10.000000 10.000000 10.000000 10.000000 ... 10.000000 10.000000 mean 0.423672 0.325855 0.258114 -0.199072 ... -0.165618 -0.378175 std 1.304160 0.815934 0.938925 1.344848 ... 1.135625 0.940863 min -1.440672 -1.068176 -1.280547 -2.819688 ... -1.567793 -1.604171 25% -0.535055 0.051598 -0.178302 -0.801871 ... -1.114392 -1.066492 50% 0.502826 0.369002 0.230939 -0.576039 ... -0.114789 -0.587483 75% 1.227700 0.899518 0.740881 0.820789 ... 0.602045 0.160254 max 2.462891 1.440098 1.828760 1.866570 ... 1.854828 1.386001 120 121 122 123 124 125 \\ count 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 mean -0.557321 0.402392 -0.070746 -0.770201 0.594842 0.572671 std 1.128886 0.899030 0.757537 1.044478 0.956856 0.883374 min -3.131332 -0.907885 -1.296398 -2.159384 -1.244177 -0.462607 25% -0.834223 -0.059528 -0.222124 -1.332558 0.234198 -0.008799 50% -0.613761 0.117478 -0.109676 -0.984450 0.656855 0.466357 75% 0.040239 1.136383 0.416972 -0.285216 1.246513 0.772441 max 1.087999 1.757588 1.022053 1.486507 2.010775 2.162550 126 127 count 10.000000 10.000000 mean 0.226993 -0.064205 std 1.463179 0.602277 min -1.731004 -0.865115 25% -0.951169 -0.418553 50% 0.174763 -0.112277 75% 0.773072 0.353951 max 2.991696 0.804881 [8 rows x 128 columns] Observable Tensor 'item_obs' with shape torch.Size([4, 64]) 0 1 2 3 4 5 6 \\ count 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 mean 0.287015 -0.180256 -0.239000 0.169168 0.159036 0.385342 -1.142672 std 1.339318 1.603530 0.722772 0.473407 0.392562 1.327739 0.566069 min -1.138152 -2.212473 -1.051363 -0.538771 -0.330795 -0.517352 -1.770297 25% -0.558802 -0.990083 -0.745828 0.132031 -0.006671 -0.485835 -1.397787 50% 0.170810 -0.012201 -0.154058 0.385432 0.174086 -0.125969 -1.199654 75% 1.016628 0.797626 0.352770 0.422569 0.339793 0.745208 -0.944538 max 1.944591 1.515852 0.403479 0.444577 0.618768 2.310656 -0.401083 7 8 9 ... 54 55 56 \\ count 4.000000 4.000000 4.000000 ... 4.000000 4.000000 4.000000 mean 0.581071 -0.169341 0.076562 ... 0.055457 -0.002887 -0.160406 std 0.972295 0.978922 1.116274 ... 0.777132 0.903879 1.140101 min -0.596834 -1.309131 -1.563906 ... -0.481757 -0.997574 -1.721709 25% -0.025344 -0.718815 -0.153971 ... -0.442894 -0.340660 -0.631280 50% 0.745386 -0.177989 0.514336 ... -0.240767 -0.105541 0.117918 75% 1.351801 0.371485 0.744870 ... 0.257583 0.232232 0.588793 max 1.430348 0.987744 0.841483 ... 1.185118 1.197110 0.844249 57 58 59 60 61 62 63 count 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 mean 0.149579 0.199678 0.088542 -0.356379 1.004674 0.095064 -0.548665 std 0.963564 0.744614 1.170228 0.833992 0.559029 0.912057 0.730697 min -0.760765 -0.419252 -1.038935 -0.989042 0.442226 -0.989018 -1.445138 25% -0.268040 -0.383280 -0.604213 -0.970008 0.592259 -0.492793 -0.790356 50% -0.075941 0.036190 -0.142981 -0.611959 0.966522 0.230826 -0.546745 75% 0.341678 0.619148 0.549774 0.001670 1.378937 0.818683 -0.305054 max 1.510964 1.145585 1.679067 0.787444 1.643426 0.907622 0.343970 [8 rows x 64 columns] Observable Tensor 'session_obs' with shape torch.Size([500, 10]) 0 1 2 3 4 5 \\ count 500.000000 500.000000 500.000000 500.000000 500.000000 500.000000 mean -0.025211 -0.018355 -0.002907 0.091295 -0.061911 -0.046364 std 0.976283 1.029875 0.959884 0.968500 1.020114 1.010222 min -2.642895 -3.091050 -3.572037 -2.406249 -3.147900 -3.357277 25% -0.745162 -0.685578 -0.636044 -0.629955 -0.754234 -0.732924 50% -0.018775 0.017807 -0.018642 0.112322 -0.090321 -0.070502 75% 0.652438 0.646001 0.601829 0.722870 0.640275 0.652521 max 3.044069 3.191774 2.521059 2.695970 3.166039 2.714594 6 7 8 9 count 500.000000 500.000000 500.000000 500.000000 mean 0.000907 0.001370 0.070499 -0.007936 std 1.015561 1.032878 1.036212 0.936091 min -2.677915 -3.489751 -2.953354 -2.424499 25% -0.679291 -0.671086 -0.582997 -0.681405 50% 0.002569 -0.009368 0.087901 0.010856 75% 0.703671 0.732814 0.737692 0.618773 max 2.528283 3.259835 2.827300 2.492085 Observable Tensor 'price_obs' with shape torch.Size([500, 4, 12]) device=cpu dataset.num_{users, items, sessions} You can use the num_{users, items, sessions} attribute to obtain the number of users, items, and sessions, they are determined automatically from the {user, item, session}_obs tensors provided while initializing the dataset object. Note : the print =: operator requires Python3.8 or higher, you can remove =: if you are using an earlier copy of Python. print ( f ' { dataset . num_users =:} ' ) print ( f ' { dataset . num_items =:} ' ) print ( f ' { dataset . num_sessions =:} ' ) print ( f ' { len ( dataset ) =:} ' ) dataset.num_users=10 dataset.num_items=4 dataset.num_sessions=500 len(dataset)=10000 dataset.clone() The ChoiceDataset offers a clone method allow you to make copy of the dataset, you can modify the cloned dataset arbitrarily without changing the original dataset. # clone print ( dataset . item_index [: 10 ]) dataset_cloned = dataset . clone () dataset_cloned . item_index = 99 * torch . ones ( num_sessions ) print ( dataset_cloned . item_index [: 10 ]) print ( dataset . item_index [: 10 ]) # does not change the original dataset. tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) tensor([99., 99., 99., 99., 99., 99., 99., 99., 99., 99.]) tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) dataset.to('cuda') and dataset._check_device_consistency() . One key advantage of the torch_choice and bemb is their compatibility with GPUs, you can easily move tensors in a ChoiceDataset object between host memory (i.e., cpu memory) and device memory (i.e., GPU memory) using dataset.to() method. Please note that the following code runs only if your machine has a compatible GPU and GPU-compatible version of PyTorch installed. Similarly, one can move data to host-memory using dataset.to('cpu') . The dataset also provides a dataset._check_device_consistency() method to check if all tensors are on the same device. If we only move the label to cpu without moving other tensors, this will result in an error message. # move to device print ( f ' { dataset . device =:} ' ) print ( f ' { dataset . device =:} ' ) print ( f ' { dataset . user_index . device =:} ' ) print ( f ' { dataset . session_index . device =:} ' ) dataset = dataset . to ( 'cuda' ) print ( f ' { dataset . device =:} ' ) print ( f ' { dataset . item_index . device =:} ' ) print ( f ' { dataset . user_index . device =:} ' ) print ( f ' { dataset . session_index . device =:} ' ) dataset.device=cpu dataset.device=cpu dataset.user_index.device=cpu dataset.session_index.device=cpu dataset.device=cuda:0 dataset.item_index.device=cuda:0 dataset.user_index.device=cuda:0 dataset.session_index.device=cuda:0 dataset . _check_device_consistency () # # NOTE: this cell will result errors, this is intentional. dataset . item_index = dataset . item_index . to ( 'cpu' ) dataset . _check_device_consistency () --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-56-40d626c6d436> in <module> 1 # # NOTE: this cell will result errors, this is intentional. 2 dataset.item_index = dataset.item_index.to('cpu') ----> 3 dataset._check_device_consistency() ~/Development/torch-choice/torch_choice/data/choice_dataset.py in _check_device_consistency(self) 180 devices.append(val.device) 181 if len(set(devices)) > 1: --> 182 raise Exception(f'Found tensors on different devices: {set(devices)}.', 183 'Use dataset.to() method to align devices.') 184 Exception: (\"Found tensors on different devices: {device(type='cuda', index=0), device(type='cpu')}.\", 'Use dataset.to() method to align devices.') # create dictionary inputs for model.forward() # collapse to a dictionary object. print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.price_obs.shape=torch.Size([10000, 4, 12]) Subset method One can use dataset[indices] with indices as an integer-valued tensor or array to get the corresponding rows of the dataset. The example code block below queries the 6256-th, 4119-th, 453-th, 5520-th, and 1877-th row of the dataset object. The item_index , user_index , session_index of the resulted subset will be different from the original dataset, but other tensors will be the same. # __getitem__ to get batch. # pick 5 random sessions as the mini-batch. dataset = dataset . to ( 'cpu' ) indices = torch . Tensor ( np . random . choice ( len ( dataset ), size = 5 , replace = False )) . long () print ( indices ) subset = dataset [ indices ] print ( dataset ) print ( subset ) # print_dict_shape(subset.x_dict) # assert torch.all(dataset.x_dict['price_obs'][indices, :, :] == subset.x_dict['price_obs']) # assert torch.all(dataset.item_index[indices] == subset.item_index) tensor([1118, 976, 1956, 290, 8283]) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) ChoiceDataset(label=[], item_index=[5], user_index=[5], session_index=[5], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) The subset method internally creates a copy of the datasets so that any modification applied on the subset will not be reflected on the original dataset. The researcher can feel free to do in-place modification to the subset. print ( subset . item_index ) print ( dataset . item_index [ indices ]) subset . item_index += 1 # modifying the batch does not change the original dataset. print ( subset . item_index ) print ( dataset . item_index [ indices ]) tensor([0, 1, 0, 0, 0]) tensor([0, 1, 0, 0, 0]) tensor([1, 2, 1, 1, 1]) tensor([0, 1, 0, 0, 0]) print ( subset . item_obs [ 0 , 0 ]) print ( dataset . item_obs [ 0 , 0 ]) subset . item_obs += 1 print ( subset . item_obs [ 0 , 0 ]) print ( dataset . item_obs [ 0 , 0 ]) tensor(-1.5811) tensor(-1.5811) tensor(-0.5811) tensor(-1.5811) print ( id ( subset . item_index )) print ( id ( dataset . item_index [ indices ])) 140339656298640 140339656150528 Using Pytorch dataloader for the training loop. The ChoiceDataset object natively support batch samplers from PyTorch. For demonstration purpose, we turned off the shuffling option. from torch.utils.data.sampler import BatchSampler , SequentialSampler , RandomSampler shuffle = False # for demonstration purpose. batch_size = 32 # Create sampler. sampler = BatchSampler ( RandomSampler ( dataset ) if shuffle else SequentialSampler ( dataset ), batch_size = batch_size , drop_last = False ) dataloader = torch . utils . data . DataLoader ( dataset , sampler = sampler , num_workers = 1 , collate_fn = lambda x : x [ 0 ], pin_memory = ( dataset . device == 'cpu' )) print ( f ' { item_obs . shape =:} ' ) item_obs_all = item_obs . view ( 1 , num_items , - 1 ) . expand ( len ( dataset ), - 1 , - 1 ) item_obs_all = item_obs_all . to ( dataset . device ) item_index_all = item_index . to ( dataset . device ) print ( f ' { item_obs_all . shape =:} ' ) item_obs.shape=torch.Size([4, 64]) item_obs_all.shape=torch.Size([10000, 4, 64]) for i , batch in enumerate ( dataloader ): first , last = i * batch_size , min ( len ( dataset ), ( i + 1 ) * batch_size ) idx = torch . arange ( first , last ) assert torch . all ( item_obs_all [ idx , :, :] == batch . x_dict [ 'item_obs' ]) assert torch . all ( item_index_all [ idx ] == batch . item_index ) batch . x_dict [ 'item_obs' ] . shape torch.Size([16, 4, 64]) print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.price_obs.shape=torch.Size([10000, 4, 12]) dataset . __len__ () 10000 Chaining Multiple Datasets: JointDataset Examples dataset1 = dataset . clone () dataset2 = dataset . clone () joint_dataset = JointDataset ( the_dataset = dataset1 , another_dataset = dataset2 ) joint_dataset JointDataset with 2 sub-datasets: ( the_dataset: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) another_dataset: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) )","title":"Data Management"},{"location":"data_management/#tutorial-data-management","text":"Author: Tianyu Du (tianyudu@stanford.edu) Note : please go through the introduction tutorial here before proceeding. This notebook aims to help users understand the functionality of ChoiceDataset object. The ChoiceDataset is an instance of the more general PyTorch dataset object holding information of consumer choices. The ChoiceDataset offers easy, clean and efficient data management. The Jupyter-notebook version of this tutorial can be found here . This tutorial provides in-depth explanations on how the torch-choice library manages data. We are also providing an easy-to-use data wrapper converting long-format dataset to ChoiceDataset here , you can harness the torch-choice library without going through this tutorial. Note : since this package was initially proposed for modelling consumer choices, attribute names of ChoiceDataset are borrowed from the consumer choice literature. Note : PyTorch uses the term tensor to denote high dimensional matrices, we will be using tensor and matrix interchangeably. After walking through this tutorial, you should be abel to initiate a ChoiceDataset object as the following and use it to manage data. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , # additional keywords of __init__ user_obs = user_obs , item_obs = item_obs , session_obs = session_obs , price_obs = price_obs )","title":"Tutorial: Data Management"},{"location":"data_management/#observables","text":"Observables are tensors with specific shapes, we classify observables into four categories based on their variations.","title":"Observables"},{"location":"data_management/#basic-usage","text":"Optionally, the researcher can incorporate observables of, for example, users and items. Currently, the package support the following types of observables, where \\(K_{...}\\) denote the number of observables. user_obs \\(\\in \\mathbb{R}^{U\\times K_{user}}\\) : user observables such as user age. item_obs \\(\\in \\mathbb{R}^{I\\times K_{item}}\\) : item observables such as item quality. session_obs \\(\\in \\mathbb{R}^{S \\times K_{session}}\\) : session observable such as whether the purchase was made on weekdays. price_obs \\(\\in \\mathbb{R}^{S \\times I \\times K_{price}}\\) , price observables are values depending on both session and item such as the price of item. The researcher should supply them with as appropriate keyword arguments while constructing the ChoiceDataset object.","title":"Basic Usage"},{"location":"data_management/#optional-advanced-usage-additional-observables","text":"In some cases, the researcher have multiple sets of user (or item, or session, or price) observables, say user income (a scalar variable) and user market membership . The user income a matrix in \\(\\mathbb{R}^{U\\times 1}\\) . Further, suppose there are four types of market membership: no-membership, silver-membership, gold-membership, and diamond-membership. The user market membership is a binary matrix in \\(\\{0, 1\\}^{U\\times 4}\\) if we one-hot encode users' membership status. In this case, the researcher can either 1. concatenate user_income and user_market_membership to a \\(\\mathbb{R}^{U\\times (1+4)}\\) matrix and supply it as a single user_obs as the following: dataset = ChoiceDataset ( ... , user_obs = torch . cat ([ user_income , user_market_membership ], dim = 1 ), ... ) 2. Or, supply these two sets of observables separately, namely a user_income \\(\\in \\mathbb{R}^{U \\times 1}\\) matrix and a user_market_membership \\(\\in \\mathbb{R}^{U \\times 4}\\) matrix as the following: dataset = ChoiceDataset ( ... , user_income = user_income , user_market_membership = user_market_membership , ... ) Supplying two separate sets of observables is particularly useful when the researcher wants different kinds of coefficients for different kinds of observables. For example, the researcher wishes to model the utility for user \\(u\\) to purchase item \\(i\\) in session \\(s\\) as the following: \\[ U_{usi} = \\beta_{i} X^{(u)}_{user\\ income} + \\gamma X^{(u)}_{user\\ market\\ membership} + \\varepsilon \\] Please note that the \\(\\beta_i\\) coefficient has an \\(i\\) subscript, which means it's item specific. The \\(\\gamma\\) coefficient has no subscript, which means it's the same for all items. The coefficient for user income is item-specific so that it captures the nature of the product (i.e., a luxury or an essential good). Additionally, the utility representation admits an user market membership becomes shoppers with active memberships tend to purchase more, and the coefficient of this term is constant across all items. As we will cover later in the modelling section, we need to supply two user observable tensors in this case for the model to build coefficient with different levels of variations (i.e., item-specific coefficients versus constant coefficients). In this case, the researcher needs to supply two tensors user_income and user_market_membership as keyword arguments to the ChoiceDataset constructor. Generally, the ChoiceDataset handles multiple user/item/session/price observables internally, the ChoiceDataset class identifies the variation of observables by their prefixes. For example, every keyword arguments passed into ChoiceDataset with name starting with item_ (except for the reserved item_availability ) will be treated as item observable tensors. Similarly, all keywords with names starting user_ , session_ and price_ (except for reserved names like user_index and session_index mentioned above) will be interpreted as user/session/price observable tensors. # import required dependencies. import numpy as np import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset # let's get a helper def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' )","title":"(Optional) Advanced Usage: Additional Observables"},{"location":"data_management/#creating-choicedataset-object","text":"# Feel free to modify it as you want. num_users = 10 num_items = 4 num_sessions = 500 length_of_dataset = 10000","title":"Creating  ChoiceDataset Object"},{"location":"data_management/#step-1-generate-some-random-purchase-records-and-observables","text":"We will be creating a randomly generated dataset with 10000 purchase records from 10 users, 4 items and 500 sessions. We use the term purchase record to denote the observation in the dataset due to the convention in Stata documentation (because observation meant something else in the Stata documentation and we don't want to confuse existing Stata users). As mentioned in the introduction tutorial, one purchase record consists of who (i.e., user) bought what (i.e., item) when and where (i.e., session). The length of the dataset equals the number of purchase records in it. The first step is to randomly generate the purchase records using the following code. For simplicity, we assume all items are available in all sessions. # create observables/features, the number of parameters are arbitrarily chosen. # generate 128 features for each user, e.g., race, gender. user_obs = torch . randn ( num_users , 128 ) # generate 64 features for each user, e.g., quality. item_obs = torch . randn ( num_items , 64 ) # generate 10 features for each session, e.g., weekday indicator. session_obs = torch . randn ( num_sessions , 10 ) # generate 12 features for each session user pair, e.g., the budget of that user at the shopping day. price_obs = torch . randn ( num_sessions , num_items , 12 ) We then generate random observable tensors for users, items, sessions and price observables, the size of observables of each type (i.e., the last dimension in the shape) is arbitrarily chosen. Notes on Encodings Since we will be using PyTorch to train our model, we represent their identities with consecutive integer values instead of the raw human-readable names of items (e.g., Dell 24-inch LCD monitor). Similarly, you would need to encode user indices and session indices as well. Raw item names can be encoded easily with sklearn.preprocessing.LabelEncoder (The sklearn.preprocessing.OrdinalEncoder works as well). item_index = torch . LongTensor ( np . random . choice ( num_items , size = length_of_dataset )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = length_of_dataset )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = length_of_dataset )) # assume all items are available in all sessions. item_availability = torch . ones ( num_sessions , num_items ) . bool ()","title":"Step 1: Generate some random purchase records and observables"},{"location":"data_management/#step-2-initialize-the-choicedataset","text":"You can construct a choice set using the following code, which manage all information for you. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , # additional keywords of __init__ user_obs = user_obs , item_obs = item_obs , session_obs = session_obs , price_obs = price_obs )","title":"Step 2: Initialize the ChoiceDataset."},{"location":"data_management/#what-you-can-do-with-the-choicedataset","text":"","title":"What you can do with the ChoiceDataset?"},{"location":"data_management/#printdataset-and-dataset__str__","text":"The command print(dataset) will provide a quick overview of shapes of tensors included in the object as well as where the dataset is located (i.e., host memory or GPU memory). print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu)","title":"print(dataset) and dataset.__str__"},{"location":"data_management/#datasetsummary","text":"The summary method provides preliminary summarization of the dataset. print ( pd . DataFrame ( dataset . user_index ) . value_counts ()) 4 1038 8 1035 5 1024 1 1010 2 997 0 990 6 981 9 980 3 974 7 971 dtype: int64 print ( pd . DataFrame ( dataset . item_index ) . value_counts ()) 0 2575 1 2539 2 2467 3 2419 dtype: int64 dataset . summary () ChoiceDataset with 500 sessions, 4 items, 10 users, 10000 purchase records (observations) . The most frequent user is 4 with 1038 observations; the least frequent user is 7 with 971 observations; on average, there are 1000.00 observations per user. 5 most frequent users are: 4(1038 times), 8(1035 times), 5(1024 times), 1(1010 times), 2(997 times). 5 least frequent users are: 7(971 times), 3(974 times), 9(980 times), 6(981 times), 0(990 times). The most frequent item is 0, it was chosen 2575 times; the least frequent item is 3 it was 2419 times; on average, each item was purchased 2500.00 times. 4 most frequent items are: 0(2575 times), 1(2539 times), 2(2467 times), 3(2419 times). 4 least frequent items are: 3(2419 times), 2(2467 times), 1(2539 times), 0(2575 times). Attribute Summaries: Observable Tensor 'user_obs' with shape torch.Size([10, 128]) 0 1 2 3 4 5 \\ count 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 mean 0.687878 -0.339077 -0.375829 0.086242 0.250604 -0.344643 std 0.738520 1.259936 0.844018 0.766233 0.802785 0.645239 min -0.578577 -2.135251 -1.335928 -0.911508 -1.396776 -1.519729 25% 0.264708 -0.889820 -0.845100 -0.414891 -0.132619 -0.699887 50% 0.902505 -0.603065 -0.638757 -0.289223 0.297693 -0.405371 75% 1.155211 0.021188 -0.190907 0.712183 0.768554 0.117107 max 1.623162 2.217712 1.624211 1.252059 1.273116 0.571998 6 7 8 9 ... 118 119 \\ count 10.000000 10.000000 10.000000 10.000000 ... 10.000000 10.000000 mean 0.423672 0.325855 0.258114 -0.199072 ... -0.165618 -0.378175 std 1.304160 0.815934 0.938925 1.344848 ... 1.135625 0.940863 min -1.440672 -1.068176 -1.280547 -2.819688 ... -1.567793 -1.604171 25% -0.535055 0.051598 -0.178302 -0.801871 ... -1.114392 -1.066492 50% 0.502826 0.369002 0.230939 -0.576039 ... -0.114789 -0.587483 75% 1.227700 0.899518 0.740881 0.820789 ... 0.602045 0.160254 max 2.462891 1.440098 1.828760 1.866570 ... 1.854828 1.386001 120 121 122 123 124 125 \\ count 10.000000 10.000000 10.000000 10.000000 10.000000 10.000000 mean -0.557321 0.402392 -0.070746 -0.770201 0.594842 0.572671 std 1.128886 0.899030 0.757537 1.044478 0.956856 0.883374 min -3.131332 -0.907885 -1.296398 -2.159384 -1.244177 -0.462607 25% -0.834223 -0.059528 -0.222124 -1.332558 0.234198 -0.008799 50% -0.613761 0.117478 -0.109676 -0.984450 0.656855 0.466357 75% 0.040239 1.136383 0.416972 -0.285216 1.246513 0.772441 max 1.087999 1.757588 1.022053 1.486507 2.010775 2.162550 126 127 count 10.000000 10.000000 mean 0.226993 -0.064205 std 1.463179 0.602277 min -1.731004 -0.865115 25% -0.951169 -0.418553 50% 0.174763 -0.112277 75% 0.773072 0.353951 max 2.991696 0.804881 [8 rows x 128 columns] Observable Tensor 'item_obs' with shape torch.Size([4, 64]) 0 1 2 3 4 5 6 \\ count 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 mean 0.287015 -0.180256 -0.239000 0.169168 0.159036 0.385342 -1.142672 std 1.339318 1.603530 0.722772 0.473407 0.392562 1.327739 0.566069 min -1.138152 -2.212473 -1.051363 -0.538771 -0.330795 -0.517352 -1.770297 25% -0.558802 -0.990083 -0.745828 0.132031 -0.006671 -0.485835 -1.397787 50% 0.170810 -0.012201 -0.154058 0.385432 0.174086 -0.125969 -1.199654 75% 1.016628 0.797626 0.352770 0.422569 0.339793 0.745208 -0.944538 max 1.944591 1.515852 0.403479 0.444577 0.618768 2.310656 -0.401083 7 8 9 ... 54 55 56 \\ count 4.000000 4.000000 4.000000 ... 4.000000 4.000000 4.000000 mean 0.581071 -0.169341 0.076562 ... 0.055457 -0.002887 -0.160406 std 0.972295 0.978922 1.116274 ... 0.777132 0.903879 1.140101 min -0.596834 -1.309131 -1.563906 ... -0.481757 -0.997574 -1.721709 25% -0.025344 -0.718815 -0.153971 ... -0.442894 -0.340660 -0.631280 50% 0.745386 -0.177989 0.514336 ... -0.240767 -0.105541 0.117918 75% 1.351801 0.371485 0.744870 ... 0.257583 0.232232 0.588793 max 1.430348 0.987744 0.841483 ... 1.185118 1.197110 0.844249 57 58 59 60 61 62 63 count 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 mean 0.149579 0.199678 0.088542 -0.356379 1.004674 0.095064 -0.548665 std 0.963564 0.744614 1.170228 0.833992 0.559029 0.912057 0.730697 min -0.760765 -0.419252 -1.038935 -0.989042 0.442226 -0.989018 -1.445138 25% -0.268040 -0.383280 -0.604213 -0.970008 0.592259 -0.492793 -0.790356 50% -0.075941 0.036190 -0.142981 -0.611959 0.966522 0.230826 -0.546745 75% 0.341678 0.619148 0.549774 0.001670 1.378937 0.818683 -0.305054 max 1.510964 1.145585 1.679067 0.787444 1.643426 0.907622 0.343970 [8 rows x 64 columns] Observable Tensor 'session_obs' with shape torch.Size([500, 10]) 0 1 2 3 4 5 \\ count 500.000000 500.000000 500.000000 500.000000 500.000000 500.000000 mean -0.025211 -0.018355 -0.002907 0.091295 -0.061911 -0.046364 std 0.976283 1.029875 0.959884 0.968500 1.020114 1.010222 min -2.642895 -3.091050 -3.572037 -2.406249 -3.147900 -3.357277 25% -0.745162 -0.685578 -0.636044 -0.629955 -0.754234 -0.732924 50% -0.018775 0.017807 -0.018642 0.112322 -0.090321 -0.070502 75% 0.652438 0.646001 0.601829 0.722870 0.640275 0.652521 max 3.044069 3.191774 2.521059 2.695970 3.166039 2.714594 6 7 8 9 count 500.000000 500.000000 500.000000 500.000000 mean 0.000907 0.001370 0.070499 -0.007936 std 1.015561 1.032878 1.036212 0.936091 min -2.677915 -3.489751 -2.953354 -2.424499 25% -0.679291 -0.671086 -0.582997 -0.681405 50% 0.002569 -0.009368 0.087901 0.010856 75% 0.703671 0.732814 0.737692 0.618773 max 2.528283 3.259835 2.827300 2.492085 Observable Tensor 'price_obs' with shape torch.Size([500, 4, 12]) device=cpu","title":"dataset.summary()"},{"location":"data_management/#datasetnum_users-items-sessions","text":"You can use the num_{users, items, sessions} attribute to obtain the number of users, items, and sessions, they are determined automatically from the {user, item, session}_obs tensors provided while initializing the dataset object. Note : the print =: operator requires Python3.8 or higher, you can remove =: if you are using an earlier copy of Python. print ( f ' { dataset . num_users =:} ' ) print ( f ' { dataset . num_items =:} ' ) print ( f ' { dataset . num_sessions =:} ' ) print ( f ' { len ( dataset ) =:} ' ) dataset.num_users=10 dataset.num_items=4 dataset.num_sessions=500 len(dataset)=10000","title":"dataset.num_{users, items, sessions}"},{"location":"data_management/#datasetclone","text":"The ChoiceDataset offers a clone method allow you to make copy of the dataset, you can modify the cloned dataset arbitrarily without changing the original dataset. # clone print ( dataset . item_index [: 10 ]) dataset_cloned = dataset . clone () dataset_cloned . item_index = 99 * torch . ones ( num_sessions ) print ( dataset_cloned . item_index [: 10 ]) print ( dataset . item_index [: 10 ]) # does not change the original dataset. tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) tensor([99., 99., 99., 99., 99., 99., 99., 99., 99., 99.]) tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1])","title":"dataset.clone()"},{"location":"data_management/#datasettocuda-and-dataset_check_device_consistency","text":"One key advantage of the torch_choice and bemb is their compatibility with GPUs, you can easily move tensors in a ChoiceDataset object between host memory (i.e., cpu memory) and device memory (i.e., GPU memory) using dataset.to() method. Please note that the following code runs only if your machine has a compatible GPU and GPU-compatible version of PyTorch installed. Similarly, one can move data to host-memory using dataset.to('cpu') . The dataset also provides a dataset._check_device_consistency() method to check if all tensors are on the same device. If we only move the label to cpu without moving other tensors, this will result in an error message. # move to device print ( f ' { dataset . device =:} ' ) print ( f ' { dataset . device =:} ' ) print ( f ' { dataset . user_index . device =:} ' ) print ( f ' { dataset . session_index . device =:} ' ) dataset = dataset . to ( 'cuda' ) print ( f ' { dataset . device =:} ' ) print ( f ' { dataset . item_index . device =:} ' ) print ( f ' { dataset . user_index . device =:} ' ) print ( f ' { dataset . session_index . device =:} ' ) dataset.device=cpu dataset.device=cpu dataset.user_index.device=cpu dataset.session_index.device=cpu dataset.device=cuda:0 dataset.item_index.device=cuda:0 dataset.user_index.device=cuda:0 dataset.session_index.device=cuda:0 dataset . _check_device_consistency () # # NOTE: this cell will result errors, this is intentional. dataset . item_index = dataset . item_index . to ( 'cpu' ) dataset . _check_device_consistency () --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-56-40d626c6d436> in <module> 1 # # NOTE: this cell will result errors, this is intentional. 2 dataset.item_index = dataset.item_index.to('cpu') ----> 3 dataset._check_device_consistency() ~/Development/torch-choice/torch_choice/data/choice_dataset.py in _check_device_consistency(self) 180 devices.append(val.device) 181 if len(set(devices)) > 1: --> 182 raise Exception(f'Found tensors on different devices: {set(devices)}.', 183 'Use dataset.to() method to align devices.') 184 Exception: (\"Found tensors on different devices: {device(type='cuda', index=0), device(type='cpu')}.\", 'Use dataset.to() method to align devices.') # create dictionary inputs for model.forward() # collapse to a dictionary object. print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.price_obs.shape=torch.Size([10000, 4, 12])","title":"dataset.to('cuda') and dataset._check_device_consistency()."},{"location":"data_management/#subset-method","text":"One can use dataset[indices] with indices as an integer-valued tensor or array to get the corresponding rows of the dataset. The example code block below queries the 6256-th, 4119-th, 453-th, 5520-th, and 1877-th row of the dataset object. The item_index , user_index , session_index of the resulted subset will be different from the original dataset, but other tensors will be the same. # __getitem__ to get batch. # pick 5 random sessions as the mini-batch. dataset = dataset . to ( 'cpu' ) indices = torch . Tensor ( np . random . choice ( len ( dataset ), size = 5 , replace = False )) . long () print ( indices ) subset = dataset [ indices ] print ( dataset ) print ( subset ) # print_dict_shape(subset.x_dict) # assert torch.all(dataset.x_dict['price_obs'][indices, :, :] == subset.x_dict['price_obs']) # assert torch.all(dataset.item_index[indices] == subset.item_index) tensor([1118, 976, 1956, 290, 8283]) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) ChoiceDataset(label=[], item_index=[5], user_index=[5], session_index=[5], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) The subset method internally creates a copy of the datasets so that any modification applied on the subset will not be reflected on the original dataset. The researcher can feel free to do in-place modification to the subset. print ( subset . item_index ) print ( dataset . item_index [ indices ]) subset . item_index += 1 # modifying the batch does not change the original dataset. print ( subset . item_index ) print ( dataset . item_index [ indices ]) tensor([0, 1, 0, 0, 0]) tensor([0, 1, 0, 0, 0]) tensor([1, 2, 1, 1, 1]) tensor([0, 1, 0, 0, 0]) print ( subset . item_obs [ 0 , 0 ]) print ( dataset . item_obs [ 0 , 0 ]) subset . item_obs += 1 print ( subset . item_obs [ 0 , 0 ]) print ( dataset . item_obs [ 0 , 0 ]) tensor(-1.5811) tensor(-1.5811) tensor(-0.5811) tensor(-1.5811) print ( id ( subset . item_index )) print ( id ( dataset . item_index [ indices ])) 140339656298640 140339656150528","title":"Subset method"},{"location":"data_management/#using-pytorch-dataloader-for-the-training-loop","text":"The ChoiceDataset object natively support batch samplers from PyTorch. For demonstration purpose, we turned off the shuffling option. from torch.utils.data.sampler import BatchSampler , SequentialSampler , RandomSampler shuffle = False # for demonstration purpose. batch_size = 32 # Create sampler. sampler = BatchSampler ( RandomSampler ( dataset ) if shuffle else SequentialSampler ( dataset ), batch_size = batch_size , drop_last = False ) dataloader = torch . utils . data . DataLoader ( dataset , sampler = sampler , num_workers = 1 , collate_fn = lambda x : x [ 0 ], pin_memory = ( dataset . device == 'cpu' )) print ( f ' { item_obs . shape =:} ' ) item_obs_all = item_obs . view ( 1 , num_items , - 1 ) . expand ( len ( dataset ), - 1 , - 1 ) item_obs_all = item_obs_all . to ( dataset . device ) item_index_all = item_index . to ( dataset . device ) print ( f ' { item_obs_all . shape =:} ' ) item_obs.shape=torch.Size([4, 64]) item_obs_all.shape=torch.Size([10000, 4, 64]) for i , batch in enumerate ( dataloader ): first , last = i * batch_size , min ( len ( dataset ), ( i + 1 ) * batch_size ) idx = torch . arange ( first , last ) assert torch . all ( item_obs_all [ idx , :, :] == batch . x_dict [ 'item_obs' ]) assert torch . all ( item_index_all [ idx ] == batch . item_index ) batch . x_dict [ 'item_obs' ] . shape torch.Size([16, 4, 64]) print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.price_obs.shape=torch.Size([10000, 4, 12]) dataset . __len__ () 10000","title":"Using Pytorch dataloader for the training loop."},{"location":"data_management/#chaining-multiple-datasets-jointdataset-examples","text":"dataset1 = dataset . clone () dataset2 = dataset . clone () joint_dataset = JointDataset ( the_dataset = dataset1 , another_dataset = dataset2 ) joint_dataset JointDataset with 2 sub-datasets: ( the_dataset: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) another_dataset: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) )","title":"Chaining Multiple Datasets: JointDataset Examples"},{"location":"easy_data_management/","text":"Easy Data Wrapper Tutorial The data construction covered in the Data Management tutorial might be too complicated for users without prior experience in PyTorch. This tutorial offers a helper class to wrap the dataset, all the user needs to know is (1) loading data-frames to Python, Pandas provides one-line solution to loading various types of data files including CSV, TSV, Stata, and Excel. (2) basic usage of pandas. We aim to make this tutorial as self-contained as possible, so you don't need to be worried if you haven't went through the Data Management tutorial . But we invite you to go through that tutorial to obtain a more in-depth understanding of data management in this project. Author: Tianyu Du Date: May. 20, 2022 Update: Jul. 9, 2022 __author__ = 'Tianyu Du' Let's import a few necessary packages. import pandas as pd import torch from torch_choice.utils.easy_data_wrapper import EasyDatasetWrapper References and Background for Stata Users This tutorial aim to show how to manage choice datasets using the torch-choice package, we will follow the Stata documentation here to offer a seamless experience for the user to transfer prior knowledge in other packages to our package. From Stata Documentation : Choice models (CM) are models for data with outcomes that are choices. The choices are selected by a decision maker, such as a person or a business (i.e., the user ), from a set of possible alternatives (i.e., the items ). For instance, we could model choices made by consumers who select a breakfast cereal from several different brands. Or we could model choices made by businesses who chose whether to buy TV, radio, Internet, or newspaper advertising. Models for choice data come in two varieties\u2014models for discrete choices and models for rank-ordered alternatives. When each individual selects a single alternative, say, he or she purchases one box of cereal, the data are discrete choice data. When each individual ranks the choices, say, he or she orders cereals from most favorite to least favorite, the data are rank-ordered data. Stata has commands for fitting both discrete choice models and rank-ordered models. Our torch-choice package handles the discrete choice models in the Stata document above. Motivations In the following parts, we demonstrate how to convert a long-format data (e.g., the one used in Stata) to the ChoiceDataset data format expected by our package. But first, Why do we want another ChoiceDataset object instead of just one long-format data-frame? In earlier versions of Stata, we can only have one single data-frame loaded in memory, this would introduce memory error especially when teh dataset is large. For example, you have a dataset of a million decisions recorded, each consists of four items, and each item has a persistent built quality that stay the same in all observations. The Stata format would make a million copy of these variables, which is very inefficient. We would need to collect a couple of data-frames as the essential pieces to build our ChoiceDataset . Don't worry, as soon as you have the data-frames ready, the EasyDataWrapper helper class would take care of the rest. We call a single statistical observation a \"purchase record\" and use this terminology throughout the tutorial. df = pd . read_stata ( 'https://www.stata-press.com/data/r17/carchoice.dta' ) We load the artificial dataset from the Stata website. Here we borrow the description of dataset reported from the describe command in Stata. Contains data from https://www.stata-press.com/data/r17/carchoice.dta Observations: 3,160 Car choice data Variables: 6 30 Jul 2020 14:58 --------------------------------------------------------------------------------------------------------------------------------------------------- Variable Storage Display Value name type format label Variable label --------------------------------------------------------------------------------------------------------------------------------------------------- consumerid int %8.0g ID of individual consumer car byte %9.0g nation Nationality of car purchase byte %10.0g Indicator of car purchased gender byte %9.0g gender Gender: 0 = Female, 1 = Male income float %9.0g Income (in $1,000) dealers byte %9.0g No. of dealerships in community --------------------------------------------------------------------------------------------------------------------------------------------------- Sorted by: consumerid car In this dataset, the first four rows with consumerid == 1 corresponds to the first purchasing record , it means the consumer with ID 1 was making the decision among four types of cars (i.e., items ) and chose American car (since the purchase == 1 in that row of American car). Even though there were four types of cars, not all of them were available all the time. For example, for the purchase record by consumer with ID 4, only American, Japanese, and European cars were available (note that there is no row in the dataset with consumerid == 4 and car == 'Korean' , this indicates unavailability of a certain item.) df . head ( 30 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid car purchase gender income dealers 0 1 American 1 Male 46.699997 9 1 1 Japanese 0 Male 46.699997 11 2 1 European 0 Male 46.699997 5 3 1 Korean 0 Male 46.699997 1 4 2 American 1 Male 26.100000 10 5 2 Japanese 0 Male 26.100000 7 6 2 European 0 Male 26.100000 2 7 2 Korean 0 Male 26.100000 1 8 3 American 0 Male 32.700001 8 9 3 Japanese 1 Male 32.700001 6 10 3 European 0 Male 32.700001 2 11 4 American 1 Female 49.199997 5 12 4 Japanese 0 Female 49.199997 4 13 4 European 0 Female 49.199997 3 14 5 American 0 Male 24.299999 8 15 5 Japanese 0 Male 24.299999 3 16 5 European 1 Male 24.299999 3 17 6 American 1 Female 39.000000 10 18 6 Japanese 0 Female 39.000000 6 19 6 European 0 Female 39.000000 1 20 7 American 0 Male 33.000000 10 21 7 Japanese 0 Male 33.000000 6 22 7 European 1 Male 33.000000 4 23 7 Korean 0 Male 33.000000 1 24 8 American 1 Male 20.299999 6 25 8 Japanese 0 Male 20.299999 5 26 8 European 0 Male 20.299999 3 27 9 American 0 Male 38.000000 9 28 9 Japanese 1 Male 38.000000 9 29 9 European 0 Male 38.000000 2 Components of the Consumer Choice Modelling Problem We begin with essential component of the consumer choice modelling problem. Walking through these components should help you understand what kind of data our models are working on. Purchasing Record Each row (record) of the dataset is called a purchasing record , which includes who bought what at when and where . Let \\(B\\) denote the number of purchasing records in the dataset (i.e., number of rows of the dataset). Each row \\(b \\in \\{1,2,\\dots, B\\}\\) corresponds to a purchase record (i.e., who bought what at where and when ). Items and Categories To begin with, there are \\(I\\) items indexed by \\(i \\in \\{1,2,\\dots,I\\}\\) under our consideration. Further, the researcher can optionally partition the set items into \\(C\\) categories indexed by \\(c \\in \\{1,2,\\dots,C\\}\\) . Let \\(I_c\\) denote the collection of items in category \\(c\\) , it is easy to verify that \\[ \\bigcup_{c \\in \\{1, 2, \\dots, C\\}} I_c = \\{1, 2, \\dots I\\} \\] If the researcher does not wish to model different categories differently, the researcher can simply put all items in one single category: \\(I_1 = \\{1, 2, \\dots I\\}\\) , so that all items belong to the same category. Note : since we will be using PyTorch to train our model, we represent their identities with integer values instead of the raw human-readable names of items (e.g., Dell 24 inch LCD monitor). Raw item names can be encoded easily with sklearn.preprocessing.OrdinalEncoder . Users Each purchaing reocrd is naturally associated with an user indexed by \\(u \\in \\{1,2,\\dots,U\\}\\) ( who ) as well. Sessions Our data structure encompasses where and when using a notion called session indexed by \\(s \\in \\{1,2,\\dots, S\\}\\) . For example, when the data came from a single store over the period of a year. In this case, the notion of where does not matter that much, and session \\(s\\) is simply the date of purchase. Another example is that we have the purchase record from different stores, the session \\(s\\) can be defined as a pair of (date, store) instead. If the researcher does not wish to handle records from different sessions differently, the researcher can assign the same session ID to all rows of the dataset. To summarize, each purchasing record \\(b\\) in the dataset is characterized by a user-session-item tuple \\((u, s, i)\\) . When there are multiple items bought by the same user in the same session, there will be multiple rows in the dataset with the same \\((u, s)\\) corresponding to the same receipt. Format the Dataset a Little Bit The wrapper we built requires several data frames, providing the correct information is all we need to do in this tutorial, the data wrapper will handle the construction of ChoiceDataset for you. Note : The dataset in this tutorial is a bit over-simplified, we only have one purchase record for each user in each session, so the consumerid column identifies all of the user, the session, and the purchase record (because we have different dealers for the same type of car, we define each purchase record of it's session instead of assigning all purchase records to the same session). That is, we have a single user makes a single choice in each single session. The main dataset should contain the following columns: purchase_record_column : a column identifies purchase record (also called case in Stata syntax). this tutorial, the consumerid column is the identifier. For example, the first 4 rows of the dataset (see above) has consumerid == 1 , this means we should look at the first 4 rows together and they constitute the first purchase record. item_name_column : a column identifies names of items , which is car in the dataset above. This column provides information above the availability as well. As mentioned above, there is no column with car == Korean in the fourth purchasing record ( consumerid == 4 ), so we know that Korean car was not available that time. choice_column : a column identifies the choice made by the consumer in each purchase record, which is the purchase column in our example. Exactly one row per purchase record (i.e., rows with the same values in purchase_record_column ) should have 1, while the values are zeros for all other rows. user_index_column : a optional column identifies the user making the choice, which is also consumerid in our case. session_index_column : a optional column identifies the session of the choice, which is also consumerid in our case. As you might have noticed, the consumerid column in the data-frame identifies multiple pieces of information: purchase_record , user_index , and session_index . This is not a mistake, you can use the same column in df to supply multiple pieces of information. df . gender . value_counts ( dropna = False ) Male 2283 Female 854 NaN 23 Name: gender, dtype: int64 The only modification required is to convert gender (with values of Male , Female or NaN ) to integers because PyTorch does not handle strings. For simplicity, we will assume all NaN gender to be Female (you should not do this in a real application!) and re-define the gender variable as \\(\\mathbb{I}\\{\\texttt{gender} == \\texttt{Male}\\}\\) . # we change gender to binary 0/1 because pytorch doesn't handle strings. df [ 'gender' ] = ( df [ 'gender' ] == 'Male' ) . astype ( int ) Now the gender column contains only binary integers. df . gender . value_counts ( dropna = False ) 1 2283 0 877 Name: gender, dtype: int64 The data-frame looks like the following right now: df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 Adding the Observables The next step is to identify observables going into the model. Specifically, we would want to add: 1. gender and income as user-specific observables 2. and dealers as (session, item)-specific observable. Such observables are called price observables in our setting, why? because price is the most typical (session, item)-specific observable. Method 1: Adding Observables by Extracting Columns of the Dataset As you can see, gender , income and dealers are already encompassed in df , the first way to add observables is simply mentioning these columns while initializing the EasyDatasetWrapper object. You can supply a list of names of columns to each of {user, item, session, price}_observable_columns keyword argument. For example, we use user_observable_columns=['gender', 'income'] to inform the EasyDatasetWrapper that we wish to derive user-specific observables from the gender and income columns of df . Also, we inform the EasyDatasetWrapper that we want to derive (session, item)-specific (i.e., price observable) by specifying price_observable_columns=['dealers'] . Since our package leverages GPU-acceleration, it is necessary to supply the device on which the dataset should reside. The EasyDatasetWrapper also takes a device keyword, which can be either 'cpu' or an appropriate CUDA device. if torch . cuda . is_available (): device = 'cuda' # use GPU if available else : device = 'cpu' # use CPU otherwise data_1 = EasyDatasetWrapper ( main_data = df , # TODO: better naming convention? Need to discuss. # after discussion, we add it to the default value # in the data wrapper class. # these are just names. purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # it can be derived from columns of the dataframe or supplied as user_observable_columns = [ 'gender' , 'income' ], price_observable_columns = [ 'dealers' ], device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. The dataset has a summary() method, which can be used to print out the summary of the dataset. data_1 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu) You can access the ChoiceDataset object constructed by calling the data.choice_dataset object. data_1 . choice_dataset ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu) Method 2: Adding Observables as Data Frames We can also construct data frames and use data frames to supply different observables. This is useful when you have a large dataset, for example, if there are many purchase records for the same user (to be concrete, say \\(U\\) users and \\(N\\) purchase records for each user, resulting \\(U \\times N\\) total purchase records). Using a single data-frame requires a lot of memory: you need to store \\(U \\times N\\) entires of user genders in total. However, user genders should be persistent across all purchasing records, if we use a separate data-frame mapping user index to gender of the user, we only need to store \\(U\\) entries (i.e., one for each user) of gender information. Similarly, the long-format data requires storing each piece of item-specific information for number of purchase records times, which leads to inefficient usage of disk/memory space. How Do Observable Data-frame Look Like? Our package natively support the following four types of observables: User Observables : user-specific observables (e.g., gender and income) should (1) have length equal to the number of unique users in the dataset (885 here); (2) contains a column named as user_index_column ( user_index_column is a variable, the actual column name should be the value of variable user_index_column ! E.g., here the user observable data-frame should have a column named 'consumerid' ); (3) the user observable can have any number of other columns beside the user_index_column column, each of them corresponding to a user-specific observable. For example, a data-frame containing \\(X\\) user-specific observables has shape (num_users, X + 1) . Item Observables item-specific observables (not shown in this tutorial) should be (1) have length equal to the number of unique items in the dataset (4 here); (2) contain a column named as item_index_column ( item_index_column is a variable, the actual column name should be the value of variable item_index_column ! E.g., here the item observable data-frame should have a column named 'car' ); (3) the item observable can have any number of other columns beside the item_index_column column, each of them corresponding to a item-specific observable. Session Observable session-specific observables (not shown in this tutorial) should be (1) have length equal to the number of unique sessions in the dataset; (2) contain a column named as session_index_column ( session_index_column is a variable, the actual column name should be the value of variable session_index_column ! E.g., here the session observable data-frame should have a column named 'consumerid' ); (3) the session observable can have any number of other columns beside the session_index_column column, each of them corresponding to a session-specific observable. Price Observables (session, item)-specific observables (e.g., dealers) should be (1) contains a column named as session_index_column (e.g., consumerid in our example) and a column named as item_name_column (e.g., car in our example), (2) the price observable can have any number of other columns beside the session_index_column and item_name_column columns, each of them corresponding to a (session, item)-specific observable. For example, a data-frame containing \\(X\\) (session, item)-specific observables has shape (num_sessions, num_items, X + 2) . We encourage the reader to review the Data Management Tutorial for more details on types of observables. Suggested Procedure of Storing and Loading Data Suppose SESSION_INDEX column in df_main is the index of the session, ALTERNATIVES column is the index of the car. For user-specific observables, you should have a CSV on disk with columns { consumerid , var_1 , var_2 , ...}. You load the user-specific dataset as user_obs = pd.read_csv(..., index='consumerid') . Let's first construct the data frame for user genders first. gender = df . groupby ( 'consumerid' )[ 'gender' ] . first () . reset_index () The user-observable data-frame contains a column of user IDs (the consumerid column), this column should have exactly the same name as the column containing user indices. Otherwise, the wrapper won't know which column corresponds to user IDs and which column corresponds to variables. gender . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid gender 0 1 1 1 2 1 2 3 1 3 4 0 4 5 1 Then, let's build the data-frame for user-specific income variables. income = df . groupby ( 'consumerid' )[ 'income' ] . first () . reset_index () income . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid income 0 1 46.699997 1 2 26.100000 2 3 32.700001 3 4 49.199997 4 5 24.299999 Please note that we can have multiple observables contained in the same data-frame as well. gender_and_income = df . groupby ( 'consumerid' )[[ 'gender' , 'income' ]] . first () . reset_index () gender_and_income .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid gender income 0 1 1 46.699997 1 2 1 26.100000 2 3 1 32.700001 3 4 0 49.199997 4 5 1 24.299999 ... ... ... ... 880 881 1 45.700001 881 882 1 69.800003 882 883 0 45.599998 883 884 1 20.900000 884 885 1 30.600000 885 rows \u00d7 3 columns The price observable data-frame contains two columns identifying session (i.e., the consumerid column) and item (i.e., the car column). The session index column should have exactly the same name as the session index column in df and the column indexing columns should have exactly the same name as the item-name-column in df . dealers = df [[ 'consumerid' , 'car' , 'dealers' ]] dealers . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid car dealers 0 1 American 9 1 1 Japanese 11 2 1 European 5 3 1 Korean 1 4 2 American 10 Build Datasets using EasyDatasetWrapper with Observables as Data-Frames We can observables as data-frames using {user, item, session, price}_observable_data keyword arguments. data_2 = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # above are the same as before, but we update the following. user_observable_data = { 'gender' : gender , 'income' : income }, price_observable_data = { 'dealers' : dealers }, device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. # Use summary to see what's inside the data wrapper. data_2 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu) Alternatively, we can supply user income and gender as a single dataframe, instead of user_gender and user_income tensors, now the constructed ChoiceDataset contains a single user_gender_and_income tensor with shape (885, 2) encompassing both income and gender of users. data_3 = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # above are the same as before, but we update the following. user_observable_data = { 'gender_and_income' : gender_and_income }, price_observable_data = { 'dealers' : dealers }, device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. data_3 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender_and_income=[885, 2], itemsession_dealers=[885, 4, 1], device=cpu) Method 3: Mixing Method 1 and Method 2 The EasyDataWrapper also support supplying observables as a mixture of above methods. The following example supplies gender user observable as a data-frame but income and dealers as column names. data_4 = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # above are the same as before, but we update the following. user_observable_data = { 'gender' : gender }, user_observable_columns = [ 'income' ], price_observable_columns = [ 'dealers' ], device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. data_4 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu) Sanity Checks Lastly, let's check choice datasets constructed via different methods are actually the same. The == method of choice datasets will compare the non-NAN entries of all tensors in datasets. print ( data_1 . choice_dataset == data_2 . choice_dataset ) print ( data_1 . choice_dataset == data_4 . choice_dataset ) True True For data_3 , we have income and gender combined: data_3 . choice_dataset . user_gender_and_income == torch . cat ([ data_1 . choice_dataset . user_gender , data_1 . choice_dataset . user_income ], dim = 1 ) tensor([[True, True], [True, True], [True, True], ..., [True, True], [True, True], [True, True]]) Now let's compare what's inside the data structure and our raw data. bought_raw = df [ df [ 'purchase' ] == 1 ][ 'car' ] . values bought_data = list () encoder = { 0 : 'American' , 1 : 'European' , 2 : 'Japanese' , 3 : 'Korean' } for b in data_1 . choice_dataset . item_index : bought_data . append ( encoder [ float ( b )]) all ( bought_raw == bought_data ) True Then, let's compare the income and gender variable contained in the dataset. X = df . groupby ( 'consumerid' )[ 'income' ] . first () . values Y = data_1 . choice_dataset . user_income . cpu () . numpy () . squeeze () all ( X == Y ) True X = df . groupby ( 'consumerid' )[ 'gender' ] . first () . values Y = data_1 . choice_dataset . user_gender . cpu () . numpy () . squeeze () all ( X == Y ) True Lastly, let's compare the price_dealer variable. Since there are NAN-values in it for unavailable cars, we can't not use all(X == Y) to compare them. We will first fill NANs values with -1 and then compare resulted data-frames. # rearrange columns to align it with the internal encoding scheme of the data wrapper. X = df . pivot ( 'consumerid' , 'car' , 'dealers' )[[ 'American' , 'European' , 'Japanese' , 'Korean' ]] X .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } car American European Japanese Korean consumerid 1 9.0 5.0 11.0 1.0 2 10.0 2.0 7.0 1.0 3 8.0 2.0 6.0 NaN 4 5.0 3.0 4.0 NaN 5 8.0 3.0 3.0 NaN ... ... ... ... ... 881 8.0 2.0 10.0 NaN 882 8.0 6.0 8.0 1.0 883 9.0 5.0 8.0 1.0 884 12.0 4.0 10.0 NaN 885 10.0 4.0 5.0 NaN 885 rows \u00d7 4 columns Y = data_1 . choice_dataset . itemsession_dealers . squeeze ( dim =- 1 ) Y tensor([[ 9., 5., 11., 1.], [10., 2., 7., 1.], [ 8., 2., 6., nan], ..., [ 9., 5., 8., 1.], [12., 4., 10., nan], [10., 4., 5., nan]]) print ( X . fillna ( - 1 ) . values == torch . nan_to_num ( Y , - 1 ) . cpu () . numpy ()) [[ True True True True] [ True True True True] [ True True True True] ... [ True True True True] [ True True True True] [ True True True True]] This concludes our tutorial on building the dataset, if you wish more in-depth understanding of the data structure, please refer to the Data Management Tutorial .","title":"Easy Data Management and Stata Users"},{"location":"easy_data_management/#easy-data-wrapper-tutorial","text":"The data construction covered in the Data Management tutorial might be too complicated for users without prior experience in PyTorch. This tutorial offers a helper class to wrap the dataset, all the user needs to know is (1) loading data-frames to Python, Pandas provides one-line solution to loading various types of data files including CSV, TSV, Stata, and Excel. (2) basic usage of pandas. We aim to make this tutorial as self-contained as possible, so you don't need to be worried if you haven't went through the Data Management tutorial . But we invite you to go through that tutorial to obtain a more in-depth understanding of data management in this project. Author: Tianyu Du Date: May. 20, 2022 Update: Jul. 9, 2022 __author__ = 'Tianyu Du' Let's import a few necessary packages. import pandas as pd import torch from torch_choice.utils.easy_data_wrapper import EasyDatasetWrapper","title":"Easy Data Wrapper Tutorial"},{"location":"easy_data_management/#references-and-background-for-stata-users","text":"This tutorial aim to show how to manage choice datasets using the torch-choice package, we will follow the Stata documentation here to offer a seamless experience for the user to transfer prior knowledge in other packages to our package. From Stata Documentation : Choice models (CM) are models for data with outcomes that are choices. The choices are selected by a decision maker, such as a person or a business (i.e., the user ), from a set of possible alternatives (i.e., the items ). For instance, we could model choices made by consumers who select a breakfast cereal from several different brands. Or we could model choices made by businesses who chose whether to buy TV, radio, Internet, or newspaper advertising. Models for choice data come in two varieties\u2014models for discrete choices and models for rank-ordered alternatives. When each individual selects a single alternative, say, he or she purchases one box of cereal, the data are discrete choice data. When each individual ranks the choices, say, he or she orders cereals from most favorite to least favorite, the data are rank-ordered data. Stata has commands for fitting both discrete choice models and rank-ordered models. Our torch-choice package handles the discrete choice models in the Stata document above.","title":"References and Background for Stata Users"},{"location":"easy_data_management/#motivations","text":"In the following parts, we demonstrate how to convert a long-format data (e.g., the one used in Stata) to the ChoiceDataset data format expected by our package. But first, Why do we want another ChoiceDataset object instead of just one long-format data-frame? In earlier versions of Stata, we can only have one single data-frame loaded in memory, this would introduce memory error especially when teh dataset is large. For example, you have a dataset of a million decisions recorded, each consists of four items, and each item has a persistent built quality that stay the same in all observations. The Stata format would make a million copy of these variables, which is very inefficient. We would need to collect a couple of data-frames as the essential pieces to build our ChoiceDataset . Don't worry, as soon as you have the data-frames ready, the EasyDataWrapper helper class would take care of the rest. We call a single statistical observation a \"purchase record\" and use this terminology throughout the tutorial. df = pd . read_stata ( 'https://www.stata-press.com/data/r17/carchoice.dta' ) We load the artificial dataset from the Stata website. Here we borrow the description of dataset reported from the describe command in Stata. Contains data from https://www.stata-press.com/data/r17/carchoice.dta Observations: 3,160 Car choice data Variables: 6 30 Jul 2020 14:58 --------------------------------------------------------------------------------------------------------------------------------------------------- Variable Storage Display Value name type format label Variable label --------------------------------------------------------------------------------------------------------------------------------------------------- consumerid int %8.0g ID of individual consumer car byte %9.0g nation Nationality of car purchase byte %10.0g Indicator of car purchased gender byte %9.0g gender Gender: 0 = Female, 1 = Male income float %9.0g Income (in $1,000) dealers byte %9.0g No. of dealerships in community --------------------------------------------------------------------------------------------------------------------------------------------------- Sorted by: consumerid car In this dataset, the first four rows with consumerid == 1 corresponds to the first purchasing record , it means the consumer with ID 1 was making the decision among four types of cars (i.e., items ) and chose American car (since the purchase == 1 in that row of American car). Even though there were four types of cars, not all of them were available all the time. For example, for the purchase record by consumer with ID 4, only American, Japanese, and European cars were available (note that there is no row in the dataset with consumerid == 4 and car == 'Korean' , this indicates unavailability of a certain item.) df . head ( 30 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid car purchase gender income dealers 0 1 American 1 Male 46.699997 9 1 1 Japanese 0 Male 46.699997 11 2 1 European 0 Male 46.699997 5 3 1 Korean 0 Male 46.699997 1 4 2 American 1 Male 26.100000 10 5 2 Japanese 0 Male 26.100000 7 6 2 European 0 Male 26.100000 2 7 2 Korean 0 Male 26.100000 1 8 3 American 0 Male 32.700001 8 9 3 Japanese 1 Male 32.700001 6 10 3 European 0 Male 32.700001 2 11 4 American 1 Female 49.199997 5 12 4 Japanese 0 Female 49.199997 4 13 4 European 0 Female 49.199997 3 14 5 American 0 Male 24.299999 8 15 5 Japanese 0 Male 24.299999 3 16 5 European 1 Male 24.299999 3 17 6 American 1 Female 39.000000 10 18 6 Japanese 0 Female 39.000000 6 19 6 European 0 Female 39.000000 1 20 7 American 0 Male 33.000000 10 21 7 Japanese 0 Male 33.000000 6 22 7 European 1 Male 33.000000 4 23 7 Korean 0 Male 33.000000 1 24 8 American 1 Male 20.299999 6 25 8 Japanese 0 Male 20.299999 5 26 8 European 0 Male 20.299999 3 27 9 American 0 Male 38.000000 9 28 9 Japanese 1 Male 38.000000 9 29 9 European 0 Male 38.000000 2","title":"Motivations"},{"location":"easy_data_management/#components-of-the-consumer-choice-modelling-problem","text":"We begin with essential component of the consumer choice modelling problem. Walking through these components should help you understand what kind of data our models are working on.","title":"Components of the Consumer Choice Modelling Problem"},{"location":"easy_data_management/#purchasing-record","text":"Each row (record) of the dataset is called a purchasing record , which includes who bought what at when and where . Let \\(B\\) denote the number of purchasing records in the dataset (i.e., number of rows of the dataset). Each row \\(b \\in \\{1,2,\\dots, B\\}\\) corresponds to a purchase record (i.e., who bought what at where and when ).","title":"Purchasing Record"},{"location":"easy_data_management/#items-and-categories","text":"To begin with, there are \\(I\\) items indexed by \\(i \\in \\{1,2,\\dots,I\\}\\) under our consideration. Further, the researcher can optionally partition the set items into \\(C\\) categories indexed by \\(c \\in \\{1,2,\\dots,C\\}\\) . Let \\(I_c\\) denote the collection of items in category \\(c\\) , it is easy to verify that \\[ \\bigcup_{c \\in \\{1, 2, \\dots, C\\}} I_c = \\{1, 2, \\dots I\\} \\] If the researcher does not wish to model different categories differently, the researcher can simply put all items in one single category: \\(I_1 = \\{1, 2, \\dots I\\}\\) , so that all items belong to the same category. Note : since we will be using PyTorch to train our model, we represent their identities with integer values instead of the raw human-readable names of items (e.g., Dell 24 inch LCD monitor). Raw item names can be encoded easily with sklearn.preprocessing.OrdinalEncoder .","title":"Items and Categories"},{"location":"easy_data_management/#users","text":"Each purchaing reocrd is naturally associated with an user indexed by \\(u \\in \\{1,2,\\dots,U\\}\\) ( who ) as well.","title":"Users"},{"location":"easy_data_management/#sessions","text":"Our data structure encompasses where and when using a notion called session indexed by \\(s \\in \\{1,2,\\dots, S\\}\\) . For example, when the data came from a single store over the period of a year. In this case, the notion of where does not matter that much, and session \\(s\\) is simply the date of purchase. Another example is that we have the purchase record from different stores, the session \\(s\\) can be defined as a pair of (date, store) instead. If the researcher does not wish to handle records from different sessions differently, the researcher can assign the same session ID to all rows of the dataset. To summarize, each purchasing record \\(b\\) in the dataset is characterized by a user-session-item tuple \\((u, s, i)\\) . When there are multiple items bought by the same user in the same session, there will be multiple rows in the dataset with the same \\((u, s)\\) corresponding to the same receipt.","title":"Sessions"},{"location":"easy_data_management/#format-the-dataset-a-little-bit","text":"The wrapper we built requires several data frames, providing the correct information is all we need to do in this tutorial, the data wrapper will handle the construction of ChoiceDataset for you. Note : The dataset in this tutorial is a bit over-simplified, we only have one purchase record for each user in each session, so the consumerid column identifies all of the user, the session, and the purchase record (because we have different dealers for the same type of car, we define each purchase record of it's session instead of assigning all purchase records to the same session). That is, we have a single user makes a single choice in each single session. The main dataset should contain the following columns: purchase_record_column : a column identifies purchase record (also called case in Stata syntax). this tutorial, the consumerid column is the identifier. For example, the first 4 rows of the dataset (see above) has consumerid == 1 , this means we should look at the first 4 rows together and they constitute the first purchase record. item_name_column : a column identifies names of items , which is car in the dataset above. This column provides information above the availability as well. As mentioned above, there is no column with car == Korean in the fourth purchasing record ( consumerid == 4 ), so we know that Korean car was not available that time. choice_column : a column identifies the choice made by the consumer in each purchase record, which is the purchase column in our example. Exactly one row per purchase record (i.e., rows with the same values in purchase_record_column ) should have 1, while the values are zeros for all other rows. user_index_column : a optional column identifies the user making the choice, which is also consumerid in our case. session_index_column : a optional column identifies the session of the choice, which is also consumerid in our case. As you might have noticed, the consumerid column in the data-frame identifies multiple pieces of information: purchase_record , user_index , and session_index . This is not a mistake, you can use the same column in df to supply multiple pieces of information. df . gender . value_counts ( dropna = False ) Male 2283 Female 854 NaN 23 Name: gender, dtype: int64 The only modification required is to convert gender (with values of Male , Female or NaN ) to integers because PyTorch does not handle strings. For simplicity, we will assume all NaN gender to be Female (you should not do this in a real application!) and re-define the gender variable as \\(\\mathbb{I}\\{\\texttt{gender} == \\texttt{Male}\\}\\) . # we change gender to binary 0/1 because pytorch doesn't handle strings. df [ 'gender' ] = ( df [ 'gender' ] == 'Male' ) . astype ( int ) Now the gender column contains only binary integers. df . gender . value_counts ( dropna = False ) 1 2283 0 877 Name: gender, dtype: int64 The data-frame looks like the following right now: df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10","title":"Format the Dataset a Little Bit"},{"location":"easy_data_management/#adding-the-observables","text":"The next step is to identify observables going into the model. Specifically, we would want to add: 1. gender and income as user-specific observables 2. and dealers as (session, item)-specific observable. Such observables are called price observables in our setting, why? because price is the most typical (session, item)-specific observable.","title":"Adding the Observables"},{"location":"easy_data_management/#method-1-adding-observables-by-extracting-columns-of-the-dataset","text":"As you can see, gender , income and dealers are already encompassed in df , the first way to add observables is simply mentioning these columns while initializing the EasyDatasetWrapper object. You can supply a list of names of columns to each of {user, item, session, price}_observable_columns keyword argument. For example, we use user_observable_columns=['gender', 'income'] to inform the EasyDatasetWrapper that we wish to derive user-specific observables from the gender and income columns of df . Also, we inform the EasyDatasetWrapper that we want to derive (session, item)-specific (i.e., price observable) by specifying price_observable_columns=['dealers'] . Since our package leverages GPU-acceleration, it is necessary to supply the device on which the dataset should reside. The EasyDatasetWrapper also takes a device keyword, which can be either 'cpu' or an appropriate CUDA device. if torch . cuda . is_available (): device = 'cuda' # use GPU if available else : device = 'cpu' # use CPU otherwise data_1 = EasyDatasetWrapper ( main_data = df , # TODO: better naming convention? Need to discuss. # after discussion, we add it to the default value # in the data wrapper class. # these are just names. purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # it can be derived from columns of the dataframe or supplied as user_observable_columns = [ 'gender' , 'income' ], price_observable_columns = [ 'dealers' ], device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. The dataset has a summary() method, which can be used to print out the summary of the dataset. data_1 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu) You can access the ChoiceDataset object constructed by calling the data.choice_dataset object. data_1 . choice_dataset ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu)","title":"Method 1: Adding Observables by Extracting Columns of the Dataset"},{"location":"easy_data_management/#method-2-adding-observables-as-data-frames","text":"We can also construct data frames and use data frames to supply different observables. This is useful when you have a large dataset, for example, if there are many purchase records for the same user (to be concrete, say \\(U\\) users and \\(N\\) purchase records for each user, resulting \\(U \\times N\\) total purchase records). Using a single data-frame requires a lot of memory: you need to store \\(U \\times N\\) entires of user genders in total. However, user genders should be persistent across all purchasing records, if we use a separate data-frame mapping user index to gender of the user, we only need to store \\(U\\) entries (i.e., one for each user) of gender information. Similarly, the long-format data requires storing each piece of item-specific information for number of purchase records times, which leads to inefficient usage of disk/memory space.","title":"Method 2: Adding Observables as Data Frames"},{"location":"easy_data_management/#how-do-observable-data-frame-look-like","text":"Our package natively support the following four types of observables: User Observables : user-specific observables (e.g., gender and income) should (1) have length equal to the number of unique users in the dataset (885 here); (2) contains a column named as user_index_column ( user_index_column is a variable, the actual column name should be the value of variable user_index_column ! E.g., here the user observable data-frame should have a column named 'consumerid' ); (3) the user observable can have any number of other columns beside the user_index_column column, each of them corresponding to a user-specific observable. For example, a data-frame containing \\(X\\) user-specific observables has shape (num_users, X + 1) . Item Observables item-specific observables (not shown in this tutorial) should be (1) have length equal to the number of unique items in the dataset (4 here); (2) contain a column named as item_index_column ( item_index_column is a variable, the actual column name should be the value of variable item_index_column ! E.g., here the item observable data-frame should have a column named 'car' ); (3) the item observable can have any number of other columns beside the item_index_column column, each of them corresponding to a item-specific observable. Session Observable session-specific observables (not shown in this tutorial) should be (1) have length equal to the number of unique sessions in the dataset; (2) contain a column named as session_index_column ( session_index_column is a variable, the actual column name should be the value of variable session_index_column ! E.g., here the session observable data-frame should have a column named 'consumerid' ); (3) the session observable can have any number of other columns beside the session_index_column column, each of them corresponding to a session-specific observable. Price Observables (session, item)-specific observables (e.g., dealers) should be (1) contains a column named as session_index_column (e.g., consumerid in our example) and a column named as item_name_column (e.g., car in our example), (2) the price observable can have any number of other columns beside the session_index_column and item_name_column columns, each of them corresponding to a (session, item)-specific observable. For example, a data-frame containing \\(X\\) (session, item)-specific observables has shape (num_sessions, num_items, X + 2) . We encourage the reader to review the Data Management Tutorial for more details on types of observables.","title":"How Do Observable Data-frame Look Like?"},{"location":"easy_data_management/#suggested-procedure-of-storing-and-loading-data","text":"Suppose SESSION_INDEX column in df_main is the index of the session, ALTERNATIVES column is the index of the car. For user-specific observables, you should have a CSV on disk with columns { consumerid , var_1 , var_2 , ...}. You load the user-specific dataset as user_obs = pd.read_csv(..., index='consumerid') . Let's first construct the data frame for user genders first. gender = df . groupby ( 'consumerid' )[ 'gender' ] . first () . reset_index () The user-observable data-frame contains a column of user IDs (the consumerid column), this column should have exactly the same name as the column containing user indices. Otherwise, the wrapper won't know which column corresponds to user IDs and which column corresponds to variables. gender . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid gender 0 1 1 1 2 1 2 3 1 3 4 0 4 5 1 Then, let's build the data-frame for user-specific income variables. income = df . groupby ( 'consumerid' )[ 'income' ] . first () . reset_index () income . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid income 0 1 46.699997 1 2 26.100000 2 3 32.700001 3 4 49.199997 4 5 24.299999 Please note that we can have multiple observables contained in the same data-frame as well. gender_and_income = df . groupby ( 'consumerid' )[[ 'gender' , 'income' ]] . first () . reset_index () gender_and_income .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid gender income 0 1 1 46.699997 1 2 1 26.100000 2 3 1 32.700001 3 4 0 49.199997 4 5 1 24.299999 ... ... ... ... 880 881 1 45.700001 881 882 1 69.800003 882 883 0 45.599998 883 884 1 20.900000 884 885 1 30.600000 885 rows \u00d7 3 columns The price observable data-frame contains two columns identifying session (i.e., the consumerid column) and item (i.e., the car column). The session index column should have exactly the same name as the session index column in df and the column indexing columns should have exactly the same name as the item-name-column in df . dealers = df [[ 'consumerid' , 'car' , 'dealers' ]] dealers . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } consumerid car dealers 0 1 American 9 1 1 Japanese 11 2 1 European 5 3 1 Korean 1 4 2 American 10","title":"Suggested Procedure of Storing and Loading Data"},{"location":"easy_data_management/#build-datasets-using-easydatasetwrapper-with-observables-as-data-frames","text":"We can observables as data-frames using {user, item, session, price}_observable_data keyword arguments. data_2 = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # above are the same as before, but we update the following. user_observable_data = { 'gender' : gender , 'income' : income }, price_observable_data = { 'dealers' : dealers }, device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. # Use summary to see what's inside the data wrapper. data_2 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu) Alternatively, we can supply user income and gender as a single dataframe, instead of user_gender and user_income tensors, now the constructed ChoiceDataset contains a single user_gender_and_income tensor with shape (885, 2) encompassing both income and gender of users. data_3 = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # above are the same as before, but we update the following. user_observable_data = { 'gender_and_income' : gender_and_income }, price_observable_data = { 'dealers' : dealers }, device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. data_3 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender_and_income=[885, 2], itemsession_dealers=[885, 4, 1], device=cpu)","title":"Build Datasets using EasyDatasetWrapper with Observables as Data-Frames"},{"location":"easy_data_management/#method-3-mixing-method-1-and-method-2","text":"The EasyDataWrapper also support supplying observables as a mixture of above methods. The following example supplies gender user observable as a data-frame but income and dealers as column names. data_4 = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'consumerid' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumerid' , session_index_column = 'consumerid' , # above are the same as before, but we update the following. user_observable_data = { 'gender' : gender }, user_observable_columns = [ 'income' ], price_observable_columns = [ 'dealers' ], device = device ) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. data_4 . summary () * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: consumerid car purchase gender income dealers 0 1 American 1 1 46.699997 9 1 1 Japanese 0 1 46.699997 11 2 1 European 0 1 46.699997 5 3 1 Korean 0 1 46.699997 1 4 2 American 1 1 26.100000 10 ... ... ... ... ... ... ... 3155 884 Japanese 1 1 20.900000 10 3156 884 European 0 1 20.900000 4 3157 885 American 1 1 30.600000 10 3158 885 Japanese 0 1 30.600000 5 3159 885 European 0 1 30.600000 4 [3160 rows x 6 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], user_gender=[885, 1], user_income=[885, 1], itemsession_dealers=[885, 4, 1], device=cpu)","title":"Method 3: Mixing Method 1 and Method 2"},{"location":"easy_data_management/#sanity-checks","text":"Lastly, let's check choice datasets constructed via different methods are actually the same. The == method of choice datasets will compare the non-NAN entries of all tensors in datasets. print ( data_1 . choice_dataset == data_2 . choice_dataset ) print ( data_1 . choice_dataset == data_4 . choice_dataset ) True True For data_3 , we have income and gender combined: data_3 . choice_dataset . user_gender_and_income == torch . cat ([ data_1 . choice_dataset . user_gender , data_1 . choice_dataset . user_income ], dim = 1 ) tensor([[True, True], [True, True], [True, True], ..., [True, True], [True, True], [True, True]]) Now let's compare what's inside the data structure and our raw data. bought_raw = df [ df [ 'purchase' ] == 1 ][ 'car' ] . values bought_data = list () encoder = { 0 : 'American' , 1 : 'European' , 2 : 'Japanese' , 3 : 'Korean' } for b in data_1 . choice_dataset . item_index : bought_data . append ( encoder [ float ( b )]) all ( bought_raw == bought_data ) True Then, let's compare the income and gender variable contained in the dataset. X = df . groupby ( 'consumerid' )[ 'income' ] . first () . values Y = data_1 . choice_dataset . user_income . cpu () . numpy () . squeeze () all ( X == Y ) True X = df . groupby ( 'consumerid' )[ 'gender' ] . first () . values Y = data_1 . choice_dataset . user_gender . cpu () . numpy () . squeeze () all ( X == Y ) True Lastly, let's compare the price_dealer variable. Since there are NAN-values in it for unavailable cars, we can't not use all(X == Y) to compare them. We will first fill NANs values with -1 and then compare resulted data-frames. # rearrange columns to align it with the internal encoding scheme of the data wrapper. X = df . pivot ( 'consumerid' , 'car' , 'dealers' )[[ 'American' , 'European' , 'Japanese' , 'Korean' ]] X .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } car American European Japanese Korean consumerid 1 9.0 5.0 11.0 1.0 2 10.0 2.0 7.0 1.0 3 8.0 2.0 6.0 NaN 4 5.0 3.0 4.0 NaN 5 8.0 3.0 3.0 NaN ... ... ... ... ... 881 8.0 2.0 10.0 NaN 882 8.0 6.0 8.0 1.0 883 9.0 5.0 8.0 1.0 884 12.0 4.0 10.0 NaN 885 10.0 4.0 5.0 NaN 885 rows \u00d7 4 columns Y = data_1 . choice_dataset . itemsession_dealers . squeeze ( dim =- 1 ) Y tensor([[ 9., 5., 11., 1.], [10., 2., 7., 1.], [ 8., 2., 6., nan], ..., [ 9., 5., 8., 1.], [12., 4., 10., nan], [10., 4., 5., nan]]) print ( X . fillna ( - 1 ) . values == torch . nan_to_num ( Y , - 1 ) . cpu () . numpy ()) [[ True True True True] [ True True True True] [ True True True True] ... [ True True True True] [ True True True True] [ True True True True]] This concludes our tutorial on building the dataset, if you wish more in-depth understanding of the data structure, please refer to the Data Management Tutorial .","title":"Sanity Checks"},{"location":"install/","text":"Installation This page will guide you through the installation procedure of torch-choice and bemb . There are two parts of this project: the torch_choice library consisting of data management modules, logit and nested-logit models for consumer choice modelling. For researchers wish to use the Bayesian Embedding (BEMB) model, they need to install an additional bemb package, which was built on the top of torch_choice . Note Since this project is still on its pre-release stage and subject to changes, we have not uploaded our packages to PIP or CONDA. Researchers need to install these packages from Github source code. Option 1: Install using Source Code from Github Repository To install torch_choice and bemb from source, 1. Clone the repositories of both torch_choice and bemb to your local machine. 2. Install required dependencies (e.g., PyTorch and PyTorch-Lightning). 3. For each of repositories, run python3 ./setup.py develop to add the package to your Python environment. 4. Check installation by running python3 -c \"import torch_choice; print(torch_choice.__version__)\" . 5. Check installation by running python3 -c \"import bemb; print(bemb.__version__)\" . Option 2: Install using Pip The torch-choice is available on PIP now here ! You can use pip install torch-choice to install it. Note : We are working on publishing BEMB to PIP.","title":"Installation"},{"location":"install/#installation","text":"This page will guide you through the installation procedure of torch-choice and bemb . There are two parts of this project: the torch_choice library consisting of data management modules, logit and nested-logit models for consumer choice modelling. For researchers wish to use the Bayesian Embedding (BEMB) model, they need to install an additional bemb package, which was built on the top of torch_choice . Note Since this project is still on its pre-release stage and subject to changes, we have not uploaded our packages to PIP or CONDA. Researchers need to install these packages from Github source code.","title":"Installation"},{"location":"install/#option-1-install-using-source-code-from-github-repository","text":"To install torch_choice and bemb from source, 1. Clone the repositories of both torch_choice and bemb to your local machine. 2. Install required dependencies (e.g., PyTorch and PyTorch-Lightning). 3. For each of repositories, run python3 ./setup.py develop to add the package to your Python environment. 4. Check installation by running python3 -c \"import torch_choice; print(torch_choice.__version__)\" . 5. Check installation by running python3 -c \"import bemb; print(bemb.__version__)\" .","title":"Option 1: Install using Source Code from Github Repository"},{"location":"install/#option-2-install-using-pip","text":"The torch-choice is available on PIP now here ! You can use pip install torch-choice to install it. Note : We are working on publishing BEMB to PIP.","title":"Option 2: Install using Pip"},{"location":"intro/","text":"Introduction Logistic Regression models the probability that user \\(u\\) chooses item \\(i\\) in session \\(s\\) by the logistic function \\[ P_{uis} = \\frac{e^{\\mu_{uis}}}{\\Sigma_{j \\in A_{us}}e^{\\mu_{ujs}}} \\] where, \\[\\mu_{uis} = \\alpha + \\beta X + \\gamma W + \\dots\\] here \\(X\\) , \\(W\\) are predictors (independent variables) for users and items respectively (these can be constant or can vary across session), and greek letters \\(\\alpha\\) , \\(\\beta\\) and \\(\\gamma\\) are learned parameters. \\(A_{us}\\) is the set of items available for user \\(u\\) in session \\(s\\) . When users are choosing over items, we can write utility \\(U_{uis}\\) that user \\(u\\) derives from item \\(i\\) in session \\(s\\) , as \\[ U_{uis} = \\mu_{uis} + \\epsilon_{uis} \\] where \\(\\epsilon\\) is an unobserved random error term. If we assume iid extreme value type 1 errors for \\(\\epsilon_{uis}\\) , this leads to the above logistic probabilities of user \\(u\\) choosing item \\(i\\) in session \\(s\\) , as shown by McFadden , and as often studied in Econometrics. Package We implement a fully flexible setup, where we allow 1. coefficients ( \\(\\alpha\\) , \\(\\beta\\) , \\(\\gamma\\) , \\(\\dots\\) ) to be constant, user-specific (i.e., \\(\\alpha=\\alpha_u\\) ), item-specific (i.e., \\(\\alpha=\\alpha_i\\) ), session-specific (i.e., \\(\\alpha=\\alpha_t\\) ), or (session, item)-specific (i.e., \\(\\alpha=\\alpha_{ti}\\) ). For example, specifying \\(\\alpha\\) to be item-specific is equivalent to adding an item-level fixed effect. 2. Observables ( \\(X\\) , \\(Y\\) , \\(\\dots\\) ) to be constant, user-specific, item-specific, session-specific, or (session, item) (such as price) and (session, user) (such as income) specific as well. 3. Specifying availability sets \\(A_{us}\\) This flexibility in coefficients and features allows for more than 20 types of additive terms to \\(U_{uis}\\) , which enables modelling rich structures. As such, this package can be used to learn such models for 1. Parameter Estimation, as in the Transportation Choice example below 2. Prediction, as in the MNIST handwritten digits classification example below Examples with Utility Form: 1. Transportation Choice (from the Mode Canada dataset) (Detailed Tutorial) \\[ U_{uit} = \\beta^0_i + \\beta^{1} X^{itemsession: (cost, freq, ovt)}_{it} + \\beta^2_i X^{session:income}_t + \\beta^3_i X_{it}^{itemsession:ivt} + \\epsilon_{uit} \\] This is also described as a conditional logit model in Econometrics. We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case there is one user per session, so that U = S Then, - \\(X^{itemsession: (cost, freq, ovt)}_{it}\\) is a matrix of size (I x S) x (3); it has three entries for each item-session, and is like a price; its coefficient \\(\\beta^{1}\\) has constant variation and is of size (1) x (3). - \\(X^{session: income}_{it}\\) is a matrix which is of size (S) x (1); it has one entry for each session, and it denotes income of the user making the choice in the session. In this case, it is equivalent to \\(X^{usersession: income}_{it}\\) since we observe a user making a decision only once; its coefficient \\(\\beta^2_i\\) has item level variation and is of size (I) x (1) - \\(X_{it}^{itemsession:ivt}\\) is a matrix of size (I x S) x (1); this has one entry for each item-session; it is the price; its coefficent \\(\\beta^3_i\\) has item level variation and is of size (I) x (3) MNIST classification (Upcoming Detailed Tutorial) \\[ U_{it} = \\beta_i X^{session:pixelvalues}_{t} + \\epsilon_{it} \\] We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case, an item is one of the 10 possible digits, so I = 10; there is one user per session, so that U=S; and each session is an image being classified. Then, - \\(X^{session:pixelvalues}_{t}\\) is a matrix of size (S) x (H x W) where H x W are the dimensions of the image being classified; its coefficient \\(\\beta_i\\) has item level vartiation and is of size (I) x (1) This is a classic problem used for exposition in Computer Science to motivate various Machine Learning models. There is no concept of a user in this setup. Our package allows for models of this nature and is fully usable for Machine Learning problems with added flexibility over scikit-learn logistic regression We highly recommend users to go through tutorials we prepared to get a better understanding of what the package offers. We present multiple examples, and for each case we specify the utility form. Notes on Encodings Since we will be using PyTorch to train our model, we accept user and item identities with integer values from [0, 1, .. num_users - 1] and [0, 1, .. num_items - 1] instead of the raw human-readable names of items (e.g., Dell 24-inch LCD monitor) or any other encoding. The user is responsible to encode user indices, item indices and session indices, wherever appliable (some setups do not require session and/or user identifiers) Raw item/user/session names can be encoded easily with sklearn.preprocessing.LabelEncoder (The sklearn.preprocessing.OrdinalEncoder works as well). Here is an example of encoding generic item names to integers using sklearn.preprocessing.LabelEncoder : from sklearn.preprocessing import LabelEncoder enc = LabelEncoder () raw_items = [ 'Macbook Laptop' , 'Dell 24-inch Monitor' , 'Orange' , 'Apple (Fruit)' ] encoded_items = enc . fit_transform ( raw_items ) print ( encoded_items ) # output: [2 1 3 0] # for each 0 <= i <= 3, enc.classes_[i] reveals the raw name of item encoded to i. print ( enc . classes_ ) # output: ['Apple (Fruit)' 'Dell 24-inch Monitor' 'Macbook Laptop' 'Orange'] # For example, the first entry of enc.classes_ is 'Apple (Fruit)', this means 'Apple (Fruit)' was encoded to 0 in this process. # The last item in the `raw_item` list was 'Apple (Fruit)', and the last item in the `encoded_item` list was 0 as we expected. Components of the Choice Modeling Problem For the rest of this tutorial, we will consider retail supermarket choice as the concrete setting. We aim to predict users' choices while choosing between multiple available items, e.g., which brand of milk the user will purchase in the supermarket. We begin with essential components of the choice modeling problem. Walking through these components helps understand what kind of data our models are working on. Purchase Record A purchase record is a record describing who bought what at when and where . Let \\(B\\) denote the number of purchase records in the dataset (i.e., number of rows/observation of the dataset). Each row \\(b \\in \\{1,2,\\dots, B\\}\\) corresponds to a purchase record. What : Items and Categories To begin with, suppose there are \\(I\\) items indexed by \\(i \\in \\{1,2,\\dots,I\\}\\) . The researcher can optionally partition the set items into \\(C\\) categories indexed by \\(c \\in \\{1,2,\\dots,C\\}\\) . Let \\(I_c\\) denote the collection of items in category \\(c\\) . It's easy to see that the union of all \\(I_c\\) is the entire set of items \\(\\{1, 2, \\dots I\\}\\) . Suppose the researcher does not wish to model different categories differently. In that case, the researcher can put all items in one category: \\(I_1 = \\{1, 2, \\dots I\\}\\) , so all items belong to the same category. For each purchase record \\(b \\in \\{1,2,\\dots, B\\}\\) , there is a corresponding \\(i_b \\in \\{1,2,\\dots,I\\}\\) saying which item was chosen in this record. Who : Users The agent which makes choices in our setting is a user indexed by \\(u \\in \\{1,2,\\dots,U\\}\\) as well. For each purchase record \\(b \\in \\{1,2,\\dots, B\\}\\) , there is a corresponding \\(u_b \\in \\{1,2,\\dots,I\\}\\) describing which user was making the decision. When and Where : Sessions Our data structure encompasses where and when using a notion called session indexed by \\(s \\in \\{1,2,\\dots, S\\}\\) . For example, we had the purchase record from five different stores for every day in 2021, then a session \\(s\\) is defined as a pair of (date, storeID) , and there are \\(5 \\times 365\\) sessions in total. In another example, suppose the data came from a single store for over a year. In this case, the notion of where is immaterial, and session \\(s\\) is simply the date of purchase. The notion of sessions can be more flexible than just date and location. For example, if we want to distinguish between online ordering and in-store purchasing, we can define the session as (date, storeID, IsOnlineOrdering). The session variable serves as a tool for the researcher to split the dataset; the usefulness of the session will be more evident after introducing observables (features) later. If the researcher does not wish to handle records from different sessions differently, the researcher can assign the same session ID to all dataset rows. Putting Everything Together To summarize, each purchase record \\(b \\in \\{1, 2, \\dots, B\\}\\) in the dataset is characterized by a user-session-item tuple \\((u_b, s_b, i_b)\\) . The totality of \\(B\\) purchase records consists of the dataset we are modeling. When the same user buys multiple items in the same session, the dataset will have multiple purchase records with the same \\((u, s)\\) corresponding to the same receipt. In this case, the modeling assumption is that the user buys at most one item from each category available to choose from. Item Availability It is not necessarily that all items are available in every session; items can get out of stock in particular sessions. To handle these cases, the researcher can optionally provide a boolean tensor \\(A \\in \\{\\texttt{True}, \\texttt{False}\\}^{S\\times I}\\) to indicate which items are available for purchase in each session. \\(A_{s, i} = \\texttt{True}\\) if and only if item \\(i\\) was available in session \\(s\\) . While predicting the purchase probabilities, the model sets the probability for these unavailable items to zero and normalizes probabilities among available items. If the item availability is not provided, the model assumes all items are available in all sessions. Observables Next, let's talk about observables. This is the same as a feature in machine learning literature, commonly denoted using \\(X\\) . The researcher can incorporate observables of, for example, users and/or items into the model. Currently, the package support the following types of observables, where \\(K_{...}\\) denote the number of observables. user_obs \\(\\in \\mathbb{R}^{U\\times K_{user}}\\) : user observables such as user age. item_obs \\(\\in \\mathbb{R}^{I\\times K_{item}}\\) : item observables such as item quality. session_obs \\(\\in \\mathbb{R}^{S \\times K_{session}}\\) : session observable such as whether the purchase was made on weekdays. itemsession_obs \\(\\in \\mathbb{R}^{S \\times I \\times K_{itemsession}}\\) , item-session observables are values depending on both session and item such as the price of item. These can also be called price_obs usersession_obs \\(\\in \\mathbb{R}^{S \\times U \\times K_{usersession}}\\) , user-session observables are values depending on both session and user such as the income of the user. Please note that we consider these four types as definitions of observable types. For example, whenever a variable is user-specific, then we call it an user_obs . This package defines observables in the above way so that the package can easily track the variation of variables and handle these observable tensors correctly. A Toy Example Suppose we have a dataset of purchase history from two stores (Store A and B) on two dates (Sep 16 and 17), both stores sell {apple, banana, orange} ( num_items=3 ) and there are three people came to those stores between Sep 16 and 17. user_index session_index item_index Amy Sep-17-2021-Store-A banana Ben Sep-17-2021-Store-B apple Ben Sep-16-2021-Store-A orange Charlie Sep-16-2021-Store-B apple Charlie Sep-16-2021-Store-B orange NOTE : For demonstration purposes, the example dataset has user_index , session_index and item_index as strings, they should be consecutive integers in actual production. One can easily convert them to integers using sklearn.preprocessing.LabelEncoder . In the example above, - user_index=[0,1,1,2,2] (with encoding 0=Amy, 1=Ben, 2=Charlie ), - session_index=[0,1,2,3,3] (with encoding 0=Sep-17-2021-Store-A, 1=Sep-17-2021-Store-B, 2=Sep-16-2021-Store-A, 3=Sep-16-2021-Store-B ), - item_index=[0,1,2,1,2] (with encoding 0=banana, 1=apple, 2=orange ). Suppose we believe people's purchase decision depends on the nutrition levels of these fruits; suppose apple has the highest nutrition level and banana has the lowest one, we can add item_obs=[[1.5], [12.0], [3.3]] \\(\\in \\mathbb{R}^{3\\times 1}\\) . The shape of this tensor is number-of-items by number-of-observable. NOTE : If someone went to one store and bought multiple items (e.g., Charlie bought both apple and orange at Store B on Sep-16), we include them as separate rows in the dataset and model them independently. Models The torch-choice library provides two models, the conditional logit model and the nested logit model, for modeling the dataset. Each model takes in \\((u_b, s_b)\\) altogether with observables and outputs a probability of purchasing each \\(\\tilde{i} \\in \\{1, 2, \\dots, I\\}\\) , denoted as \\(\\hat{p}_{u_b, s_b, \\tilde{i}}\\) . In cases when not all items are available, the model sets the probability of unavailable items to zero and normalizes probabilities among available items. \\(\\hat{p}_{u_b, s_b, \\tilde{i}}\\) is the predicted probability of purchasing item \\(\\tilde{i}\\) in session \\(s_b\\) by user \\(u_b\\) given all information we know. Model parameters are trained using gradient descent algorithm and the loss function is the negative log-likelihood of the model \\(-\\sum_{b=1}^B \\log(\\hat{p}_{u_b, s_b, i_b})\\) . The major difference among models lies in the way they compute predicted probabilities.","title":"Introduction"},{"location":"intro/#introduction","text":"Logistic Regression models the probability that user \\(u\\) chooses item \\(i\\) in session \\(s\\) by the logistic function \\[ P_{uis} = \\frac{e^{\\mu_{uis}}}{\\Sigma_{j \\in A_{us}}e^{\\mu_{ujs}}} \\] where, \\[\\mu_{uis} = \\alpha + \\beta X + \\gamma W + \\dots\\] here \\(X\\) , \\(W\\) are predictors (independent variables) for users and items respectively (these can be constant or can vary across session), and greek letters \\(\\alpha\\) , \\(\\beta\\) and \\(\\gamma\\) are learned parameters. \\(A_{us}\\) is the set of items available for user \\(u\\) in session \\(s\\) . When users are choosing over items, we can write utility \\(U_{uis}\\) that user \\(u\\) derives from item \\(i\\) in session \\(s\\) , as \\[ U_{uis} = \\mu_{uis} + \\epsilon_{uis} \\] where \\(\\epsilon\\) is an unobserved random error term. If we assume iid extreme value type 1 errors for \\(\\epsilon_{uis}\\) , this leads to the above logistic probabilities of user \\(u\\) choosing item \\(i\\) in session \\(s\\) , as shown by McFadden , and as often studied in Econometrics.","title":"Introduction"},{"location":"intro/#package","text":"We implement a fully flexible setup, where we allow 1. coefficients ( \\(\\alpha\\) , \\(\\beta\\) , \\(\\gamma\\) , \\(\\dots\\) ) to be constant, user-specific (i.e., \\(\\alpha=\\alpha_u\\) ), item-specific (i.e., \\(\\alpha=\\alpha_i\\) ), session-specific (i.e., \\(\\alpha=\\alpha_t\\) ), or (session, item)-specific (i.e., \\(\\alpha=\\alpha_{ti}\\) ). For example, specifying \\(\\alpha\\) to be item-specific is equivalent to adding an item-level fixed effect. 2. Observables ( \\(X\\) , \\(Y\\) , \\(\\dots\\) ) to be constant, user-specific, item-specific, session-specific, or (session, item) (such as price) and (session, user) (such as income) specific as well. 3. Specifying availability sets \\(A_{us}\\) This flexibility in coefficients and features allows for more than 20 types of additive terms to \\(U_{uis}\\) , which enables modelling rich structures. As such, this package can be used to learn such models for 1. Parameter Estimation, as in the Transportation Choice example below 2. Prediction, as in the MNIST handwritten digits classification example below Examples with Utility Form: 1. Transportation Choice (from the Mode Canada dataset) (Detailed Tutorial) \\[ U_{uit} = \\beta^0_i + \\beta^{1} X^{itemsession: (cost, freq, ovt)}_{it} + \\beta^2_i X^{session:income}_t + \\beta^3_i X_{it}^{itemsession:ivt} + \\epsilon_{uit} \\] This is also described as a conditional logit model in Econometrics. We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case there is one user per session, so that U = S Then, - \\(X^{itemsession: (cost, freq, ovt)}_{it}\\) is a matrix of size (I x S) x (3); it has three entries for each item-session, and is like a price; its coefficient \\(\\beta^{1}\\) has constant variation and is of size (1) x (3). - \\(X^{session: income}_{it}\\) is a matrix which is of size (S) x (1); it has one entry for each session, and it denotes income of the user making the choice in the session. In this case, it is equivalent to \\(X^{usersession: income}_{it}\\) since we observe a user making a decision only once; its coefficient \\(\\beta^2_i\\) has item level variation and is of size (I) x (1) - \\(X_{it}^{itemsession:ivt}\\) is a matrix of size (I x S) x (1); this has one entry for each item-session; it is the price; its coefficent \\(\\beta^3_i\\) has item level variation and is of size (I) x (3) MNIST classification (Upcoming Detailed Tutorial) \\[ U_{it} = \\beta_i X^{session:pixelvalues}_{t} + \\epsilon_{it} \\] We note the shapes/sizes of each of the components in the above model. Suppose there are U users, I items and S sessions; in this case, an item is one of the 10 possible digits, so I = 10; there is one user per session, so that U=S; and each session is an image being classified. Then, - \\(X^{session:pixelvalues}_{t}\\) is a matrix of size (S) x (H x W) where H x W are the dimensions of the image being classified; its coefficient \\(\\beta_i\\) has item level vartiation and is of size (I) x (1) This is a classic problem used for exposition in Computer Science to motivate various Machine Learning models. There is no concept of a user in this setup. Our package allows for models of this nature and is fully usable for Machine Learning problems with added flexibility over scikit-learn logistic regression We highly recommend users to go through tutorials we prepared to get a better understanding of what the package offers. We present multiple examples, and for each case we specify the utility form.","title":"Package"},{"location":"intro/#notes-on-encodings","text":"Since we will be using PyTorch to train our model, we accept user and item identities with integer values from [0, 1, .. num_users - 1] and [0, 1, .. num_items - 1] instead of the raw human-readable names of items (e.g., Dell 24-inch LCD monitor) or any other encoding. The user is responsible to encode user indices, item indices and session indices, wherever appliable (some setups do not require session and/or user identifiers) Raw item/user/session names can be encoded easily with sklearn.preprocessing.LabelEncoder (The sklearn.preprocessing.OrdinalEncoder works as well). Here is an example of encoding generic item names to integers using sklearn.preprocessing.LabelEncoder : from sklearn.preprocessing import LabelEncoder enc = LabelEncoder () raw_items = [ 'Macbook Laptop' , 'Dell 24-inch Monitor' , 'Orange' , 'Apple (Fruit)' ] encoded_items = enc . fit_transform ( raw_items ) print ( encoded_items ) # output: [2 1 3 0] # for each 0 <= i <= 3, enc.classes_[i] reveals the raw name of item encoded to i. print ( enc . classes_ ) # output: ['Apple (Fruit)' 'Dell 24-inch Monitor' 'Macbook Laptop' 'Orange'] # For example, the first entry of enc.classes_ is 'Apple (Fruit)', this means 'Apple (Fruit)' was encoded to 0 in this process. # The last item in the `raw_item` list was 'Apple (Fruit)', and the last item in the `encoded_item` list was 0 as we expected.","title":"Notes on Encodings"},{"location":"intro/#components-of-the-choice-modeling-problem","text":"For the rest of this tutorial, we will consider retail supermarket choice as the concrete setting. We aim to predict users' choices while choosing between multiple available items, e.g., which brand of milk the user will purchase in the supermarket. We begin with essential components of the choice modeling problem. Walking through these components helps understand what kind of data our models are working on.","title":"Components of the Choice Modeling Problem"},{"location":"intro/#purchase-record","text":"A purchase record is a record describing who bought what at when and where . Let \\(B\\) denote the number of purchase records in the dataset (i.e., number of rows/observation of the dataset). Each row \\(b \\in \\{1,2,\\dots, B\\}\\) corresponds to a purchase record.","title":"Purchase Record"},{"location":"intro/#what-items-and-categories","text":"To begin with, suppose there are \\(I\\) items indexed by \\(i \\in \\{1,2,\\dots,I\\}\\) . The researcher can optionally partition the set items into \\(C\\) categories indexed by \\(c \\in \\{1,2,\\dots,C\\}\\) . Let \\(I_c\\) denote the collection of items in category \\(c\\) . It's easy to see that the union of all \\(I_c\\) is the entire set of items \\(\\{1, 2, \\dots I\\}\\) . Suppose the researcher does not wish to model different categories differently. In that case, the researcher can put all items in one category: \\(I_1 = \\{1, 2, \\dots I\\}\\) , so all items belong to the same category. For each purchase record \\(b \\in \\{1,2,\\dots, B\\}\\) , there is a corresponding \\(i_b \\in \\{1,2,\\dots,I\\}\\) saying which item was chosen in this record.","title":"What: Items and Categories"},{"location":"intro/#who-users","text":"The agent which makes choices in our setting is a user indexed by \\(u \\in \\{1,2,\\dots,U\\}\\) as well. For each purchase record \\(b \\in \\{1,2,\\dots, B\\}\\) , there is a corresponding \\(u_b \\in \\{1,2,\\dots,I\\}\\) describing which user was making the decision.","title":"Who: Users"},{"location":"intro/#when-and-where-sessions","text":"Our data structure encompasses where and when using a notion called session indexed by \\(s \\in \\{1,2,\\dots, S\\}\\) . For example, we had the purchase record from five different stores for every day in 2021, then a session \\(s\\) is defined as a pair of (date, storeID) , and there are \\(5 \\times 365\\) sessions in total. In another example, suppose the data came from a single store for over a year. In this case, the notion of where is immaterial, and session \\(s\\) is simply the date of purchase. The notion of sessions can be more flexible than just date and location. For example, if we want to distinguish between online ordering and in-store purchasing, we can define the session as (date, storeID, IsOnlineOrdering). The session variable serves as a tool for the researcher to split the dataset; the usefulness of the session will be more evident after introducing observables (features) later. If the researcher does not wish to handle records from different sessions differently, the researcher can assign the same session ID to all dataset rows.","title":"When and Where: Sessions"},{"location":"intro/#putting-everything-together","text":"To summarize, each purchase record \\(b \\in \\{1, 2, \\dots, B\\}\\) in the dataset is characterized by a user-session-item tuple \\((u_b, s_b, i_b)\\) . The totality of \\(B\\) purchase records consists of the dataset we are modeling. When the same user buys multiple items in the same session, the dataset will have multiple purchase records with the same \\((u, s)\\) corresponding to the same receipt. In this case, the modeling assumption is that the user buys at most one item from each category available to choose from.","title":"Putting Everything Together"},{"location":"intro/#item-availability","text":"It is not necessarily that all items are available in every session; items can get out of stock in particular sessions. To handle these cases, the researcher can optionally provide a boolean tensor \\(A \\in \\{\\texttt{True}, \\texttt{False}\\}^{S\\times I}\\) to indicate which items are available for purchase in each session. \\(A_{s, i} = \\texttt{True}\\) if and only if item \\(i\\) was available in session \\(s\\) . While predicting the purchase probabilities, the model sets the probability for these unavailable items to zero and normalizes probabilities among available items. If the item availability is not provided, the model assumes all items are available in all sessions.","title":"Item Availability"},{"location":"intro/#observables","text":"Next, let's talk about observables. This is the same as a feature in machine learning literature, commonly denoted using \\(X\\) . The researcher can incorporate observables of, for example, users and/or items into the model. Currently, the package support the following types of observables, where \\(K_{...}\\) denote the number of observables. user_obs \\(\\in \\mathbb{R}^{U\\times K_{user}}\\) : user observables such as user age. item_obs \\(\\in \\mathbb{R}^{I\\times K_{item}}\\) : item observables such as item quality. session_obs \\(\\in \\mathbb{R}^{S \\times K_{session}}\\) : session observable such as whether the purchase was made on weekdays. itemsession_obs \\(\\in \\mathbb{R}^{S \\times I \\times K_{itemsession}}\\) , item-session observables are values depending on both session and item such as the price of item. These can also be called price_obs usersession_obs \\(\\in \\mathbb{R}^{S \\times U \\times K_{usersession}}\\) , user-session observables are values depending on both session and user such as the income of the user. Please note that we consider these four types as definitions of observable types. For example, whenever a variable is user-specific, then we call it an user_obs . This package defines observables in the above way so that the package can easily track the variation of variables and handle these observable tensors correctly.","title":"Observables"},{"location":"intro/#a-toy-example","text":"Suppose we have a dataset of purchase history from two stores (Store A and B) on two dates (Sep 16 and 17), both stores sell {apple, banana, orange} ( num_items=3 ) and there are three people came to those stores between Sep 16 and 17. user_index session_index item_index Amy Sep-17-2021-Store-A banana Ben Sep-17-2021-Store-B apple Ben Sep-16-2021-Store-A orange Charlie Sep-16-2021-Store-B apple Charlie Sep-16-2021-Store-B orange NOTE : For demonstration purposes, the example dataset has user_index , session_index and item_index as strings, they should be consecutive integers in actual production. One can easily convert them to integers using sklearn.preprocessing.LabelEncoder . In the example above, - user_index=[0,1,1,2,2] (with encoding 0=Amy, 1=Ben, 2=Charlie ), - session_index=[0,1,2,3,3] (with encoding 0=Sep-17-2021-Store-A, 1=Sep-17-2021-Store-B, 2=Sep-16-2021-Store-A, 3=Sep-16-2021-Store-B ), - item_index=[0,1,2,1,2] (with encoding 0=banana, 1=apple, 2=orange ). Suppose we believe people's purchase decision depends on the nutrition levels of these fruits; suppose apple has the highest nutrition level and banana has the lowest one, we can add item_obs=[[1.5], [12.0], [3.3]] \\(\\in \\mathbb{R}^{3\\times 1}\\) . The shape of this tensor is number-of-items by number-of-observable. NOTE : If someone went to one store and bought multiple items (e.g., Charlie bought both apple and orange at Store B on Sep-16), we include them as separate rows in the dataset and model them independently.","title":"A Toy Example"},{"location":"intro/#models","text":"The torch-choice library provides two models, the conditional logit model and the nested logit model, for modeling the dataset. Each model takes in \\((u_b, s_b)\\) altogether with observables and outputs a probability of purchasing each \\(\\tilde{i} \\in \\{1, 2, \\dots, I\\}\\) , denoted as \\(\\hat{p}_{u_b, s_b, \\tilde{i}}\\) . In cases when not all items are available, the model sets the probability of unavailable items to zero and normalizes probabilities among available items. \\(\\hat{p}_{u_b, s_b, \\tilde{i}}\\) is the predicted probability of purchasing item \\(\\tilde{i}\\) in session \\(s_b\\) by user \\(u_b\\) given all information we know. Model parameters are trained using gradient descent algorithm and the loss function is the negative log-likelihood of the model \\(-\\sum_{b=1}^B \\log(\\hat{p}_{u_b, s_b, i_b})\\) . The major difference among models lies in the way they compute predicted probabilities.","title":"Models"},{"location":"landing_page_short_tutorial/","text":"Introduction Welcome to the deep choice documentation site, we will guide you through basics of our package and how to use it. Author: Tianyu Du Date: Jun. 22, 2022 Update: Jul. 10, 2022 __author__ = 'Tianyu Du' In this demonstration, we will guide you through a minimal example of fitting a conditional logit model using our package. We will be referencing to R code and Stata code as well to deliver a smooth knowledge transfer. First thing first, let's import a couple of modules from our package. Step 0: Import Modules Python import pandas as pd from torch_choice.utils import EasyDatasetWrapper , run_helper from torch_choice.model import ConditionalLogitModel R library(\"mlogit\") Step 1: Load Data We have include a copy of the ModeCanada dataset in our package: ./public_datasets/ModeCanada.csv , it's a very small dataset and please feel free to investigate it using softwares like Microsoft Excel. Let's load the mode canada dataset (TODO: add reference to it). Python df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) . query ( 'noalt == 4' ) . reset_index ( drop = True ) R ModeCanada <- read.csv('./public_datasets/ModeCanada.csv') ModeCanada <- select(ModeCanada, -X) ModeCanada$alt <- as.factor(ModeCanada$alt) Step 2: Format Data-Frame TODO: add why we need to do it (every package is doing it). Python Tell the EasyDatasetWrapper about observables price observable: cost, freq, ovt, ivt session observables: income. data = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'case' , choice_column = 'choice' , item_name_column = 'alt' , user_index_column = 'case' , session_index_column = 'case' , session_observable_columns = [ 'income' ], price_observable_columns = [ 'cost' , 'freq' , 'ovt' , 'ivt' ] ) Creating choice dataset from stata format data-frames... Finished Creating Choice Dataset. R MC <- dfidx(ModeCanada, subset = noalt == 4) Step 3: Define and Fit the Conditional Logit Model Python model = ConditionalLogitModel ( coef_variation_dict = { 'itemsession_cost' : 'constant' , 'itemsession_freq' : 'constant' , 'itemsession_ovt' : 'constant' , 'session_income' : 'item' , 'itemsession_ivt' : 'item-full' , 'intercept' : 'item' }, num_items = 4 ) run_helper . run ( model , data . choice_dataset , num_epochs = 5000 , learning_rate = 0.01 , batch_size =- 1 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_freq): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost] with 1 parameters, with constant level variation. X[itemsession_freq] with 1 parameters, with constant level variation. X[itemsession_ovt] with 1 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[itemsession_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cpu ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[2779], provided_num_items=[], user_index=[2779], session_index=[2779], item_availability=[], session_income=[2779, 1], itemsession_cost=[2779, 4, 1], itemsession_freq=[2779, 4, 1], itemsession_ovt=[2779, 4, 1], itemsession_ivt=[2779, 4, 1], device=cpu) ==================== training the model ==================== Epoch 500: Log-likelihood=-1980.04736328125 Epoch 1000: Log-likelihood=-1883.31298828125 Epoch 1500: Log-likelihood=-1878.42333984375 Epoch 2000: Log-likelihood=-1878.1141357421875 Epoch 2500: Log-likelihood=-1879.6005859375 Epoch 3000: Log-likelihood=-1881.0731201171875 Epoch 3500: Log-likelihood=-1876.06494140625 Epoch 4000: Log-likelihood=-1877.595703125 Epoch 4500: Log-likelihood=-1875.7891845703125 Epoch 5000: Log-likelihood=-1880.450439453125 ==================== model results ==================== Training Epochs: 5000 Learning Rate: 0.01 Batch Size: 2779 out of 2779 observations in total Final Log-likelihood: -1880.450439453125 Coefficients: | Coefficient | Estimation | Std. Err. | |:-------------------|-------------:|------------:| | itemsession_cost_0 | -0.0395517 | 0.00698674 | | itemsession_freq_0 | 0.094687 | 0.00504918 | | itemsession_ovt_0 | -0.0427526 | 0.00314028 | | session_income_0 | -0.0867186 | 0.0174223 | | session_income_1 | -0.0268471 | 0.00385441 | | session_income_2 | -0.0359928 | 0.00396057 | | itemsession_ivt_0 | 0.0597122 | 0.0100132 | | itemsession_ivt_1 | -0.00648056 | 0.00417645 | | itemsession_ivt_2 | -0.00567451 | 0.00187769 | | itemsession_ivt_3 | -0.000954159 | 0.00116984 | | intercept_0 | -0.202089 | 1.22288 | | intercept_1 | 0.95435 | 0.691519 | | intercept_2 | 2.51871 | 0.60307 | ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_freq): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost] with 1 parameters, with constant level variation. X[itemsession_freq] with 1 parameters, with constant level variation. X[itemsession_ovt] with 1 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[itemsession_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cpu R ml.MC1 <- mlogit(choice ~ cost + freq + ovt | income | ivt, MC, reflevel='air') summary(ml.MC1) R output: Call: mlogit(formula = choice ~ cost + freq + ovt | income | ivt, data = MC, reflevel = \"air\", method = \"nr\") Frequencies of alternatives:choice air bus car train 0.3738755 0.0035984 0.4559194 0.1666067 nr method 9 iterations, 0h:0m:0s g'(-H)^-1g = 0.00014 successive function values within tolerance limits Coefficients : Estimate Std. Error z-value Pr(>|z|) (Intercept):bus 0.6983381 1.2802466 0.5455 0.5854292 (Intercept):car 1.8441129 0.7085089 2.6028 0.0092464 ** (Intercept):train 3.2741952 0.6244152 5.2436 1.575e-07 *** cost -0.0333389 0.0070955 -4.6986 2.620e-06 *** freq 0.0925297 0.0050976 18.1517 < 2.2e-16 *** ovt -0.0430036 0.0032247 -13.3356 < 2.2e-16 *** income:bus -0.0890867 0.0183471 -4.8556 1.200e-06 *** income:car -0.0279930 0.0038726 -7.2286 4.881e-13 *** income:train -0.0381466 0.0040831 -9.3426 < 2.2e-16 *** ivt:air 0.0595097 0.0100727 5.9080 3.463e-09 *** ivt:bus -0.0067835 0.0044334 -1.5301 0.1259938 ivt:car -0.0064603 0.0018985 -3.4029 0.0006668 *** ivt:train -0.0014504 0.0011875 -1.2214 0.2219430 --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Log-Likelihood: -1874.3 McFadden R^2: 0.35443 Likelihood ratio test : chisq = 2058.1 (p.value = < 2.22e-16)","title":"Introduction"},{"location":"landing_page_short_tutorial/#introduction","text":"Welcome to the deep choice documentation site, we will guide you through basics of our package and how to use it. Author: Tianyu Du Date: Jun. 22, 2022 Update: Jul. 10, 2022 __author__ = 'Tianyu Du' In this demonstration, we will guide you through a minimal example of fitting a conditional logit model using our package. We will be referencing to R code and Stata code as well to deliver a smooth knowledge transfer. First thing first, let's import a couple of modules from our package.","title":"Introduction"},{"location":"landing_page_short_tutorial/#step-0-import-modules","text":"","title":"Step 0: Import Modules"},{"location":"landing_page_short_tutorial/#python","text":"import pandas as pd from torch_choice.utils import EasyDatasetWrapper , run_helper from torch_choice.model import ConditionalLogitModel","title":"Python"},{"location":"landing_page_short_tutorial/#r","text":"library(\"mlogit\")","title":"R"},{"location":"landing_page_short_tutorial/#step-1-load-data","text":"We have include a copy of the ModeCanada dataset in our package: ./public_datasets/ModeCanada.csv , it's a very small dataset and please feel free to investigate it using softwares like Microsoft Excel. Let's load the mode canada dataset (TODO: add reference to it).","title":"Step 1: Load Data"},{"location":"landing_page_short_tutorial/#python_1","text":"df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) . query ( 'noalt == 4' ) . reset_index ( drop = True )","title":"Python"},{"location":"landing_page_short_tutorial/#r_1","text":"ModeCanada <- read.csv('./public_datasets/ModeCanada.csv') ModeCanada <- select(ModeCanada, -X) ModeCanada$alt <- as.factor(ModeCanada$alt)","title":"R"},{"location":"landing_page_short_tutorial/#step-2-format-data-frame","text":"TODO: add why we need to do it (every package is doing it).","title":"Step 2: Format Data-Frame"},{"location":"landing_page_short_tutorial/#python_2","text":"Tell the EasyDatasetWrapper about observables price observable: cost, freq, ovt, ivt session observables: income. data = EasyDatasetWrapper ( main_data = df , purchase_record_column = 'case' , choice_column = 'choice' , item_name_column = 'alt' , user_index_column = 'case' , session_index_column = 'case' , session_observable_columns = [ 'income' ], price_observable_columns = [ 'cost' , 'freq' , 'ovt' , 'ivt' ] ) Creating choice dataset from stata format data-frames... Finished Creating Choice Dataset.","title":"Python"},{"location":"landing_page_short_tutorial/#r_2","text":"MC <- dfidx(ModeCanada, subset = noalt == 4)","title":"R"},{"location":"landing_page_short_tutorial/#step-3-define-and-fit-the-conditional-logit-model","text":"","title":"Step 3: Define and Fit the Conditional Logit Model"},{"location":"landing_page_short_tutorial/#python_3","text":"model = ConditionalLogitModel ( coef_variation_dict = { 'itemsession_cost' : 'constant' , 'itemsession_freq' : 'constant' , 'itemsession_ovt' : 'constant' , 'session_income' : 'item' , 'itemsession_ivt' : 'item-full' , 'intercept' : 'item' }, num_items = 4 ) run_helper . run ( model , data . choice_dataset , num_epochs = 5000 , learning_rate = 0.01 , batch_size =- 1 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_freq): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost] with 1 parameters, with constant level variation. X[itemsession_freq] with 1 parameters, with constant level variation. X[itemsession_ovt] with 1 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[itemsession_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cpu ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[2779], provided_num_items=[], user_index=[2779], session_index=[2779], item_availability=[], session_income=[2779, 1], itemsession_cost=[2779, 4, 1], itemsession_freq=[2779, 4, 1], itemsession_ovt=[2779, 4, 1], itemsession_ivt=[2779, 4, 1], device=cpu) ==================== training the model ==================== Epoch 500: Log-likelihood=-1980.04736328125 Epoch 1000: Log-likelihood=-1883.31298828125 Epoch 1500: Log-likelihood=-1878.42333984375 Epoch 2000: Log-likelihood=-1878.1141357421875 Epoch 2500: Log-likelihood=-1879.6005859375 Epoch 3000: Log-likelihood=-1881.0731201171875 Epoch 3500: Log-likelihood=-1876.06494140625 Epoch 4000: Log-likelihood=-1877.595703125 Epoch 4500: Log-likelihood=-1875.7891845703125 Epoch 5000: Log-likelihood=-1880.450439453125 ==================== model results ==================== Training Epochs: 5000 Learning Rate: 0.01 Batch Size: 2779 out of 2779 observations in total Final Log-likelihood: -1880.450439453125 Coefficients: | Coefficient | Estimation | Std. Err. | |:-------------------|-------------:|------------:| | itemsession_cost_0 | -0.0395517 | 0.00698674 | | itemsession_freq_0 | 0.094687 | 0.00504918 | | itemsession_ovt_0 | -0.0427526 | 0.00314028 | | session_income_0 | -0.0867186 | 0.0174223 | | session_income_1 | -0.0268471 | 0.00385441 | | session_income_2 | -0.0359928 | 0.00396057 | | itemsession_ivt_0 | 0.0597122 | 0.0100132 | | itemsession_ivt_1 | -0.00648056 | 0.00417645 | | itemsession_ivt_2 | -0.00567451 | 0.00187769 | | itemsession_ivt_3 | -0.000954159 | 0.00116984 | | intercept_0 | -0.202089 | 1.22288 | | intercept_1 | 0.95435 | 0.691519 | | intercept_2 | 2.51871 | 0.60307 | ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_freq): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (itemsession_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=1, 1 trainable parameters in total, device=cpu). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost] with 1 parameters, with constant level variation. X[itemsession_freq] with 1 parameters, with constant level variation. X[itemsession_ovt] with 1 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[itemsession_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cpu","title":"Python"},{"location":"landing_page_short_tutorial/#r_3","text":"ml.MC1 <- mlogit(choice ~ cost + freq + ovt | income | ivt, MC, reflevel='air') summary(ml.MC1) R output: Call: mlogit(formula = choice ~ cost + freq + ovt | income | ivt, data = MC, reflevel = \"air\", method = \"nr\") Frequencies of alternatives:choice air bus car train 0.3738755 0.0035984 0.4559194 0.1666067 nr method 9 iterations, 0h:0m:0s g'(-H)^-1g = 0.00014 successive function values within tolerance limits Coefficients : Estimate Std. Error z-value Pr(>|z|) (Intercept):bus 0.6983381 1.2802466 0.5455 0.5854292 (Intercept):car 1.8441129 0.7085089 2.6028 0.0092464 ** (Intercept):train 3.2741952 0.6244152 5.2436 1.575e-07 *** cost -0.0333389 0.0070955 -4.6986 2.620e-06 *** freq 0.0925297 0.0050976 18.1517 < 2.2e-16 *** ovt -0.0430036 0.0032247 -13.3356 < 2.2e-16 *** income:bus -0.0890867 0.0183471 -4.8556 1.200e-06 *** income:car -0.0279930 0.0038726 -7.2286 4.881e-13 *** income:train -0.0381466 0.0040831 -9.3426 < 2.2e-16 *** ivt:air 0.0595097 0.0100727 5.9080 3.463e-09 *** ivt:bus -0.0067835 0.0044334 -1.5301 0.1259938 ivt:car -0.0064603 0.0018985 -3.4029 0.0006668 *** ivt:train -0.0014504 0.0011875 -1.2214 0.2219430 --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Log-Likelihood: -1874.3 McFadden R^2: 0.35443 Likelihood ratio test : chisq = 2058.1 (p.value = < 2.22e-16)","title":"R"},{"location":"nested_logit_model_house_cooling/","text":"Random Utility Model (RUM) Part II: Nested Logit Model Author: Tianyu Du The package implements the nested logit model as well, which allows researchers to model choices as a two-stage process: the user first picks a nest of purchase and then picks the item from the chosen nest that generates the most utility. Examples here are modified from Exercise 2: Nested logit model by Kenneth Train and Yves Croissant . The House Cooling (HC) dataset from mlogit contains data in R format on the choice of heating and central cooling system for 250 single-family, newly built houses in California. The dataset is small and serve as a demonstration of the nested logit model. The alternatives are: Gas central heat with cooling gcc , Electric central resistence heat with cooling ecc , Electric room resistence heat with cooling erc , Electric heat pump, which provides cooling also hpc , Gas central heat without cooling gc , Electric central resistence heat without cooling ec , Electric room resistence heat without cooling er . Heat pumps necessarily provide both heating and cooling such that heat pump without cooling is not an alternative. The variables are: depvar gives the name of the chosen alternative, ich.alt are the installation cost for the heating portion of the system, icca is the installation cost for cooling och.alt are the operating cost for the heating portion of the system occa is the operating cost for cooling income is the annual income of the household Note that the full installation cost of alternative gcc is ich.gcc+icca, and similarly for the operating cost and for the other alternatives with cooling. Nested Logit Model: Background The following code block provides an example initialization of the NestedLogitModel (please refer to examples below for details). model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) The nested logit model decompose the utility of choosing item \\(i\\) into the (1) item-specific values and (2) nest specify values. For simplicity, suppose item \\(i\\) belongs to nest \\(k \\in \\{1, \\dots, K\\}\\) : \\(i \\in B_k\\) . \\[ U_{uit} = W_{ukt} + Y_{uit} \\] Where both \\(W\\) and \\(Y\\) are estimated using linear models from as in the conditional logit model. The log-likelihood for user \\(u\\) to choose item \\(i\\) at time/session \\(t\\) decomposes into the item-level likelihood and nest-level likelihood. \\[ \\log P(i \\mid u, t) = \\log P(i \\mid u, t, B_k) + \\log P(k \\mid u, t) \\\\ = \\log \\left(\\frac{\\exp(Y_{uit}/\\lambda_k)}{\\sum_{j \\in B_k} \\exp(Y_{ujt}/\\lambda_k)}\\right) + \\log \\left( \\frac{\\exp(W_{ukt} + \\lambda_k I_{ukt})}{\\sum_{\\ell=1}^K \\exp(W_{u\\ell t} + \\lambda_\\ell I_{u\\ell t})}\\right) \\] The inclusive value of nest \\(k\\) , \\(I_{ukt}\\) is defined as \\(\\log \\sum_{j \\in B_k} \\exp(Y_{ujt}/\\lambda_k)\\) , which is the expected utility from choosing the best alternative from nest \\(k\\) . The nest_to_item keyword defines a dictionary of the mapping \\(k \\mapsto B_k\\) , where keys of nest_to_item are integer \\(k\\) 's and nest_to_item[k] is a list consisting of IDs of items in \\(B_k\\) . The {nest, item}_coef_variation_dict provides specification to \\(W_{ukt}\\) and \\(Y_{uit}\\) respectively, torch_choice allows for empty nest level models by providing an empty dictionary (in this case, \\(W_{ukt} = \\epsilon_{ukt}\\) ) since the inclusive value term \\(\\lambda_k I_{ukt}\\) will be used to model the choice over nests. However, by specifying an empty second stage model ( \\(Y_{uit} = \\epsilon_{uit}\\) ), the nested logit model reduces to a conditional logit model of choices over nests. Hence, one should never use the NestedLogitModel class with an empty item-level model. Similar to the conditional logit model, {nest, item}_num_param_dict specify the dimension (number of observables to be multiplied with the coefficient) of coefficients. The above code initializes a simple model built upon item-time-specific observables \\(X_{it} \\in \\mathbb{R}^7\\) , \\[ Y_{uit} = \\beta^\\top X_{it} + \\epsilon_{uit} \\\\ W_{ukt} = \\epsilon_{ukt} \\] The research may wish to enfoce the elasiticity \\(\\lambda_k\\) to be constant across nests, setting shared_lambda=True enforces \\(\\lambda_k = \\lambda\\ \\forall k \\in [K]\\) . Load Essential Packages We firstly read essential packages for this tutorial. # ignore warnings for nicer outputs. import warnings warnings . filterwarnings ( \"ignore\" ) import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset , utils from torch_choice.model.nested_logit_model import NestedLogitModel from torch_choice import run print ( torch . __version__ ) 2.0.0 We then select the appropriate device to run the model on, our package supports both CPU and GPU. if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) DEVICE = 'cuda' else : print ( 'Running tutorial on CPU' ) DEVICE = 'cpu' Running tutorial on CPU Load Datasets We firstly read the dataset for this tutorial, the csv file can be found at ./public_datasets/HC.csv . Alternatively, we load the dataset directly from the Github website. df = pd . read_csv ( 'https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/HC.csv' , index_col = 0 ) df = df . reset_index ( drop = True ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } depvar icca occa income ich och idx.id1 idx.id2 inc.room inc.cooling int.cooling cooling.modes room.modes 0 False 0.00 0.00 20 24.50 4.09 1 ec 0 0 0 False False 1 False 27.28 2.95 20 7.86 4.09 1 ecc 0 20 1 True False 2 False 0.00 0.00 20 7.37 3.85 1 er 20 0 0 False True 3 True 27.28 2.95 20 8.79 3.85 1 erc 20 20 1 True True 4 False 0.00 0.00 20 24.08 2.26 1 gc 0 0 0 False False The raw dataset is in a long-format (i.e., each row contains information of one item). df [ 'idx.id2' ] . value_counts () ec 250 ecc 250 er 250 erc 250 gc 250 gcc 250 hpc 250 Name: idx.id2, dtype: int64 # what was actually chosen. item_index = df [ df [ 'depvar' ] == True ] . sort_values ( by = 'idx.id1' )[ 'idx.id2' ] . reset_index ( drop = True ) item_names = [ 'ec' , 'ecc' , 'er' , 'erc' , 'gc' , 'gcc' , 'hpc' ] num_items = df [ 'idx.id2' ] . nunique () # cardinal encoder. encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) Because we will be training our model with PyTorch , we need to encode item names to integers (from 0 to 6). We do this manually in this exercise given the small amount of items, for more items, one can use sklearn.preprocessing.OrdinalEncoder to encode. Raw item names will be encoded as the following. encoder {'ec': 0, 'ecc': 1, 'er': 2, 'erc': 3, 'gc': 4, 'gcc': 5, 'hpc': 6} Nest Level Dataset We firstly construct the nest-level dataset, however, there is no observable that is constant within the same nest, so we don't need to include any observable tensor to the nest_dataset . All we need to do is adding the item_index (i.e., which item is chosen) to the dataset, so that nest_dataset knows the total number of choices made. # nest feature: no nest feature, all features are item-level. nest_dataset = ChoiceDataset ( item_index = item_index . clone ()) . to ( DEVICE ) No `session_index` is provided, assume each choice instance is in its own session. Item Level Dataset For simplicity, we treat each purchasing record as its own session. Moreover, we treat all observables as price observables (i.e., varying by both session and item). Since there are 7 observables in total, the resulted price_obs has shape (250, 7, 7) corresponding to number_of_sessions by number_of_items by number_of_observables . # item feature. item_feat_cols = [ 'ich' , 'och' , 'icca' , 'occa' , 'inc.room' , 'inc.cooling' , 'int.cooling' ] price_obs = utils . pivot3d ( df , dim0 = 'idx.id1' , dim1 = 'idx.id2' , values = item_feat_cols ) price_obs . shape torch.Size([250, 7, 7]) Then, we construct the item level dataset by providing both item_index and price_obs . We move item_dataset to the appropriate device as well. This is only necessary if we are using GPU to accelerate the model. item_dataset = ChoiceDataset ( item_index = item_index , price_obs = price_obs ) . to ( DEVICE ) No `session_index` is provided, assume each choice instance is in its own session. Finally, we chain the nest-level and item-level dataset into a single JointDataset . dataset = JointDataset ( nest = nest_dataset , item = item_dataset ) One can print the joint dataset to see its contents, and tensors contained in each of these sub-datasets. print ( dataset ) JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) Examples There are multiple ways to group 7 items into nests, different classification will result in different utility functions and estimations (see the background of nested logit models). We will demonstrate the usage of our package by presenting three different categorization schemes and corresponding model estimations. Example 1 In the first example, the model is specified to have the cooling alternatives {gcc, ecc, erc, hpc} in one nest and the non-cooling alternatives {gc, ec, er} in another nest. We create a nest_to_item dictionary to inform the model our categorization scheme. The dictionary should have keys ranging from 0 to number_of_nests - 1 , each integer corresponds to a nest. The value of each key is a list of item IDs in the nest, the encoding of item names should be exactly the same as in the construction of item_index . nest_to_item = { 0 : [ 'gcc' , 'ecc' , 'erc' , 'hpc' ], 1 : [ 'gc' , 'ec' , 'er' ]} # encode items to integers. for k , v in nest_to_item . items (): v = [ encoder [ item ] for item in v ] nest_to_item [ k ] = sorted ( v ) In this example, we have item [1, 3, 5, 6] in the first nest (i.e., the nest with ID 0 ) and the rest of items in the second nest (i.e., the nest with ID 1 ). print ( nest_to_item ) {0: [1, 3, 5, 6], 1: [0, 2, 4]} Next, let's create the NestedLogitModel class! The first thing to put in is the nest_to_item dictionary we just built. For nest_coef_variation_dict , nest_num_param_dict , since we don't have any nest-specific observables, we can simply put an empty dictionary there. Coefficients for all observables are constant across items, and there are 7 observables in total. As for shared_lambda=True , please refer to the background recap for nested logit model. model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '' , item_formula = '(price_obs|constant)' , dataset = dataset , shared_lambda = True ) model = model . to ( DEVICE ) You can print the model to get summary information of the NestedLogitModel class. print ( model ) NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) NOTE : We are computing the standard errors using \\(\\sqrt{\\text{diag}(H^{-1})}\\) , where \\(H\\) is the hessian of negative log-likelihood with respect to model parameters. This leads to slight different results compared with R implementation. Here we use the LBFGS optimizer since we are working on a small dataset and 8 coefficients to be estimated. For larger datasets and larger models, we recommend using the Adam optimizer instead. run ( model , dataset , num_epochs = 1000 , model_optimizer = \"LBFGS\" ) ==================== model received ==================== NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) ==================== data set received ==================== [Train dataset] JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------- 0 | model | NestedLogitModel | 8 ------------------------------------------- 8 Trainable params 0 Non-trainable params 8 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 136.14it/s, loss=178, v_num=29] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 121.79it/s, loss=178, v_num=29] Time taken for training: 13.282686233520508 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -178.124755859375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------|-------------:|------------:|----------:|------------:|:---------------| | lambda_weight_0 | 0.585898 | 0.166624 | 3.51628 | 0.000437634 | *** | | item_price_obs[constant]_0 | -0.554846 | 0.144515 | -3.83936 | 0.000123357 | *** | | item_price_obs[constant]_1 | -0.857842 | 0.237496 | -3.61203 | 0.000303804 | *** | | item_price_obs[constant]_2 | -0.225084 | 0.110576 | -2.03556 | 0.0417943 | * | | item_price_obs[constant]_3 | -1.08945 | 1.03675 | -1.05084 | 0.293332 | | | item_price_obs[constant]_4 | -0.37895 | 0.100705 | -3.76299 | 0.000167895 | *** | | item_price_obs[constant]_5 | 0.249572 | 0.0518543 | 4.81295 | 1.4872e-06 | *** | | item_price_obs[constant]_6 | -5.99973 | 4.82952 | -1.2423 | 0.214124 | | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) R Output Here we provide the output from mlogit model in R for estimation reference. Coefficient names reported are slightly different in Python and R , please use the following table for comparison. Please note that the lambda_weight_0 in Python (at the top) corresponds to the iv (inclusive value) in R (at the bottom). Orderings of coefficients for observables should be the same in both languages. Coefficient (Python) Coefficient (R) lambda_weight_0 iv item_price_obs_0 ich item_price_obs_1 och item_price_obs_2 icca item_price_obs_3 occa item_price_obs_4 inc.room item_price_obs_5 inc.cooling item_price_obs_6 int.cooling ## ## Call: ## mlogit(formula = depvar ~ ich + och + icca + occa + inc.room + ## inc.cooling + int.cooling | 0, data = HC, nests = list(cooling = c(\"gcc\", ## \"ecc\", \"erc\", \"hpc\"), other = c(\"gc\", \"ec\", \"er\")), un.nest.el = TRUE) ## ## Frequencies of alternatives:choice ## ec ecc er erc gc gcc hpc ## 0.004 0.016 0.032 0.004 0.096 0.744 0.104 ## ## bfgs method ## 11 iterations, 0h:0m:0s ## g'(-H)^-1g = 7.26E-06 ## successive function values within tolerance limits ## ## Coefficients : ## Estimate Std. Error z-value Pr(>|z|) ## ich -0.554878 0.144205 -3.8478 0.0001192 *** ## och -0.857886 0.255313 -3.3601 0.0007791 *** ## icca -0.225079 0.144423 -1.5585 0.1191212 ## occa -1.089458 1.219821 -0.8931 0.3717882 ## inc.room -0.378971 0.099631 -3.8038 0.0001425 *** ## inc.cooling 0.249575 0.059213 4.2149 2.499e-05 *** ## int.cooling -6.000415 5.562423 -1.0787 0.2807030 ## iv 0.585922 0.179708 3.2604 0.0011125 ** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Log-Likelihood: -178.12 Example 2 The second example is similar to the first one, but we change the way we group items into different nests. Re-estimate the model with the room alternatives in one nest and the central alternatives in another nest. (Note that a heat pump is a central system.) nest_to_item = { 0 : [ 'ec' , 'ecc' , 'gc' , 'gcc' , 'hpc' ], 1 : [ 'er' , 'erc' ]} for k , v in nest_to_item . items (): v = [ encoder [ item ] for item in v ] nest_to_item [ k ] = sorted ( v ) # these two initializations are equivalent. model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) print ( model ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '' , item_formula = '(price_obs|constant)' , dataset = dataset , shared_lambda = True ) print ( model ) model = model . to ( DEVICE ) NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) run ( model , dataset , num_epochs = 1000 , model_optimizer = \"LBFGS\" , learning_rate = 0.3 ) ==================== model received ==================== NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) ==================== data set received ==================== [Train dataset] JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------- 0 | model | NestedLogitModel | 8 ------------------------------------------- 8 Trainable params 0 Non-trainable params 8 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 116.29it/s, loss=180, v_num=30] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 107.92it/s, loss=180, v_num=30] Time taken for training: 7.460475206375122 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -180.02308654785156, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------|-------------:|------------:|----------:|-----------:|:---------------| | lambda_weight_0 | 1.3621 | 0.55502 | 2.45415 | 0.0141217 | * | | item_price_obs[constant]_0 | -1.13826 | 0.444239 | -2.56226 | 0.0103993 | * | | item_price_obs[constant]_1 | -1.82546 | 0.738092 | -2.47321 | 0.0133906 | * | | item_price_obs[constant]_2 | -0.337469 | 0.20258 | -1.66585 | 0.0957429 | | | item_price_obs[constant]_3 | -2.06347 | 1.76159 | -1.17136 | 0.241453 | | | item_price_obs[constant]_4 | -0.757264 | 0.278476 | -2.71931 | 0.00654181 | ** | | item_price_obs[constant]_5 | 0.416903 | 0.170012 | 2.4522 | 0.0141987 | * | | item_price_obs[constant]_6 | -13.8256 | 8.09395 | -1.70814 | 0.0876098 | | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) R Output You can use the table for converting coefficient names reported by Python and R : Coefficient (Python) Coefficient (R) lambda_weight_0 iv item_price_obs_0 ich item_price_obs_1 och item_price_obs_2 icca item_price_obs_3 occa item_price_obs_4 inc.room item_price_obs_5 inc.cooling item_price_obs_6 int.cooling ## ## Call: ## mlogit(formula = depvar ~ ich + och + icca + occa + inc.room + ## inc.cooling + int.cooling | 0, data = HC, nests = list(central = c(\"ec\", ## \"ecc\", \"gc\", \"gcc\", \"hpc\"), room = c(\"er\", \"erc\")), un.nest.el = TRUE) ## ## Frequencies of alternatives:choice ## ec ecc er erc gc gcc hpc ## 0.004 0.016 0.032 0.004 0.096 0.744 0.104 ## ## bfgs method ## 10 iterations, 0h:0m:0s ## g'(-H)^-1g = 5.87E-07 ## gradient close to zero ## ## Coefficients : ## Estimate Std. Error z-value Pr(>|z|) ## ich -1.13818 0.54216 -2.0993 0.03579 * ## och -1.82532 0.93228 -1.9579 0.05024 . ## icca -0.33746 0.26934 -1.2529 0.21024 ## occa -2.06328 1.89726 -1.0875 0.27681 ## inc.room -0.75722 0.34292 -2.2081 0.02723 * ## inc.cooling 0.41689 0.20742 2.0099 0.04444 * ## int.cooling -13.82487 7.94031 -1.7411 0.08167 . ## iv 1.36201 0.65393 2.0828 0.03727 * ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Log-Likelihood: -180.02 Example 3 For the third example, we now group items into three nests. Specifically, we have items gcc , ecc and erc in the first nest (nest 0 in the nest_to_item dictionary), hpc in a nest (nest 1 ) alone, and items gc , ec and er in the last nest (nest 2 ). nest_to_item = { 0 : [ 'gcc' , 'ecc' , 'erc' ], 1 : [ 'hpc' ], 2 : [ 'gc' , 'ec' , 'er' ]} for k , v in nest_to_item . items (): v = [ encoder [ item ] for item in v ] nest_to_item [ k ] = sorted ( v ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '' , item_formula = '(price_obs|constant)' , dataset = dataset , shared_lambda = True ) model = model . to ( DEVICE ) run ( model , dataset , num_epochs = 1000 , model_optimizer = \"LBFGS\" , learning_rate = 0.3 ) ==================== model received ==================== NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) ==================== data set received ==================== [Train dataset] JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------- 0 | model | NestedLogitModel | 8 ------------------------------------------- 8 Trainable params 0 Non-trainable params 8 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 142.92it/s, loss=180, v_num=31] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 126.62it/s, loss=180, v_num=31] Time taken for training: 7.50447416305542 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -180.26324462890625, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------|-------------:|------------:|----------:|------------:|:---------------| | lambda_weight_0 | 0.956541 | 0.197062 | 4.854 | 1.20994e-06 | *** | | item_price_obs[constant]_0 | -0.838394 | 0.099096 | -8.46042 | 0 | *** | | item_price_obs[constant]_1 | -1.3316 | 0.184895 | -7.2019 | 5.93747e-13 | *** | | item_price_obs[constant]_2 | -0.25613 | 0.1263 | -2.02795 | 0.0425655 | * | | item_price_obs[constant]_3 | -1.40566 | 1.14467 | -1.22801 | 0.219443 | | | item_price_obs[constant]_4 | -0.571352 | 0.0750316 | -7.61482 | 2.64233e-14 | *** | | item_price_obs[constant]_5 | 0.311357 | 0.0550892 | 5.65187 | 1.58715e-08 | *** | | item_price_obs[constant]_6 | -10.4134 | 5.19301 | -2.00528 | 0.0449335 | * | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) R Output You can use the table for converting coefficient names reported by Python and R : Coefficient (Python) Coefficient (R) lambda_weight_0 iv item_price_obs_0 ich item_price_obs_1 och item_price_obs_2 icca item_price_obs_3 occa item_price_obs_4 inc.room item_price_obs_5 inc.cooling item_price_obs_6 int.cooling ## ## Call: ## mlogit(formula = depvar ~ ich + och + icca + occa + inc.room + ## inc.cooling + int.cooling | 0, data = HC, nests = list(n1 = c(\"gcc\", ## \"ecc\", \"erc\"), n2 = c(\"hpc\"), n3 = c(\"gc\", \"ec\", \"er\")), ## un.nest.el = TRUE) ## ## Frequencies of alternatives:choice ## ec ecc er erc gc gcc hpc ## 0.004 0.016 0.032 0.004 0.096 0.744 0.104 ## ## bfgs method ## 8 iterations, 0h:0m:0s ## g'(-H)^-1g = 3.71E-08 ## gradient close to zero ## ## Coefficients : ## Estimate Std. Error z-value Pr(>|z|) ## ich -0.838394 0.100546 -8.3384 < 2.2e-16 *** ## och -1.331598 0.252069 -5.2827 1.273e-07 *** ## icca -0.256131 0.145564 -1.7596 0.07848 . ## occa -1.405656 1.207281 -1.1643 0.24430 ## inc.room -0.571352 0.077950 -7.3297 2.307e-13 *** ## inc.cooling 0.311355 0.056357 5.5247 3.301e-08 *** ## int.cooling -10.413384 5.612445 -1.8554 0.06354 . ## iv 0.956544 0.180722 5.2929 1.204e-07 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Log-Likelihood: -180.26","title":"Nested Logit Model"},{"location":"nested_logit_model_house_cooling/#random-utility-model-rum-part-ii-nested-logit-model","text":"Author: Tianyu Du The package implements the nested logit model as well, which allows researchers to model choices as a two-stage process: the user first picks a nest of purchase and then picks the item from the chosen nest that generates the most utility. Examples here are modified from Exercise 2: Nested logit model by Kenneth Train and Yves Croissant . The House Cooling (HC) dataset from mlogit contains data in R format on the choice of heating and central cooling system for 250 single-family, newly built houses in California. The dataset is small and serve as a demonstration of the nested logit model. The alternatives are: Gas central heat with cooling gcc , Electric central resistence heat with cooling ecc , Electric room resistence heat with cooling erc , Electric heat pump, which provides cooling also hpc , Gas central heat without cooling gc , Electric central resistence heat without cooling ec , Electric room resistence heat without cooling er . Heat pumps necessarily provide both heating and cooling such that heat pump without cooling is not an alternative. The variables are: depvar gives the name of the chosen alternative, ich.alt are the installation cost for the heating portion of the system, icca is the installation cost for cooling och.alt are the operating cost for the heating portion of the system occa is the operating cost for cooling income is the annual income of the household Note that the full installation cost of alternative gcc is ich.gcc+icca, and similarly for the operating cost and for the other alternatives with cooling.","title":"Random Utility Model (RUM) Part II: Nested Logit Model"},{"location":"nested_logit_model_house_cooling/#nested-logit-model-background","text":"The following code block provides an example initialization of the NestedLogitModel (please refer to examples below for details). model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) The nested logit model decompose the utility of choosing item \\(i\\) into the (1) item-specific values and (2) nest specify values. For simplicity, suppose item \\(i\\) belongs to nest \\(k \\in \\{1, \\dots, K\\}\\) : \\(i \\in B_k\\) . \\[ U_{uit} = W_{ukt} + Y_{uit} \\] Where both \\(W\\) and \\(Y\\) are estimated using linear models from as in the conditional logit model. The log-likelihood for user \\(u\\) to choose item \\(i\\) at time/session \\(t\\) decomposes into the item-level likelihood and nest-level likelihood. \\[ \\log P(i \\mid u, t) = \\log P(i \\mid u, t, B_k) + \\log P(k \\mid u, t) \\\\ = \\log \\left(\\frac{\\exp(Y_{uit}/\\lambda_k)}{\\sum_{j \\in B_k} \\exp(Y_{ujt}/\\lambda_k)}\\right) + \\log \\left( \\frac{\\exp(W_{ukt} + \\lambda_k I_{ukt})}{\\sum_{\\ell=1}^K \\exp(W_{u\\ell t} + \\lambda_\\ell I_{u\\ell t})}\\right) \\] The inclusive value of nest \\(k\\) , \\(I_{ukt}\\) is defined as \\(\\log \\sum_{j \\in B_k} \\exp(Y_{ujt}/\\lambda_k)\\) , which is the expected utility from choosing the best alternative from nest \\(k\\) . The nest_to_item keyword defines a dictionary of the mapping \\(k \\mapsto B_k\\) , where keys of nest_to_item are integer \\(k\\) 's and nest_to_item[k] is a list consisting of IDs of items in \\(B_k\\) . The {nest, item}_coef_variation_dict provides specification to \\(W_{ukt}\\) and \\(Y_{uit}\\) respectively, torch_choice allows for empty nest level models by providing an empty dictionary (in this case, \\(W_{ukt} = \\epsilon_{ukt}\\) ) since the inclusive value term \\(\\lambda_k I_{ukt}\\) will be used to model the choice over nests. However, by specifying an empty second stage model ( \\(Y_{uit} = \\epsilon_{uit}\\) ), the nested logit model reduces to a conditional logit model of choices over nests. Hence, one should never use the NestedLogitModel class with an empty item-level model. Similar to the conditional logit model, {nest, item}_num_param_dict specify the dimension (number of observables to be multiplied with the coefficient) of coefficients. The above code initializes a simple model built upon item-time-specific observables \\(X_{it} \\in \\mathbb{R}^7\\) , \\[ Y_{uit} = \\beta^\\top X_{it} + \\epsilon_{uit} \\\\ W_{ukt} = \\epsilon_{ukt} \\] The research may wish to enfoce the elasiticity \\(\\lambda_k\\) to be constant across nests, setting shared_lambda=True enforces \\(\\lambda_k = \\lambda\\ \\forall k \\in [K]\\) .","title":"Nested Logit Model: Background"},{"location":"nested_logit_model_house_cooling/#load-essential-packages","text":"We firstly read essential packages for this tutorial. # ignore warnings for nicer outputs. import warnings warnings . filterwarnings ( \"ignore\" ) import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset , utils from torch_choice.model.nested_logit_model import NestedLogitModel from torch_choice import run print ( torch . __version__ ) 2.0.0 We then select the appropriate device to run the model on, our package supports both CPU and GPU. if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) DEVICE = 'cuda' else : print ( 'Running tutorial on CPU' ) DEVICE = 'cpu' Running tutorial on CPU","title":"Load Essential Packages"},{"location":"nested_logit_model_house_cooling/#load-datasets","text":"We firstly read the dataset for this tutorial, the csv file can be found at ./public_datasets/HC.csv . Alternatively, we load the dataset directly from the Github website. df = pd . read_csv ( 'https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/HC.csv' , index_col = 0 ) df = df . reset_index ( drop = True ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } depvar icca occa income ich och idx.id1 idx.id2 inc.room inc.cooling int.cooling cooling.modes room.modes 0 False 0.00 0.00 20 24.50 4.09 1 ec 0 0 0 False False 1 False 27.28 2.95 20 7.86 4.09 1 ecc 0 20 1 True False 2 False 0.00 0.00 20 7.37 3.85 1 er 20 0 0 False True 3 True 27.28 2.95 20 8.79 3.85 1 erc 20 20 1 True True 4 False 0.00 0.00 20 24.08 2.26 1 gc 0 0 0 False False The raw dataset is in a long-format (i.e., each row contains information of one item). df [ 'idx.id2' ] . value_counts () ec 250 ecc 250 er 250 erc 250 gc 250 gcc 250 hpc 250 Name: idx.id2, dtype: int64 # what was actually chosen. item_index = df [ df [ 'depvar' ] == True ] . sort_values ( by = 'idx.id1' )[ 'idx.id2' ] . reset_index ( drop = True ) item_names = [ 'ec' , 'ecc' , 'er' , 'erc' , 'gc' , 'gcc' , 'hpc' ] num_items = df [ 'idx.id2' ] . nunique () # cardinal encoder. encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) Because we will be training our model with PyTorch , we need to encode item names to integers (from 0 to 6). We do this manually in this exercise given the small amount of items, for more items, one can use sklearn.preprocessing.OrdinalEncoder to encode. Raw item names will be encoded as the following. encoder {'ec': 0, 'ecc': 1, 'er': 2, 'erc': 3, 'gc': 4, 'gcc': 5, 'hpc': 6}","title":"Load Datasets"},{"location":"nested_logit_model_house_cooling/#nest-level-dataset","text":"We firstly construct the nest-level dataset, however, there is no observable that is constant within the same nest, so we don't need to include any observable tensor to the nest_dataset . All we need to do is adding the item_index (i.e., which item is chosen) to the dataset, so that nest_dataset knows the total number of choices made. # nest feature: no nest feature, all features are item-level. nest_dataset = ChoiceDataset ( item_index = item_index . clone ()) . to ( DEVICE ) No `session_index` is provided, assume each choice instance is in its own session.","title":"Nest Level Dataset"},{"location":"nested_logit_model_house_cooling/#item-level-dataset","text":"For simplicity, we treat each purchasing record as its own session. Moreover, we treat all observables as price observables (i.e., varying by both session and item). Since there are 7 observables in total, the resulted price_obs has shape (250, 7, 7) corresponding to number_of_sessions by number_of_items by number_of_observables . # item feature. item_feat_cols = [ 'ich' , 'och' , 'icca' , 'occa' , 'inc.room' , 'inc.cooling' , 'int.cooling' ] price_obs = utils . pivot3d ( df , dim0 = 'idx.id1' , dim1 = 'idx.id2' , values = item_feat_cols ) price_obs . shape torch.Size([250, 7, 7]) Then, we construct the item level dataset by providing both item_index and price_obs . We move item_dataset to the appropriate device as well. This is only necessary if we are using GPU to accelerate the model. item_dataset = ChoiceDataset ( item_index = item_index , price_obs = price_obs ) . to ( DEVICE ) No `session_index` is provided, assume each choice instance is in its own session. Finally, we chain the nest-level and item-level dataset into a single JointDataset . dataset = JointDataset ( nest = nest_dataset , item = item_dataset ) One can print the joint dataset to see its contents, and tensors contained in each of these sub-datasets. print ( dataset ) JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) )","title":"Item Level Dataset"},{"location":"nested_logit_model_house_cooling/#examples","text":"There are multiple ways to group 7 items into nests, different classification will result in different utility functions and estimations (see the background of nested logit models). We will demonstrate the usage of our package by presenting three different categorization schemes and corresponding model estimations.","title":"Examples"},{"location":"nested_logit_model_house_cooling/#example-1","text":"In the first example, the model is specified to have the cooling alternatives {gcc, ecc, erc, hpc} in one nest and the non-cooling alternatives {gc, ec, er} in another nest. We create a nest_to_item dictionary to inform the model our categorization scheme. The dictionary should have keys ranging from 0 to number_of_nests - 1 , each integer corresponds to a nest. The value of each key is a list of item IDs in the nest, the encoding of item names should be exactly the same as in the construction of item_index . nest_to_item = { 0 : [ 'gcc' , 'ecc' , 'erc' , 'hpc' ], 1 : [ 'gc' , 'ec' , 'er' ]} # encode items to integers. for k , v in nest_to_item . items (): v = [ encoder [ item ] for item in v ] nest_to_item [ k ] = sorted ( v ) In this example, we have item [1, 3, 5, 6] in the first nest (i.e., the nest with ID 0 ) and the rest of items in the second nest (i.e., the nest with ID 1 ). print ( nest_to_item ) {0: [1, 3, 5, 6], 1: [0, 2, 4]} Next, let's create the NestedLogitModel class! The first thing to put in is the nest_to_item dictionary we just built. For nest_coef_variation_dict , nest_num_param_dict , since we don't have any nest-specific observables, we can simply put an empty dictionary there. Coefficients for all observables are constant across items, and there are 7 observables in total. As for shared_lambda=True , please refer to the background recap for nested logit model. model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '' , item_formula = '(price_obs|constant)' , dataset = dataset , shared_lambda = True ) model = model . to ( DEVICE ) You can print the model to get summary information of the NestedLogitModel class. print ( model ) NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) NOTE : We are computing the standard errors using \\(\\sqrt{\\text{diag}(H^{-1})}\\) , where \\(H\\) is the hessian of negative log-likelihood with respect to model parameters. This leads to slight different results compared with R implementation. Here we use the LBFGS optimizer since we are working on a small dataset and 8 coefficients to be estimated. For larger datasets and larger models, we recommend using the Adam optimizer instead. run ( model , dataset , num_epochs = 1000 , model_optimizer = \"LBFGS\" ) ==================== model received ==================== NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) ==================== data set received ==================== [Train dataset] JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------- 0 | model | NestedLogitModel | 8 ------------------------------------------- 8 Trainable params 0 Non-trainable params 8 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 136.14it/s, loss=178, v_num=29] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 121.79it/s, loss=178, v_num=29] Time taken for training: 13.282686233520508 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -178.124755859375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------|-------------:|------------:|----------:|------------:|:---------------| | lambda_weight_0 | 0.585898 | 0.166624 | 3.51628 | 0.000437634 | *** | | item_price_obs[constant]_0 | -0.554846 | 0.144515 | -3.83936 | 0.000123357 | *** | | item_price_obs[constant]_1 | -0.857842 | 0.237496 | -3.61203 | 0.000303804 | *** | | item_price_obs[constant]_2 | -0.225084 | 0.110576 | -2.03556 | 0.0417943 | * | | item_price_obs[constant]_3 | -1.08945 | 1.03675 | -1.05084 | 0.293332 | | | item_price_obs[constant]_4 | -0.37895 | 0.100705 | -3.76299 | 0.000167895 | *** | | item_price_obs[constant]_5 | 0.249572 | 0.0518543 | 4.81295 | 1.4872e-06 | *** | | item_price_obs[constant]_6 | -5.99973 | 4.82952 | -1.2423 | 0.214124 | | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) )","title":"Example 1"},{"location":"nested_logit_model_house_cooling/#r-output","text":"Here we provide the output from mlogit model in R for estimation reference. Coefficient names reported are slightly different in Python and R , please use the following table for comparison. Please note that the lambda_weight_0 in Python (at the top) corresponds to the iv (inclusive value) in R (at the bottom). Orderings of coefficients for observables should be the same in both languages. Coefficient (Python) Coefficient (R) lambda_weight_0 iv item_price_obs_0 ich item_price_obs_1 och item_price_obs_2 icca item_price_obs_3 occa item_price_obs_4 inc.room item_price_obs_5 inc.cooling item_price_obs_6 int.cooling ## ## Call: ## mlogit(formula = depvar ~ ich + och + icca + occa + inc.room + ## inc.cooling + int.cooling | 0, data = HC, nests = list(cooling = c(\"gcc\", ## \"ecc\", \"erc\", \"hpc\"), other = c(\"gc\", \"ec\", \"er\")), un.nest.el = TRUE) ## ## Frequencies of alternatives:choice ## ec ecc er erc gc gcc hpc ## 0.004 0.016 0.032 0.004 0.096 0.744 0.104 ## ## bfgs method ## 11 iterations, 0h:0m:0s ## g'(-H)^-1g = 7.26E-06 ## successive function values within tolerance limits ## ## Coefficients : ## Estimate Std. Error z-value Pr(>|z|) ## ich -0.554878 0.144205 -3.8478 0.0001192 *** ## och -0.857886 0.255313 -3.3601 0.0007791 *** ## icca -0.225079 0.144423 -1.5585 0.1191212 ## occa -1.089458 1.219821 -0.8931 0.3717882 ## inc.room -0.378971 0.099631 -3.8038 0.0001425 *** ## inc.cooling 0.249575 0.059213 4.2149 2.499e-05 *** ## int.cooling -6.000415 5.562423 -1.0787 0.2807030 ## iv 0.585922 0.179708 3.2604 0.0011125 ** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Log-Likelihood: -178.12","title":"R Output"},{"location":"nested_logit_model_house_cooling/#example-2","text":"The second example is similar to the first one, but we change the way we group items into different nests. Re-estimate the model with the room alternatives in one nest and the central alternatives in another nest. (Note that a heat pump is a central system.) nest_to_item = { 0 : [ 'ec' , 'ecc' , 'gc' , 'gcc' , 'hpc' ], 1 : [ 'er' , 'erc' ]} for k , v in nest_to_item . items (): v = [ encoder [ item ] for item in v ] nest_to_item [ k ] = sorted ( v ) # these two initializations are equivalent. model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) print ( model ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '' , item_formula = '(price_obs|constant)' , dataset = dataset , shared_lambda = True ) print ( model ) model = model . to ( DEVICE ) NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) run ( model , dataset , num_epochs = 1000 , model_optimizer = \"LBFGS\" , learning_rate = 0.3 ) ==================== model received ==================== NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) ==================== data set received ==================== [Train dataset] JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------- 0 | model | NestedLogitModel | 8 ------------------------------------------- 8 Trainable params 0 Non-trainable params 8 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 116.29it/s, loss=180, v_num=30] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 107.92it/s, loss=180, v_num=30] Time taken for training: 7.460475206375122 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -180.02308654785156, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------|-------------:|------------:|----------:|-----------:|:---------------| | lambda_weight_0 | 1.3621 | 0.55502 | 2.45415 | 0.0141217 | * | | item_price_obs[constant]_0 | -1.13826 | 0.444239 | -2.56226 | 0.0103993 | * | | item_price_obs[constant]_1 | -1.82546 | 0.738092 | -2.47321 | 0.0133906 | * | | item_price_obs[constant]_2 | -0.337469 | 0.20258 | -1.66585 | 0.0957429 | | | item_price_obs[constant]_3 | -2.06347 | 1.76159 | -1.17136 | 0.241453 | | | item_price_obs[constant]_4 | -0.757264 | 0.278476 | -2.71931 | 0.00654181 | ** | | item_price_obs[constant]_5 | 0.416903 | 0.170012 | 2.4522 | 0.0141987 | * | | item_price_obs[constant]_6 | -13.8256 | 8.09395 | -1.70814 | 0.0876098 | | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) )","title":"Example 2"},{"location":"nested_logit_model_house_cooling/#r-output_1","text":"You can use the table for converting coefficient names reported by Python and R : Coefficient (Python) Coefficient (R) lambda_weight_0 iv item_price_obs_0 ich item_price_obs_1 och item_price_obs_2 icca item_price_obs_3 occa item_price_obs_4 inc.room item_price_obs_5 inc.cooling item_price_obs_6 int.cooling ## ## Call: ## mlogit(formula = depvar ~ ich + och + icca + occa + inc.room + ## inc.cooling + int.cooling | 0, data = HC, nests = list(central = c(\"ec\", ## \"ecc\", \"gc\", \"gcc\", \"hpc\"), room = c(\"er\", \"erc\")), un.nest.el = TRUE) ## ## Frequencies of alternatives:choice ## ec ecc er erc gc gcc hpc ## 0.004 0.016 0.032 0.004 0.096 0.744 0.104 ## ## bfgs method ## 10 iterations, 0h:0m:0s ## g'(-H)^-1g = 5.87E-07 ## gradient close to zero ## ## Coefficients : ## Estimate Std. Error z-value Pr(>|z|) ## ich -1.13818 0.54216 -2.0993 0.03579 * ## och -1.82532 0.93228 -1.9579 0.05024 . ## icca -0.33746 0.26934 -1.2529 0.21024 ## occa -2.06328 1.89726 -1.0875 0.27681 ## inc.room -0.75722 0.34292 -2.2081 0.02723 * ## inc.cooling 0.41689 0.20742 2.0099 0.04444 * ## int.cooling -13.82487 7.94031 -1.7411 0.08167 . ## iv 1.36201 0.65393 2.0828 0.03727 * ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Log-Likelihood: -180.02","title":"R Output"},{"location":"nested_logit_model_house_cooling/#example-3","text":"For the third example, we now group items into three nests. Specifically, we have items gcc , ecc and erc in the first nest (nest 0 in the nest_to_item dictionary), hpc in a nest (nest 1 ) alone, and items gc , ec and er in the last nest (nest 2 ). nest_to_item = { 0 : [ 'gcc' , 'ecc' , 'erc' ], 1 : [ 'hpc' ], 2 : [ 'gc' , 'ec' , 'er' ]} for k , v in nest_to_item . items (): v = [ encoder [ item ] for item in v ] nest_to_item [ k ] = sorted ( v ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_coef_variation_dict = {}, nest_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, shared_lambda = True ) model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '' , item_formula = '(price_obs|constant)' , dataset = dataset , shared_lambda = True ) model = model . to ( DEVICE ) run ( model , dataset , num_epochs = 1000 , model_optimizer = \"LBFGS\" , learning_rate = 0.3 ) ==================== model received ==================== NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) ) ==================== data set received ==================== [Train dataset] JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cpu) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cpu) ) [Validation dataset] None [Test dataset] None GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------- 0 | model | NestedLogitModel | 8 ------------------------------------------- 8 Trainable params 0 Non-trainable params 8 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 142.92it/s, loss=180, v_num=31] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 126.62it/s, loss=180, v_num=31] Time taken for training: 7.50447416305542 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -180.26324462890625, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:---------------------------|-------------:|------------:|----------:|------------:|:---------------| | lambda_weight_0 | 0.956541 | 0.197062 | 4.854 | 1.20994e-06 | *** | | item_price_obs[constant]_0 | -0.838394 | 0.099096 | -8.46042 | 0 | *** | | item_price_obs[constant]_1 | -1.3316 | 0.184895 | -7.2019 | 5.93747e-13 | *** | | item_price_obs[constant]_2 | -0.25613 | 0.1263 | -2.02795 | 0.0425655 | * | | item_price_obs[constant]_3 | -1.40566 | 1.14467 | -1.22801 | 0.219443 | | | item_price_obs[constant]_4 | -0.571352 | 0.0750316 | -7.61482 | 2.64233e-14 | *** | | item_price_obs[constant]_5 | 0.311357 | 0.0550892 | 5.65187 | 1.58715e-08 | *** | | item_price_obs[constant]_6 | -10.4134 | 5.19301 | -2.00528 | 0.0449335 | * | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 NestedLogitModel( (nest_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs[constant]): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cpu). ) )","title":"Example 3"},{"location":"nested_logit_model_house_cooling/#r-output_2","text":"You can use the table for converting coefficient names reported by Python and R : Coefficient (Python) Coefficient (R) lambda_weight_0 iv item_price_obs_0 ich item_price_obs_1 och item_price_obs_2 icca item_price_obs_3 occa item_price_obs_4 inc.room item_price_obs_5 inc.cooling item_price_obs_6 int.cooling ## ## Call: ## mlogit(formula = depvar ~ ich + och + icca + occa + inc.room + ## inc.cooling + int.cooling | 0, data = HC, nests = list(n1 = c(\"gcc\", ## \"ecc\", \"erc\"), n2 = c(\"hpc\"), n3 = c(\"gc\", \"ec\", \"er\")), ## un.nest.el = TRUE) ## ## Frequencies of alternatives:choice ## ec ecc er erc gc gcc hpc ## 0.004 0.016 0.032 0.004 0.096 0.744 0.104 ## ## bfgs method ## 8 iterations, 0h:0m:0s ## g'(-H)^-1g = 3.71E-08 ## gradient close to zero ## ## Coefficients : ## Estimate Std. Error z-value Pr(>|z|) ## ich -0.838394 0.100546 -8.3384 < 2.2e-16 *** ## och -1.331598 0.252069 -5.2827 1.273e-07 *** ## icca -0.256131 0.145564 -1.7596 0.07848 . ## occa -1.405656 1.207281 -1.1643 0.24430 ## inc.room -0.571352 0.077950 -7.3297 2.307e-13 *** ## inc.cooling 0.311355 0.056357 5.5247 3.301e-08 *** ## int.cooling -10.413384 5.612445 -1.8554 0.06354 . ## iv 0.956544 0.180722 5.2929 1.204e-07 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Log-Likelihood: -180.26","title":"R Output"},{"location":"optimizer/","text":"Tutorial: Optimization Algorithms Author: Tianyu Du (tianyudu@stanford.edu) Update: May. 14, 2023 Let's first import essential Python packages. import pandas as pd import torch import torch.nn.functional as F from torch_choice.data import ChoiceDataset , utils from torch_choice.model import ConditionalLogitModel from torch_choice import run /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\") print ( torch . __version__ ) print ( f \" { torch . cuda . is_available () =:} \" ) 2.0.0 torch.cuda.is_available()=False if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) device = 'cuda' else : print ( 'Running tutorial on CPU.' ) device = 'cpu' Running tutorial on CPU. df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) df = df . query ( 'noalt == 4' ) . reset_index ( drop = True ) df . sort_values ( by = 'case' , inplace = True ) df . head () item_index = df [ df [ 'choice' ] == 1 ] . sort_values ( by = 'case' )[ 'alt' ] . reset_index ( drop = True ) item_names = [ 'air' , 'bus' , 'car' , 'train' ] num_items = 4 encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) price_cost_freq_ovt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = [ 'cost' , 'freq' , 'ovt' ]) price_ivt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = 'ivt' ) session_income = df . groupby ( 'case' )[ 'income' ] . first () session_income = torch . Tensor ( session_income . values ) . view ( - 1 , 1 ) dataset = ChoiceDataset ( item_index = item_index , price_cost_freq_ovt = price_cost_freq_ovt , session_income = session_income , price_ivt = price_ivt ) . to ( device ) No `session_index` is provided, assume each choice instance is in its own session. print ( dataset ) ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) import warnings warnings . filterwarnings ( \"ignore\" ) device = \"cpu\" model = ConditionalLogitModel ( formula = '(price_cost_freq_ovt|constant) + (session_income|item) + (price_ivt|item-full) + (intercept|item)' , dataset = dataset , num_items = 4 ) . to ( device ) run ( model , dataset , num_epochs = 500 , learning_rate = 0.01 , batch_size =- 1 , model_optimizer = \"LBFGS\" , device = device ) GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 13 ------------------------------------------------ 13 Trainable params 0 Non-trainable params 13 Total params 0.000 Total estimated model params size (MB) ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) [Validation dataset] None [Test dataset] None Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 40.10it/s, loss=1.87e+03, v_num=15] `Trainer.fit` stopped: `max_epochs=500` reached. Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 38.63it/s, loss=1.87e+03, v_num=15] Time taken for training: 12.536703109741211 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -1874.3427734375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:--------------------------------|-------------:|------------:|-----------:|------------:|:---------------| | price_cost_freq_ovt[constant]_0 | -0.0333376 | 0.00709551 | -4.69841 | 2.62196e-06 | *** | | price_cost_freq_ovt[constant]_1 | 0.0925288 | 0.00509756 | 18.1516 | 0 | *** | | price_cost_freq_ovt[constant]_2 | -0.0430023 | 0.0032247 | -13.3353 | 0 | *** | | session_income[item]_0 | -0.0891035 | 0.018348 | -4.85631 | 1.19595e-06 | *** | | session_income[item]_1 | -0.0279937 | 0.00387255 | -7.22876 | 4.87388e-13 | *** | | session_income[item]_2 | -0.038145 | 0.00408308 | -9.34222 | 0 | *** | | price_ivt[item-full]_0 | 0.059507 | 0.0100727 | 5.90777 | 3.46776e-09 | *** | | price_ivt[item-full]_1 | -0.00678584 | 0.00443389 | -1.53045 | 0.125905 | | | price_ivt[item-full]_2 | -0.00646072 | 0.00189849 | -3.40309 | 0.000666291 | *** | | price_ivt[item-full]_3 | -0.00145041 | 0.00118748 | -1.22142 | 0.221927 | | | intercept[item]_0 | 0.699403 | 1.28026 | 0.546298 | 0.584861 | | | intercept[item]_1 | 1.84431 | 0.708509 | 2.60309 | 0.00923886 | ** | | intercept[item]_2 | 3.2741 | 0.624415 | 5.24347 | 1.57586e-07 | *** | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu Parameter Estimation from R The following is the R-output from the mlogit implementation, the estimation, standard error, and log-likelihood from our torch_choice implementation is the same as the result from mlogit implementation. We see that the final log-likelihood of models estimated using two packages are all around -1874 . The run() method calculates the standard deviation using \\(\\sqrt{\\text{diag}(H^{-1})}\\) , where \\(H\\) is the hessian of negative log-likelihood with repsect to model parameters. Names of coefficients are slightly different, one can use the following conversion table to compare estimations and standard deviations reported by both packages. R Output install.packages ( \"mlogit\" ) library ( \"mlogit\" ) data ( \"ModeCanada\" , package = \"mlogit\" ) MC <- dfidx ( ModeCanada , subset = noalt == 4 ) ml.MC1 <- mlogit ( choice ~ cost + freq + ovt | income | ivt , MC , reflevel = 'air' ) summary ( ml.MC1 ) Call: mlogit(formula = choice ~ cost + freq + ovt | income | ivt, data = MC, reflevel = \"air\", method = \"nr\") Frequencies of alternatives:choice air train bus car 0.3738755 0.1666067 0.0035984 0.4559194 nr method 9 iterations, 0h:0m:0s g'(-H)^-1g = 0.00014 successive function values within tolerance limits Coefficients : Estimate Std. Error z-value Pr(>|z|) (Intercept):train 3.2741952 0.6244152 5.2436 1.575e-07 *** (Intercept):bus 0.6983381 1.2802466 0.5455 0.5854292 (Intercept):car 1.8441129 0.7085089 2.6028 0.0092464 ** cost -0.0333389 0.0070955 -4.6986 2.620e-06 *** freq 0.0925297 0.0050976 18.1517 < 2.2e-16 *** ovt -0.0430036 0.0032247 -13.3356 < 2.2e-16 *** income:train -0.0381466 0.0040831 -9.3426 < 2.2e-16 *** income:bus -0.0890867 0.0183471 -4.8556 1.200e-06 *** income:car -0.0279930 0.0038726 -7.2286 4.881e-13 *** ivt:air 0.0595097 0.0100727 5.9080 3.463e-09 *** ivt:train -0.0014504 0.0011875 -1.2214 0.2219430 ivt:bus -0.0067835 0.0044334 -1.5301 0.1259938 ivt:car -0.0064603 0.0018985 -3.4029 0.0006668 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Log-Likelihood: -1874.3 McFadden R^2: 0.35443 Likelihood ratio test : chisq = 2058.1 (p.value = < 2.22e-16)","title":"Tutorial: Optimization Algorithms"},{"location":"optimizer/#tutorial-optimization-algorithms","text":"Author: Tianyu Du (tianyudu@stanford.edu) Update: May. 14, 2023 Let's first import essential Python packages. import pandas as pd import torch import torch.nn.functional as F from torch_choice.data import ChoiceDataset , utils from torch_choice.model import ConditionalLogitModel from torch_choice import run /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: dlopen(/Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so, 0x0006): Symbol not found: __ZN2at4_ops19empty_memory_format4callEN3c108ArrayRefIxEENS2_8optionalINS2_10ScalarTypeEEENS5_INS2_6LayoutEEENS5_INS2_6DeviceEEENS5_IbEENS5_INS2_12MemoryFormatEEE Referenced from: <B3E58761-2785-34C6-A89B-F37110C88A05> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torchvision/image.so Expected in: <AE6DCE26-A528-35ED-BB3D-88890D27E6B9> /Users/tianyudu/miniforge3/envs/dev/lib/python3.9/site-packages/torch/lib/libtorch_cpu.dylib warn(f\"Failed to load image Python extension: {e}\") print ( torch . __version__ ) print ( f \" { torch . cuda . is_available () =:} \" ) 2.0.0 torch.cuda.is_available()=False if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) device = 'cuda' else : print ( 'Running tutorial on CPU.' ) device = 'cpu' Running tutorial on CPU. df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) df = df . query ( 'noalt == 4' ) . reset_index ( drop = True ) df . sort_values ( by = 'case' , inplace = True ) df . head () item_index = df [ df [ 'choice' ] == 1 ] . sort_values ( by = 'case' )[ 'alt' ] . reset_index ( drop = True ) item_names = [ 'air' , 'bus' , 'car' , 'train' ] num_items = 4 encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) price_cost_freq_ovt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = [ 'cost' , 'freq' , 'ovt' ]) price_ivt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = 'ivt' ) session_income = df . groupby ( 'case' )[ 'income' ] . first () session_income = torch . Tensor ( session_income . values ) . view ( - 1 , 1 ) dataset = ChoiceDataset ( item_index = item_index , price_cost_freq_ovt = price_cost_freq_ovt , session_income = session_income , price_ivt = price_ivt ) . to ( device ) No `session_index` is provided, assume each choice instance is in its own session. print ( dataset ) ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) import warnings warnings . filterwarnings ( \"ignore\" ) device = \"cpu\" model = ConditionalLogitModel ( formula = '(price_cost_freq_ovt|constant) + (session_income|item) + (price_ivt|item-full) + (intercept|item)' , dataset = dataset , num_items = 4 ) . to ( device ) run ( model , dataset , num_epochs = 500 , learning_rate = 0.01 , batch_size =- 1 , model_optimizer = \"LBFGS\" , device = device ) GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 13 ------------------------------------------------ 13 Trainable params 0 Non-trainable params 13 Total params 0.000 Total estimated model params size (MB) ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cpu) [Validation dataset] None [Test dataset] None Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 40.10it/s, loss=1.87e+03, v_num=15] `Trainer.fit` stopped: `max_epochs=500` reached. Epoch 499: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 38.63it/s, loss=1.87e+03, v_num=15] Time taken for training: 12.536703109741211 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -1874.3427734375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:--------------------------------|-------------:|------------:|-----------:|------------:|:---------------| | price_cost_freq_ovt[constant]_0 | -0.0333376 | 0.00709551 | -4.69841 | 2.62196e-06 | *** | | price_cost_freq_ovt[constant]_1 | 0.0925288 | 0.00509756 | 18.1516 | 0 | *** | | price_cost_freq_ovt[constant]_2 | -0.0430023 | 0.0032247 | -13.3353 | 0 | *** | | session_income[item]_0 | -0.0891035 | 0.018348 | -4.85631 | 1.19595e-06 | *** | | session_income[item]_1 | -0.0279937 | 0.00387255 | -7.22876 | 4.87388e-13 | *** | | session_income[item]_2 | -0.038145 | 0.00408308 | -9.34222 | 0 | *** | | price_ivt[item-full]_0 | 0.059507 | 0.0100727 | 5.90777 | 3.46776e-09 | *** | | price_ivt[item-full]_1 | -0.00678584 | 0.00443389 | -1.53045 | 0.125905 | | | price_ivt[item-full]_2 | -0.00646072 | 0.00189849 | -3.40309 | 0.000666291 | *** | | price_ivt[item-full]_3 | -0.00145041 | 0.00118748 | -1.22142 | 0.221927 | | | intercept[item]_0 | 0.699403 | 1.28026 | 0.546298 | 0.584861 | | | intercept[item]_1 | 1.84431 | 0.708509 | 2.60309 | 0.00923886 | ** | | intercept[item]_2 | 3.2741 | 0.624415 | 5.24347 | 1.57586e-07 | *** | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (price_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[price_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu","title":"Tutorial: Optimization Algorithms"},{"location":"optimizer/#parameter-estimation-from-r","text":"The following is the R-output from the mlogit implementation, the estimation, standard error, and log-likelihood from our torch_choice implementation is the same as the result from mlogit implementation. We see that the final log-likelihood of models estimated using two packages are all around -1874 . The run() method calculates the standard deviation using \\(\\sqrt{\\text{diag}(H^{-1})}\\) , where \\(H\\) is the hessian of negative log-likelihood with repsect to model parameters. Names of coefficients are slightly different, one can use the following conversion table to compare estimations and standard deviations reported by both packages.","title":"Parameter Estimation from R"},{"location":"optimizer/#r-output","text":"install.packages ( \"mlogit\" ) library ( \"mlogit\" ) data ( \"ModeCanada\" , package = \"mlogit\" ) MC <- dfidx ( ModeCanada , subset = noalt == 4 ) ml.MC1 <- mlogit ( choice ~ cost + freq + ovt | income | ivt , MC , reflevel = 'air' ) summary ( ml.MC1 ) Call: mlogit(formula = choice ~ cost + freq + ovt | income | ivt, data = MC, reflevel = \"air\", method = \"nr\") Frequencies of alternatives:choice air train bus car 0.3738755 0.1666067 0.0035984 0.4559194 nr method 9 iterations, 0h:0m:0s g'(-H)^-1g = 0.00014 successive function values within tolerance limits Coefficients : Estimate Std. Error z-value Pr(>|z|) (Intercept):train 3.2741952 0.6244152 5.2436 1.575e-07 *** (Intercept):bus 0.6983381 1.2802466 0.5455 0.5854292 (Intercept):car 1.8441129 0.7085089 2.6028 0.0092464 ** cost -0.0333389 0.0070955 -4.6986 2.620e-06 *** freq 0.0925297 0.0050976 18.1517 < 2.2e-16 *** ovt -0.0430036 0.0032247 -13.3356 < 2.2e-16 *** income:train -0.0381466 0.0040831 -9.3426 < 2.2e-16 *** income:bus -0.0890867 0.0183471 -4.8556 1.200e-06 *** income:car -0.0279930 0.0038726 -7.2286 4.881e-13 *** ivt:air 0.0595097 0.0100727 5.9080 3.463e-09 *** ivt:train -0.0014504 0.0011875 -1.2214 0.2219430 ivt:bus -0.0067835 0.0044334 -1.5301 0.1259938 ivt:car -0.0064603 0.0018985 -3.4029 0.0006668 *** --- Signif. codes: 0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1 Log-Likelihood: -1874.3 McFadden R^2: 0.35443 Likelihood ratio test : chisq = 2058.1 (p.value = < 2.22e-16)","title":"R Output"},{"location":"paper_demo/","text":"Replication Materials for the Torch-Choice Paper Author: Tianyu Du Email: tianyudu@stanford.edu This repository contains the replication materials for the paper \"Torch-Choice: A Library for Choice Models in PyTorch\". Due to the limited space in the main paper, we have omitted some codes and outputs in the paper. This repository contains the full version of codes mentioned in the paper. import warnings warnings . filterwarnings ( \"ignore\" ) from time import time import numpy as np import pandas as pd import torch import torch_choice from torch_choice import run from tqdm import tqdm from torch_choice.data import ChoiceDataset , JointDataset , utils , load_mode_canada_dataset , load_house_cooling_dataset_v1 from torch_choice.model import ConditionalLogitModel , NestedLogitModel torch_choice . __version__ '1.0.3' Data Structure car_choice = pd . read_csv ( \"https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/car_choice.csv\" ) car_choice . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } record_id session_id consumer_id car purchase gender income speed discount price 0 1 1 1 American 1 1 46.699997 10 0.94 90 1 1 1 1 Japanese 0 1 46.699997 8 0.94 110 2 1 1 1 European 0 1 46.699997 7 0.94 50 3 1 1 1 Korean 0 1 46.699997 8 0.94 10 4 2 2 2 American 1 1 26.100000 10 0.95 100 Adding Observables, Method 1: Observables Derived from Columns of the Main Dataset user_observable_columns = [ \"gender\" , \"income\" ] from torch_choice.utils.easy_data_wrapper import EasyDatasetWrapper data_wrapper_from_columns = EasyDatasetWrapper ( main_data = car_choice , purchase_record_column = 'record_id' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumer_id' , session_index_column = 'session_id' , user_observable_columns = [ 'gender' , 'income' ], item_observable_columns = [ 'speed' ], session_observable_columns = [ 'discount' ], itemsession_observable_columns = [ 'price' ]) data_wrapper_from_columns . summary () dataset = data_wrapper_from_columns . choice_dataset # ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], item_speed=[4, 1], user_gender=[885, 1], user_income=[885, 1], session_discount=[885, 1], itemsession_price=[885, 4, 1], device=cpu) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: record_id session_id consumer_id car purchase gender \\ 0 1 1 1 American 1 1 1 1 1 1 Japanese 0 1 2 1 1 1 European 0 1 3 1 1 1 Korean 0 1 4 2 2 2 American 1 1 ... ... ... ... ... ... ... 3155 884 884 884 Japanese 1 1 3156 884 884 884 European 0 1 3157 885 885 885 American 1 1 3158 885 885 885 Japanese 0 1 3159 885 885 885 European 0 1 income speed discount price 0 46.699997 10 0.94 90 1 46.699997 8 0.94 110 2 46.699997 7 0.94 50 3 46.699997 8 0.94 10 4 26.100000 10 0.95 100 ... ... ... ... ... 3155 20.900000 8 0.89 100 3156 20.900000 7 0.89 40 3157 30.600000 10 0.81 100 3158 30.600000 8 0.81 50 3159 30.600000 7 0.81 40 [3160 rows x 10 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], user_index=[885], session_index=[885], item_availability=[885, 4], item_speed=[4, 1], user_gender=[885, 1], user_income=[885, 1], session_discount=[885, 1], itemsession_price=[885, 4, 1], device=cpu) Adding Observables, Method 2: Added as Separated DataFrames # create dataframes for gender and income. The dataframe for user-specific observable needs to have the `consumer_id` column. gender = car_choice . groupby ( 'consumer_id' )[ 'gender' ] . first () . reset_index () income = car_choice . groupby ( 'consumer_id' )[ 'income' ] . first () . reset_index () # alternatively, put gender and income in the same dataframe. gender_and_income = car_choice . groupby ( 'consumer_id' )[[ 'gender' , 'income' ]] . first () . reset_index () # speed as item observable, the dataframe requires a `car` column. speed = car_choice . groupby ( 'car' )[ 'speed' ] . first () . reset_index () # discount as session observable. the dataframe requires a `session_id` column. discount = car_choice . groupby ( 'session_id' )[ 'discount' ] . first () . reset_index () # create the price as itemsession observable, the dataframe requires both `car` and `session_id` columns. price = car_choice [[ 'car' , 'session_id' , 'price' ]] # fill in NANs for (session, item) pairs that the item was not available in that session. price = price . pivot ( 'car' , 'session_id' , 'price' ) . melt ( ignore_index = False ) . reset_index () data_wrapper_from_dataframes = EasyDatasetWrapper ( main_data = car_choice , purchase_record_column = 'record_id' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumer_id' , session_index_column = 'session_id' , user_observable_data = { 'gender' : gender , 'income' : income }, # alternatively, supply gender and income as a single dataframe. # user_observable_data={'gender_and_income': gender_and_income}, item_observable_data = { 'speed' : speed }, session_observable_data = { 'discount' : discount }, itemsession_observable_data = { 'price' : price }) # the second method creates exactly the same ChoiceDataset as the previous method. assert data_wrapper_from_dataframes . choice_dataset == data_wrapper_from_columns . choice_dataset Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. data_wrapper_mixed = EasyDatasetWrapper ( main_data = car_choice , purchase_record_column = 'record_id' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumer_id' , session_index_column = 'session_id' , user_observable_data = { 'gender' : gender , 'income' : income }, item_observable_data = { 'speed' : speed }, session_observable_data = { 'discount' : discount }, itemsession_observable_columns = [ 'price' ]) # these methods create exactly the same choice dataset. assert data_wrapper_mixed . choice_dataset == data_wrapper_from_columns . choice_dataset == data_wrapper_from_dataframes . choice_dataset Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. Constructing a Choice Dataset, Method 2: Building from Tensors N = 10_000 num_users = 10 num_items = 4 num_sessions = 500 user_obs = torch . randn ( num_users , 128 ) item_obs = torch . randn ( num_items , 64 ) useritem_obs = torch . randn ( num_users , num_items , 32 ) session_obs = torch . randn ( num_sessions , 10 ) itemsession_obs = torch . randn ( num_sessions , num_items , 12 ) usersessionitem_obs = torch . randn ( num_users , num_sessions , num_items , 8 ) item_index = torch . LongTensor ( np . random . choice ( num_items , size = N )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = N )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = N )) item_availability = torch . ones ( num_sessions , num_items ) . bool () dataset = ChoiceDataset ( # required: item_index = item_index , # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , # observable tensors are supplied as keyword arguments with special prefixes. user_obs = user_obs , item_obs = item_obs , useritem_obs = useritem_obs , session_obs = session_obs , itemsession_obs = itemsession_obs , usersessionitem_obs = usersessionitem_obs ) print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) Functionalities of the Choice Dataset print ( f ' { dataset . num_users =:} ' ) # dataset.num_users=10 print ( f ' { dataset . num_items =:} ' ) # dataset.num_items=4 print ( f ' { dataset . num_sessions =:} ' ) # dataset.num_sessions=500 print ( f ' { len ( dataset ) =:} ' ) # len(dataset)=10000 dataset.num_users=10 dataset.num_items=4 dataset.num_sessions=500 len(dataset)=10000 # clone print ( dataset . item_index [: 10 ]) # tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) dataset_cloned = dataset . clone () # modify the cloned dataset. dataset_cloned . item_index = 99 * torch . ones ( num_sessions ) print ( dataset_cloned . item_index [: 10 ]) # the cloned dataset is changed. # tensor([99., 99., 99., 99., 99., 99., 99., 99., 99., 99.]) print ( dataset . item_index [: 10 ]) # the original dataset does not change. # tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) tensor([0, 1, 3, 1, 2, 0, 3, 2, 3, 1]) tensor([99., 99., 99., 99., 99., 99., 99., 99., 99., 99.]) tensor([0, 1, 3, 1, 2, 0, 3, 2, 3, 1]) # move to device print ( f ' { dataset . device =:} ' ) # dataset.device=cpu print ( f ' { dataset . device =:} ' ) # dataset.device=cpu print ( f ' { dataset . user_index . device =:} ' ) # dataset.user_index.device=cpu print ( f ' { dataset . session_index . device =:} ' ) # dataset.session_index.device=cpu if torch . cuda . is_available (): # please note that this can only be demonstrated dataset = dataset . to ( 'cuda' ) print ( f ' { dataset . device =:} ' ) # dataset.device=cuda:0 print ( f ' { dataset . item_index . device =:} ' ) # dataset.item_index.device=cuda:0 print ( f ' { dataset . user_index . device =:} ' ) # dataset.user_index.device=cuda:0 print ( f ' { dataset . session_index . device =:} ' ) # dataset.session_index.device=cuda:0 dataset . _check_device_consistency () dataset.device=cpu dataset.device=cpu dataset.user_index.device=cpu dataset.session_index.device=cpu def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' ) print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.useritem_obs.shape=torch.Size([10000, 4, 32]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.itemsession_obs.shape=torch.Size([10000, 4, 12]) dict.usersessionitem_obs.shape=torch.Size([10000, 4, 8]) # __getitem__ to get batch. # pick 5 random sessions as the mini-batch. dataset = dataset . to ( 'cpu' ) indices = torch . Tensor ( np . random . choice ( len ( dataset ), size = 5 , replace = False )) . long () print ( indices ) # tensor([1118, 976, 1956, 290, 8283]) subset = dataset [ indices ] print ( dataset ) # ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) print ( subset ) # ChoiceDataset(label=[], item_index=[5], user_index=[5], session_index=[5], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) tensor([6419, 3349, 6741, 3078, 6424]) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) ChoiceDataset(label=[], item_index=[5], user_index=[5], session_index=[5], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) print ( subset . item_index ) # tensor([0, 1, 0, 0, 0]) print ( dataset . item_index [ indices ]) # tensor([0, 1, 0, 0, 0]) subset . item_index += 1 # modifying the batch does not change the original dataset. print ( subset . item_index ) # tensor([1, 2, 1, 1, 1]) print ( dataset . item_index [ indices ]) # tensor([0, 1, 0, 0, 0]) tensor([2, 1, 1, 0, 0]) tensor([2, 1, 1, 0, 0]) tensor([3, 2, 2, 1, 1]) tensor([2, 1, 1, 0, 0]) print ( subset . item_obs [ 0 , 0 ]) # tensor(-1.5811) print ( dataset . item_obs [ 0 , 0 ]) # tensor(-1.5811) subset . item_obs += 1 print ( subset . item_obs [ 0 , 0 ]) # tensor(-0.5811) print ( dataset . item_obs [ 0 , 0 ]) # tensor(-1.5811) tensor(0.1007) tensor(0.1007) tensor(1.1007) tensor(0.1007) print ( id ( subset . item_index )) # 140339656298640 print ( id ( dataset . item_index [ indices ])) # 140339656150528 # these two are different objects in memory. 11458049504 11458562704 Chaining Multiple Datasets with JointDataset item_level_dataset = dataset . clone () nest_level_dataset = dataset . clone () joint_dataset = JointDataset ( item = item_level_dataset , nest = nest_level_dataset ) print ( joint_dataset ) JointDataset with 2 sub-datasets: ( item: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) nest: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) ) from torch.utils.data.sampler import BatchSampler , SequentialSampler , RandomSampler shuffle = False # for demonstration purpose. batch_size = 32 # Create sampler. sampler = BatchSampler ( RandomSampler ( dataset ) if shuffle else SequentialSampler ( dataset ), batch_size = batch_size , drop_last = False ) dataloader = torch . utils . data . DataLoader ( dataset , sampler = sampler , collate_fn = lambda x : x [ 0 ], pin_memory = ( dataset . device == 'cpu' )) print ( f ' { item_obs . shape =:} ' ) # item_obs.shape=torch.Size([4, 64]) item_obs_all = item_obs . view ( 1 , num_items , - 1 ) . expand ( len ( dataset ), - 1 , - 1 ) item_obs_all = item_obs_all . to ( dataset . device ) item_index_all = item_index . to ( dataset . device ) print ( f ' { item_obs_all . shape =:} ' ) # item_obs_all.shape=torch.Size([10000, 4, 64]) item_obs.shape=torch.Size([4, 64]) item_obs_all.shape=torch.Size([10000, 4, 64]) for i , batch in enumerate ( dataloader ): first , last = i * batch_size , min ( len ( dataset ), ( i + 1 ) * batch_size ) idx = torch . arange ( first , last ) assert torch . all ( item_obs_all [ idx , :, :] == batch . x_dict [ 'item_obs' ]) assert torch . all ( item_index_all [ idx ] == batch . item_index ) batch . x_dict [ 'item_obs' ] . shape # torch.Size([16, 4, 64]) torch.Size([16, 4, 64]) print_dict_shape ( dataset . x_dict ) # dict.user_obs.shape=torch.Size([10000, 4, 128]) # dict.item_obs.shape=torch.Size([10000, 4, 64]) # dict.session_obs.shape=torch.Size([10000, 4, 10]) # dict.price_obs.shape=torch.Size([10000, 4, 12]) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.useritem_obs.shape=torch.Size([10000, 4, 32]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.itemsession_obs.shape=torch.Size([10000, 4, 12]) dict.usersessionitem_obs.shape=torch.Size([10000, 4, 8]) dataset . __len__ () # 10000 10000 Conditional Logit Model dataset = load_mode_canada_dataset () No `session_index` is provided, assume each choice instance is in its own session. dataset ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], itemsession_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], itemsession_ivt=[2779, 4, 1], device=cpu) model = ConditionalLogitModel ( formula = '(itemsession_cost_freq_ovt|constant) + (session_income|item) + (itemsession_ivt|item-full) + (intercept|item)' , dataset = dataset , num_items = 4 ) model = ConditionalLogitModel ( coef_variation_dict = { 'itemsession_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'itemsession_ivt' : 'item-full' , 'intercept' : 'item' }, num_param_dict = { 'itemsession_cost_freq_ovt' : 3 , 'session_income' : 1 , 'itemsession_ivt' : 1 , 'intercept' : 1 }, num_items = 4 ) model = ConditionalLogitModel ( coef_variation_dict = { 'itemsession_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'itemsession_ivt' : 'item-full' , 'intercept' : 'item' }, num_param_dict = { 'itemsession_cost_freq_ovt' : 3 , 'session_income' : 1 , 'itemsession_ivt' : 1 , 'intercept' : 1 }, num_items = 4 , regularization = \"L1\" , regularization_weight = 0.5 ) from torch_choice import run run ( model , dataset , batch_size =- 1 , learning_rate = 0.01 , num_epochs = 1000 , model_optimizer = \"LBFGS\" ) GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[itemsession_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], itemsession_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], itemsession_ivt=[2779, 4, 1], device=cpu) [Validation dataset] None [Test dataset] None | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 13 ------------------------------------------------ 13 Trainable params 0 Non-trainable params 13 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 107.14it/s, loss=1.88e+03, v_num=45] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 98.73it/s, loss=1.88e+03, v_num=45] Time taken for training: 18.987757921218872 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -1874.63818359375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:--------------------------------------|-------------:|------------:|-------------:|------------:|:---------------| | itemsession_cost_freq_ovt[constant]_0 | -0.0372949 | 0.00709483 | -5.25663 | 1.46723e-07 | *** | | itemsession_cost_freq_ovt[constant]_1 | 0.0934485 | 0.00509605 | 18.3374 | 0 | *** | | itemsession_cost_freq_ovt[constant]_2 | -0.0427757 | 0.00322198 | -13.2762 | 0 | *** | | session_income[item]_0 | -0.0862389 | 0.0183019 | -4.71202 | 2.4527e-06 | *** | | session_income[item]_1 | -0.0269126 | 0.00384874 | -6.99258 | 2.69873e-12 | *** | | session_income[item]_2 | -0.0370584 | 0.00406312 | -9.12069 | 0 | *** | | itemsession_ivt[item-full]_0 | 0.0593796 | 0.0100867 | 5.88689 | 3.93536e-09 | *** | | itemsession_ivt[item-full]_1 | -0.00634707 | 0.0042809 | -1.48265 | 0.138168 | | | itemsession_ivt[item-full]_2 | -0.00583223 | 0.00189433 | -3.07879 | 0.00207844 | ** | | itemsession_ivt[item-full]_3 | -0.00137813 | 0.00118697 | -1.16105 | 0.245622 | | | intercept[item]_0 | -9.98532e-09 | 1.26823 | -7.8734e-09 | 1 | | | intercept[item]_1 | 1.32592 | 0.703708 | 1.88419 | 0.0595399 | | | intercept[item]_2 | 2.8192 | 0.618182 | 4.56047 | 5.10383e-06 | *** | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[itemsession_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ! tensorboard -- logdir ./ lightning_logs -- port 6006 TensorFlow installation not found - running with reduced feature set. Serving TensorBoard on localhost; to expose to the network, use a proxy or pass --bind_all TensorBoard 2.12.1 at http://localhost:6006/ (Press CTRL+C to quit) ^C Nested Logit Model The code demo for nested logit models in the paper was abstract, please refer to the nested-logit model tutorial for executable code.","title":"Replication Materials for the Torch-Choice Paper"},{"location":"paper_demo/#replication-materials-for-the-torch-choice-paper","text":"Author: Tianyu Du Email: tianyudu@stanford.edu This repository contains the replication materials for the paper \"Torch-Choice: A Library for Choice Models in PyTorch\". Due to the limited space in the main paper, we have omitted some codes and outputs in the paper. This repository contains the full version of codes mentioned in the paper. import warnings warnings . filterwarnings ( \"ignore\" ) from time import time import numpy as np import pandas as pd import torch import torch_choice from torch_choice import run from tqdm import tqdm from torch_choice.data import ChoiceDataset , JointDataset , utils , load_mode_canada_dataset , load_house_cooling_dataset_v1 from torch_choice.model import ConditionalLogitModel , NestedLogitModel torch_choice . __version__ '1.0.3'","title":"Replication Materials for the Torch-Choice Paper"},{"location":"paper_demo/#data-structure","text":"car_choice = pd . read_csv ( \"https://raw.githubusercontent.com/gsbDBI/torch-choice/main/tutorials/public_datasets/car_choice.csv\" ) car_choice . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } record_id session_id consumer_id car purchase gender income speed discount price 0 1 1 1 American 1 1 46.699997 10 0.94 90 1 1 1 1 Japanese 0 1 46.699997 8 0.94 110 2 1 1 1 European 0 1 46.699997 7 0.94 50 3 1 1 1 Korean 0 1 46.699997 8 0.94 10 4 2 2 2 American 1 1 26.100000 10 0.95 100","title":"Data Structure"},{"location":"paper_demo/#adding-observables-method-1-observables-derived-from-columns-of-the-main-dataset","text":"user_observable_columns = [ \"gender\" , \"income\" ] from torch_choice.utils.easy_data_wrapper import EasyDatasetWrapper data_wrapper_from_columns = EasyDatasetWrapper ( main_data = car_choice , purchase_record_column = 'record_id' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumer_id' , session_index_column = 'session_id' , user_observable_columns = [ 'gender' , 'income' ], item_observable_columns = [ 'speed' ], session_observable_columns = [ 'discount' ], itemsession_observable_columns = [ 'price' ]) data_wrapper_from_columns . summary () dataset = data_wrapper_from_columns . choice_dataset # ChoiceDataset(label=[], item_index=[885], provided_num_items=[], user_index=[885], session_index=[885], item_availability=[885, 4], item_speed=[4, 1], user_gender=[885, 1], user_income=[885, 1], session_discount=[885, 1], itemsession_price=[885, 4, 1], device=cpu) Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. * purchase record index range: [1 2 3] ... [883 884 885] * Space of 4 items: 0 1 2 3 item name American European Japanese Korean * Number of purchase records/cases: 885. * Preview of main data frame: record_id session_id consumer_id car purchase gender \\ 0 1 1 1 American 1 1 1 1 1 1 Japanese 0 1 2 1 1 1 European 0 1 3 1 1 1 Korean 0 1 4 2 2 2 American 1 1 ... ... ... ... ... ... ... 3155 884 884 884 Japanese 1 1 3156 884 884 884 European 0 1 3157 885 885 885 American 1 1 3158 885 885 885 Japanese 0 1 3159 885 885 885 European 0 1 income speed discount price 0 46.699997 10 0.94 90 1 46.699997 8 0.94 110 2 46.699997 7 0.94 50 3 46.699997 8 0.94 10 4 26.100000 10 0.95 100 ... ... ... ... ... 3155 20.900000 8 0.89 100 3156 20.900000 7 0.89 40 3157 30.600000 10 0.81 100 3158 30.600000 8 0.81 50 3159 30.600000 7 0.81 40 [3160 rows x 10 columns] * Preview of ChoiceDataset: ChoiceDataset(label=[], item_index=[885], user_index=[885], session_index=[885], item_availability=[885, 4], item_speed=[4, 1], user_gender=[885, 1], user_income=[885, 1], session_discount=[885, 1], itemsession_price=[885, 4, 1], device=cpu)","title":"Adding Observables, Method 1: Observables Derived from Columns of the Main Dataset"},{"location":"paper_demo/#adding-observables-method-2-added-as-separated-dataframes","text":"# create dataframes for gender and income. The dataframe for user-specific observable needs to have the `consumer_id` column. gender = car_choice . groupby ( 'consumer_id' )[ 'gender' ] . first () . reset_index () income = car_choice . groupby ( 'consumer_id' )[ 'income' ] . first () . reset_index () # alternatively, put gender and income in the same dataframe. gender_and_income = car_choice . groupby ( 'consumer_id' )[[ 'gender' , 'income' ]] . first () . reset_index () # speed as item observable, the dataframe requires a `car` column. speed = car_choice . groupby ( 'car' )[ 'speed' ] . first () . reset_index () # discount as session observable. the dataframe requires a `session_id` column. discount = car_choice . groupby ( 'session_id' )[ 'discount' ] . first () . reset_index () # create the price as itemsession observable, the dataframe requires both `car` and `session_id` columns. price = car_choice [[ 'car' , 'session_id' , 'price' ]] # fill in NANs for (session, item) pairs that the item was not available in that session. price = price . pivot ( 'car' , 'session_id' , 'price' ) . melt ( ignore_index = False ) . reset_index () data_wrapper_from_dataframes = EasyDatasetWrapper ( main_data = car_choice , purchase_record_column = 'record_id' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumer_id' , session_index_column = 'session_id' , user_observable_data = { 'gender' : gender , 'income' : income }, # alternatively, supply gender and income as a single dataframe. # user_observable_data={'gender_and_income': gender_and_income}, item_observable_data = { 'speed' : speed }, session_observable_data = { 'discount' : discount }, itemsession_observable_data = { 'price' : price }) # the second method creates exactly the same ChoiceDataset as the previous method. assert data_wrapper_from_dataframes . choice_dataset == data_wrapper_from_columns . choice_dataset Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset. data_wrapper_mixed = EasyDatasetWrapper ( main_data = car_choice , purchase_record_column = 'record_id' , choice_column = 'purchase' , item_name_column = 'car' , user_index_column = 'consumer_id' , session_index_column = 'session_id' , user_observable_data = { 'gender' : gender , 'income' : income }, item_observable_data = { 'speed' : speed }, session_observable_data = { 'discount' : discount }, itemsession_observable_columns = [ 'price' ]) # these methods create exactly the same choice dataset. assert data_wrapper_mixed . choice_dataset == data_wrapper_from_columns . choice_dataset == data_wrapper_from_dataframes . choice_dataset Creating choice dataset from stata format data-frames... Note: choice sets of different sizes found in different purchase records: {'size 4': 'occurrence 505', 'size 3': 'occurrence 380'} Finished Creating Choice Dataset.","title":"Adding Observables, Method 2: Added as Separated DataFrames"},{"location":"paper_demo/#constructing-a-choice-dataset-method-2-building-from-tensors","text":"N = 10_000 num_users = 10 num_items = 4 num_sessions = 500 user_obs = torch . randn ( num_users , 128 ) item_obs = torch . randn ( num_items , 64 ) useritem_obs = torch . randn ( num_users , num_items , 32 ) session_obs = torch . randn ( num_sessions , 10 ) itemsession_obs = torch . randn ( num_sessions , num_items , 12 ) usersessionitem_obs = torch . randn ( num_users , num_sessions , num_items , 8 ) item_index = torch . LongTensor ( np . random . choice ( num_items , size = N )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = N )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = N )) item_availability = torch . ones ( num_sessions , num_items ) . bool () dataset = ChoiceDataset ( # required: item_index = item_index , # optional: user_index = user_index , session_index = session_index , item_availability = item_availability , # observable tensors are supplied as keyword arguments with special prefixes. user_obs = user_obs , item_obs = item_obs , useritem_obs = useritem_obs , session_obs = session_obs , itemsession_obs = itemsession_obs , usersessionitem_obs = usersessionitem_obs ) print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu)","title":"Constructing a Choice Dataset, Method 2: Building from Tensors"},{"location":"paper_demo/#functionalities-of-the-choice-dataset","text":"print ( f ' { dataset . num_users =:} ' ) # dataset.num_users=10 print ( f ' { dataset . num_items =:} ' ) # dataset.num_items=4 print ( f ' { dataset . num_sessions =:} ' ) # dataset.num_sessions=500 print ( f ' { len ( dataset ) =:} ' ) # len(dataset)=10000 dataset.num_users=10 dataset.num_items=4 dataset.num_sessions=500 len(dataset)=10000 # clone print ( dataset . item_index [: 10 ]) # tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) dataset_cloned = dataset . clone () # modify the cloned dataset. dataset_cloned . item_index = 99 * torch . ones ( num_sessions ) print ( dataset_cloned . item_index [: 10 ]) # the cloned dataset is changed. # tensor([99., 99., 99., 99., 99., 99., 99., 99., 99., 99.]) print ( dataset . item_index [: 10 ]) # the original dataset does not change. # tensor([2, 2, 3, 1, 3, 2, 2, 1, 0, 1]) tensor([0, 1, 3, 1, 2, 0, 3, 2, 3, 1]) tensor([99., 99., 99., 99., 99., 99., 99., 99., 99., 99.]) tensor([0, 1, 3, 1, 2, 0, 3, 2, 3, 1]) # move to device print ( f ' { dataset . device =:} ' ) # dataset.device=cpu print ( f ' { dataset . device =:} ' ) # dataset.device=cpu print ( f ' { dataset . user_index . device =:} ' ) # dataset.user_index.device=cpu print ( f ' { dataset . session_index . device =:} ' ) # dataset.session_index.device=cpu if torch . cuda . is_available (): # please note that this can only be demonstrated dataset = dataset . to ( 'cuda' ) print ( f ' { dataset . device =:} ' ) # dataset.device=cuda:0 print ( f ' { dataset . item_index . device =:} ' ) # dataset.item_index.device=cuda:0 print ( f ' { dataset . user_index . device =:} ' ) # dataset.user_index.device=cuda:0 print ( f ' { dataset . session_index . device =:} ' ) # dataset.session_index.device=cuda:0 dataset . _check_device_consistency () dataset.device=cpu dataset.device=cpu dataset.user_index.device=cpu dataset.session_index.device=cpu def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' ) print_dict_shape ( dataset . x_dict ) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.useritem_obs.shape=torch.Size([10000, 4, 32]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.itemsession_obs.shape=torch.Size([10000, 4, 12]) dict.usersessionitem_obs.shape=torch.Size([10000, 4, 8]) # __getitem__ to get batch. # pick 5 random sessions as the mini-batch. dataset = dataset . to ( 'cpu' ) indices = torch . Tensor ( np . random . choice ( len ( dataset ), size = 5 , replace = False )) . long () print ( indices ) # tensor([1118, 976, 1956, 290, 8283]) subset = dataset [ indices ] print ( dataset ) # ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) print ( subset ) # ChoiceDataset(label=[], item_index=[5], user_index=[5], session_index=[5], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], session_obs=[500, 10], price_obs=[500, 4, 12], device=cpu) tensor([6419, 3349, 6741, 3078, 6424]) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) ChoiceDataset(label=[], item_index=[5], user_index=[5], session_index=[5], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) print ( subset . item_index ) # tensor([0, 1, 0, 0, 0]) print ( dataset . item_index [ indices ]) # tensor([0, 1, 0, 0, 0]) subset . item_index += 1 # modifying the batch does not change the original dataset. print ( subset . item_index ) # tensor([1, 2, 1, 1, 1]) print ( dataset . item_index [ indices ]) # tensor([0, 1, 0, 0, 0]) tensor([2, 1, 1, 0, 0]) tensor([2, 1, 1, 0, 0]) tensor([3, 2, 2, 1, 1]) tensor([2, 1, 1, 0, 0]) print ( subset . item_obs [ 0 , 0 ]) # tensor(-1.5811) print ( dataset . item_obs [ 0 , 0 ]) # tensor(-1.5811) subset . item_obs += 1 print ( subset . item_obs [ 0 , 0 ]) # tensor(-0.5811) print ( dataset . item_obs [ 0 , 0 ]) # tensor(-1.5811) tensor(0.1007) tensor(0.1007) tensor(1.1007) tensor(0.1007) print ( id ( subset . item_index )) # 140339656298640 print ( id ( dataset . item_index [ indices ])) # 140339656150528 # these two are different objects in memory. 11458049504 11458562704","title":"Functionalities of the Choice Dataset"},{"location":"paper_demo/#chaining-multiple-datasets-with-jointdataset","text":"item_level_dataset = dataset . clone () nest_level_dataset = dataset . clone () joint_dataset = JointDataset ( item = item_level_dataset , nest = nest_level_dataset ) print ( joint_dataset ) JointDataset with 2 sub-datasets: ( item: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) nest: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 4], user_obs=[10, 128], item_obs=[4, 64], useritem_obs=[10, 4, 32], session_obs=[500, 10], itemsession_obs=[500, 4, 12], usersessionitem_obs=[10, 500, 4, 8], device=cpu) ) from torch.utils.data.sampler import BatchSampler , SequentialSampler , RandomSampler shuffle = False # for demonstration purpose. batch_size = 32 # Create sampler. sampler = BatchSampler ( RandomSampler ( dataset ) if shuffle else SequentialSampler ( dataset ), batch_size = batch_size , drop_last = False ) dataloader = torch . utils . data . DataLoader ( dataset , sampler = sampler , collate_fn = lambda x : x [ 0 ], pin_memory = ( dataset . device == 'cpu' )) print ( f ' { item_obs . shape =:} ' ) # item_obs.shape=torch.Size([4, 64]) item_obs_all = item_obs . view ( 1 , num_items , - 1 ) . expand ( len ( dataset ), - 1 , - 1 ) item_obs_all = item_obs_all . to ( dataset . device ) item_index_all = item_index . to ( dataset . device ) print ( f ' { item_obs_all . shape =:} ' ) # item_obs_all.shape=torch.Size([10000, 4, 64]) item_obs.shape=torch.Size([4, 64]) item_obs_all.shape=torch.Size([10000, 4, 64]) for i , batch in enumerate ( dataloader ): first , last = i * batch_size , min ( len ( dataset ), ( i + 1 ) * batch_size ) idx = torch . arange ( first , last ) assert torch . all ( item_obs_all [ idx , :, :] == batch . x_dict [ 'item_obs' ]) assert torch . all ( item_index_all [ idx ] == batch . item_index ) batch . x_dict [ 'item_obs' ] . shape # torch.Size([16, 4, 64]) torch.Size([16, 4, 64]) print_dict_shape ( dataset . x_dict ) # dict.user_obs.shape=torch.Size([10000, 4, 128]) # dict.item_obs.shape=torch.Size([10000, 4, 64]) # dict.session_obs.shape=torch.Size([10000, 4, 10]) # dict.price_obs.shape=torch.Size([10000, 4, 12]) dict.user_obs.shape=torch.Size([10000, 4, 128]) dict.item_obs.shape=torch.Size([10000, 4, 64]) dict.useritem_obs.shape=torch.Size([10000, 4, 32]) dict.session_obs.shape=torch.Size([10000, 4, 10]) dict.itemsession_obs.shape=torch.Size([10000, 4, 12]) dict.usersessionitem_obs.shape=torch.Size([10000, 4, 8]) dataset . __len__ () # 10000 10000","title":"Chaining Multiple Datasets with JointDataset"},{"location":"paper_demo/#conditional-logit-model","text":"dataset = load_mode_canada_dataset () No `session_index` is provided, assume each choice instance is in its own session. dataset ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], itemsession_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], itemsession_ivt=[2779, 4, 1], device=cpu) model = ConditionalLogitModel ( formula = '(itemsession_cost_freq_ovt|constant) + (session_income|item) + (itemsession_ivt|item-full) + (intercept|item)' , dataset = dataset , num_items = 4 ) model = ConditionalLogitModel ( coef_variation_dict = { 'itemsession_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'itemsession_ivt' : 'item-full' , 'intercept' : 'item' }, num_param_dict = { 'itemsession_cost_freq_ovt' : 3 , 'session_income' : 1 , 'itemsession_ivt' : 1 , 'intercept' : 1 }, num_items = 4 ) model = ConditionalLogitModel ( coef_variation_dict = { 'itemsession_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'itemsession_ivt' : 'item-full' , 'intercept' : 'item' }, num_param_dict = { 'itemsession_cost_freq_ovt' : 3 , 'session_income' : 1 , 'itemsession_ivt' : 1 , 'intercept' : 1 }, num_items = 4 , regularization = \"L1\" , regularization_weight = 0.5 ) from torch_choice import run run ( model , dataset , batch_size =- 1 , learning_rate = 0.01 , num_epochs = 1000 , model_optimizer = \"LBFGS\" ) GPU available: True (mps), used: False TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs ==================== model received ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[itemsession_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ==================== data set received ==================== [Train dataset] ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], itemsession_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], itemsession_ivt=[2779, 4, 1], device=cpu) [Validation dataset] None [Test dataset] None | Name | Type | Params ------------------------------------------------ 0 | model | ConditionalLogitModel | 13 ------------------------------------------------ 13 Trainable params 0 Non-trainable params 13 Total params 0.000 Total estimated model params size (MB) Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 107.14it/s, loss=1.88e+03, v_num=45] `Trainer.fit` stopped: `max_epochs=1000` reached. Epoch 999: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 98.73it/s, loss=1.88e+03, v_num=45] Time taken for training: 18.987757921218872 Skip testing, no test dataset is provided. ==================== model results ==================== Log-likelihood: [Training] -1874.63818359375, [Validation] N/A, [Test] N/A | Coefficient | Estimation | Std. Err. | z-value | Pr(>|z|) | Significance | |:--------------------------------------|-------------:|------------:|-------------:|------------:|:---------------| | itemsession_cost_freq_ovt[constant]_0 | -0.0372949 | 0.00709483 | -5.25663 | 1.46723e-07 | *** | | itemsession_cost_freq_ovt[constant]_1 | 0.0934485 | 0.00509605 | 18.3374 | 0 | *** | | itemsession_cost_freq_ovt[constant]_2 | -0.0427757 | 0.00322198 | -13.2762 | 0 | *** | | session_income[item]_0 | -0.0862389 | 0.0183019 | -4.71202 | 2.4527e-06 | *** | | session_income[item]_1 | -0.0269126 | 0.00384874 | -6.99258 | 2.69873e-12 | *** | | session_income[item]_2 | -0.0370584 | 0.00406312 | -9.12069 | 0 | *** | | itemsession_ivt[item-full]_0 | 0.0593796 | 0.0100867 | 5.88689 | 3.93536e-09 | *** | | itemsession_ivt[item-full]_1 | -0.00634707 | 0.0042809 | -1.48265 | 0.138168 | | | itemsession_ivt[item-full]_2 | -0.00583223 | 0.00189433 | -3.07879 | 0.00207844 | ** | | itemsession_ivt[item-full]_3 | -0.00137813 | 0.00118697 | -1.16105 | 0.245622 | | | intercept[item]_0 | -9.98532e-09 | 1.26823 | -7.8734e-09 | 1 | | | intercept[item]_1 | 1.32592 | 0.703708 | 1.88419 | 0.0595399 | | | intercept[item]_2 | 2.8192 | 0.618182 | 4.56047 | 5.10383e-06 | *** | Significance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ConditionalLogitModel( (coef_dict): ModuleDict( (itemsession_cost_freq_ovt[constant]): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cpu). (session_income[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). (itemsession_ivt[item-full]): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[itemsession_cost_freq_ovt[constant]] with 3 parameters, with constant level variation. X[session_income[item]] with 1 parameters, with item level variation. X[itemsession_ivt[item-full]] with 1 parameters, with item-full level variation. X[intercept[item]] with 1 parameters, with item level variation. device=cpu ! tensorboard -- logdir ./ lightning_logs -- port 6006 TensorFlow installation not found - running with reduced feature set. Serving TensorBoard on localhost; to expose to the network, use a proxy or pass --bind_all TensorBoard 2.12.1 at http://localhost:6006/ (Press CTRL+C to quit) ^C","title":"Conditional Logit Model"},{"location":"paper_demo/#nested-logit-model","text":"The code demo for nested logit models in the paper was abstract, please refer to the nested-logit model tutorial for executable code.","title":"Nested Logit Model"},{"location":"post_estimation_demos/","text":"Tutorial: Post-Estimations Author: Tianyu Du (tianyudu@stanford.edu) This tutorial covers the toolkit in torch-choice for visualizing and analyzing models after model estimation. Note : models demonstrated in this tutorial are for demonstration purpose only, hence we don't estimate them in this tutorial. Instead, this tutorial focuses on APIs to visualize and analyze models. # import required dependencies. from time import time import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import torch import torch.nn.functional as F from torch_choice.data import ChoiceDataset , JointDataset , utils from torch_choice.model import ConditionalLogitModel , NestedLogitModel from torch_choice.utils.run_helper import run # let's get a helper def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' ) Creating ChoiceDataset Object We first create a dummy ChoiceDataset object, please refer to the data management tutorial for more details. # Feel free to modify it as you want. num_users = 100 num_items = 25 num_sessions = 500 length_of_dataset = 10000 # create observables/features, the number of parameters are arbitrarily chosen. # generate 128 features for each user, e.g., race, gender. user_obs = torch . randn ( num_users , 128 ) # generate 64 features for each user, e.g., quality. item_obs = torch . randn ( num_items , 64 ) # generate 10 features for each session, e.g., weekday indicator. session_obs = torch . randn ( num_sessions , 10 ) # generate 12 features for each session user pair, e.g., the budget of that user at the shopping day. itemsession_obs = torch . randn ( num_sessions , num_items , 12 ) item_index = torch . LongTensor ( np . random . choice ( num_items , size = length_of_dataset )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = length_of_dataset )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = length_of_dataset )) # assume all items are available in all sessions. item_availability = torch . ones ( num_sessions , num_items ) . bool () # initialize a ChoiceDataset object. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: num_users = num_users , num_items = num_items , user_index = user_index , session_index = session_index , item_availability = item_availability , # additional keywords of __init__ user_obs = user_obs , item_obs = item_obs , session_obs = session_obs , itemsession_obs = itemsession_obs ) print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 25], user_obs=[100, 128], item_obs=[25, 64], session_obs=[500, 10], itemsession_obs=[500, 25, 12], device=cpu) Conditional Logit Model Suppose that we are creating a very complicated dummy model as the following. Please note that model and dataset here are for demonstration purpose only, the model is unlikely to converge if one estimate it on this dataset. \\[ U_{uis} = \\alpha + \\beta_i + \\gamma_u + \\delta_i^\\top \\textbf{x}^{(user)}_u + \\eta^\\top \\textbf{y}^{(item)}_i + \\theta_u^\\top \\textbf{z}^{(session)}_{s} + \\kappa_i^\\top \\textbf{w}^{(itemsession)}_{is} + \\iota_u^\\top \\textbf{w}^{(itemsession)}_{is} + \\epsilon_{uis} \\] model = ConditionalLogitModel ( formula = '(1|constant) + (1|item) + (1|user) + (user_obs|item) + (item_obs|constant) + (session_obs|user) + (itemsession_obs|item) + (itemsession_obs|user)' , dataset = dataset , num_users = num_users , num_items = num_items ) # estimate the model... omitted in this tutorial. model ConditionalLogitModel( (coef_dict): ModuleDict( (intercept[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=1, 1 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=1, 24 trainable parameters in total, device=cpu). (intercept[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=1, 100 trainable parameters in total, device=cpu). (user_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=128, 3072 trainable parameters in total, device=cpu). (item_obs[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=64, 64 trainable parameters in total, device=cpu). (session_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=10, 1000 trainable parameters in total, device=cpu). (itemsession_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=12, 288 trainable parameters in total, device=cpu). (itemsession_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=12, 1200 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[intercept[constant]] with 1 parameters, with constant level variation. X[intercept[item]] with 1 parameters, with item level variation. X[intercept[user]] with 1 parameters, with user level variation. X[user_obs[item]] with 128 parameters, with item level variation. X[item_obs[constant]] with 64 parameters, with constant level variation. X[session_obs[user]] with 10 parameters, with user level variation. X[itemsession_obs[item]] with 12 parameters, with item level variation. X[itemsession_obs[user]] with 12 parameters, with user level variation. device=cpu Retrieving Model Parameters with the get_coefficient() method. In the model representation above, we can see that the model has coefficients from intercept[constant] to itemsession_obs . The get_coefficient() method allows users to retrieve the coefficient values from the model using the general syntax model.get_coefficient(COEFFICIENT_NAME) . For example, model.get_coefficient('intercept[constant]') will return the value of \\(\\alpha\\) , which is a scalar. model . get_coefficient ( 'intercept[constant]' ) tensor([0.3743]) model.get_coefficient('intercept[user]') returns the array of \\(\\gamma_u\\) 's, which is a 1D array of length num_users . model . get_coefficient ( 'intercept[user]' ) . shape torch.Size([100, 1]) model.get_coefficient('session_obs[user]') returns the corresponding coefficient \\(\\theta_u\\) , which is a 2D array of shape (num_users, num_session_features) . Each row of the returned tensor corresponds to the coefficient vector of a user. model . get_coefficient ( 'session_obs[user]' ) . shape torch.Size([100, 10]) Lastly, the itemsession_obs (a 12-dimensional feature vector for each \\((i, s)\\) pairs) affects the utility through both \\(\\kappa_i\\) and \\(\\iota_u\\) . For each item (except for the first item indexed with 0 , all coefficients of it are 0 ), the get_coefficient() method returns a 2D array of shape (num_items-1, num_itemsession_features) . The first row of the returned tensor corresponds to the coefficient vector of the second item, and so on. model.get_coefficient('itemsession_obs[user]') provides the user-specific relationship between utility and item-session observables, \\(\\iota_u\\) , which is a 2D array of shape (num_users, num_itemsession_features) . Each row of the returned tensor corresponds to the coefficient vector of a user. model . get_coefficient ( 'itemsession_obs[item]' ) . shape torch.Size([24, 12]) model . get_coefficient ( 'itemsession_obs[user]' ) . shape torch.Size([100, 12]) Visualizing Model Parameters Researchers can use any plotting library to visualize the model parameters. Here we use matplotlib to demonstrate how to visualize the model parameters. For example, we can plot the distribution of user fixed effect \\(\\gamma_u\\) 's as the following. Researcher can use the get_coefficient() method to retrieve the coefficient values. gamma = model . get_coefficient ( 'intercept[user]' ) After estimating the model with GPU, the coefficient values are stored in the GPU memory. We need move the coefficient values to CPU memory and convert it to a numpy array before plotting. gamma = gamma . cpu () . numpy () The tensor of individual fixed effects has shape (num_users, 1), you can use squeeze() to remove the dimension of size 1. Since we haven't updated the model in this tutorial, the coefficient values are all zeros. gamma = gamma . squeeze () gamma array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32) Researcher can use matplotlib to plot the distribution of the coefficient values. For example, the distribution plot of coefficients is helpful to identify potential groups of users with different preferences. fig , ax = plt . subplots ( figsize = ( 10 , 5 )) ax . hist ( gamma ) plt . show () Nested Logit Model The nested logit model has a very similar interface for coefficient extraction to the conditional logit model demonstrated above. Consider a nested logit model with the same item-level model but with nest-level model incorporating user-fixed effect, category-fixed effect (specified by (1|item) in the nest_formula ), and user-specific coefficient on a 64-dimensional nest-specific observable (specified by (item_obs|user) in the nest_formula ). The only difference is researcher would need to retrieve the coefficients of the nested logit model using the get_coefficient() method with the level argument. NestedLogitModel.get_coefficient() Method. nest_to_item = { 0 : [ 0 , 1 , 2 , 3 , 4 ], 1 : [ 5 , 6 , 7 , 8 , 9 ], 2 : [ 10 , 11 , 12 , 13 , 14 ], 3 : [ 15 , 16 , 17 , 18 , 19 ], 4 : [ 20 , 21 , 22 , 23 , 24 ] } nest_dataset = ChoiceDataset ( item_index = item_index , user_index = user_index , num_items = len ( nest_to_item ), num_users = num_users , item_obs = torch . randn ( len ( nest_to_item ), 64 )) joint_dataset = JointDataset ( nest = nest_dataset , item = dataset ) joint_dataset No `session_index` is provided, assume each choice instance is in its own session. JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[], item_obs=[5, 64], device=cpu) item: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 25], user_obs=[100, 128], item_obs=[25, 64], session_obs=[500, 10], itemsession_obs=[500, 25, 12], device=cpu) ) nested_model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '(1|user) + (1|item) + (item_obs|user)' , item_formula = '(1|constant) + (1|item) + (1|user) + (user_obs|item) + (item_obs|constant) + (session_obs|user) + (itemsession_obs|item) + (itemsession_obs|user)' , num_users = num_users , dataset = joint_dataset , shared_lambda = False ) nested_model NestedLogitModel( (nest_coef_dict): ModuleDict( (intercept[user]): Coefficient(variation=user, num_items=5, num_users=100, num_params=1, 100 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=5, num_users=100, num_params=1, 4 trainable parameters in total, device=cpu). (item_obs[user]): Coefficient(variation=user, num_items=5, num_users=100, num_params=64, 6400 trainable parameters in total, device=cpu). ) (item_coef_dict): ModuleDict( (intercept[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=1, 1 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=1, 24 trainable parameters in total, device=cpu). (intercept[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=1, 100 trainable parameters in total, device=cpu). (user_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=128, 3072 trainable parameters in total, device=cpu). (item_obs[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=64, 64 trainable parameters in total, device=cpu). (session_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=10, 1000 trainable parameters in total, device=cpu). (itemsession_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=12, 288 trainable parameters in total, device=cpu). (itemsession_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=12, 1200 trainable parameters in total, device=cpu). ) ) # estimate the model... omitted in this tutorial. For example, you can use the following code snippet to retrieve the coefficient of the user-fixed effect in the nest level model, which is a vector with num_users elements. nested_model . get_coefficient ( 'intercept[user]' , level = 'nest' ) . shape torch.Size([100, 1]) Similarly, by changing to level='item' , the researcher can obtain the coefficient of user-specific fixed effect in the item level model, which is also a vector with num_users elements. nested_model . get_coefficient ( 'intercept[user]' , level = 'item' ) . shape torch.Size([100, 1]) This API generalizes to all other coefficients listed above such as itemsession_obs[item] and itemsession_obs[user] . One exception is the coefficients for inclusive values, (often denoted as \\(\\lambda\\) ). Researchers can retrieve the coefficient of the inclusive value by using get_coefficient('lambda') without specifying the level argument ( get_coefficient will disregard any level argument if the coefficient name is lambda ). The returned value is a scalar if shared_lambda is True , and a 1D array of length num_nests if shared_lambda is False . In our case, the returned value is an array of length five (we have five nests in this model). nested_model . get_coefficient ( 'lambda' ) tensor([0.5000, 0.5000, 0.5000, 0.5000, 0.5000])","title":"Post Estimation"},{"location":"post_estimation_demos/#tutorial-post-estimations","text":"Author: Tianyu Du (tianyudu@stanford.edu) This tutorial covers the toolkit in torch-choice for visualizing and analyzing models after model estimation. Note : models demonstrated in this tutorial are for demonstration purpose only, hence we don't estimate them in this tutorial. Instead, this tutorial focuses on APIs to visualize and analyze models. # import required dependencies. from time import time import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import torch import torch.nn.functional as F from torch_choice.data import ChoiceDataset , JointDataset , utils from torch_choice.model import ConditionalLogitModel , NestedLogitModel from torch_choice.utils.run_helper import run # let's get a helper def print_dict_shape ( d ): for key , val in d . items (): if torch . is_tensor ( val ): print ( f 'dict. { key } .shape= { val . shape } ' )","title":"Tutorial: Post-Estimations"},{"location":"post_estimation_demos/#creating-choicedataset-object","text":"We first create a dummy ChoiceDataset object, please refer to the data management tutorial for more details. # Feel free to modify it as you want. num_users = 100 num_items = 25 num_sessions = 500 length_of_dataset = 10000 # create observables/features, the number of parameters are arbitrarily chosen. # generate 128 features for each user, e.g., race, gender. user_obs = torch . randn ( num_users , 128 ) # generate 64 features for each user, e.g., quality. item_obs = torch . randn ( num_items , 64 ) # generate 10 features for each session, e.g., weekday indicator. session_obs = torch . randn ( num_sessions , 10 ) # generate 12 features for each session user pair, e.g., the budget of that user at the shopping day. itemsession_obs = torch . randn ( num_sessions , num_items , 12 ) item_index = torch . LongTensor ( np . random . choice ( num_items , size = length_of_dataset )) user_index = torch . LongTensor ( np . random . choice ( num_users , size = length_of_dataset )) session_index = torch . LongTensor ( np . random . choice ( num_sessions , size = length_of_dataset )) # assume all items are available in all sessions. item_availability = torch . ones ( num_sessions , num_items ) . bool () # initialize a ChoiceDataset object. dataset = ChoiceDataset ( # pre-specified keywords of __init__ item_index = item_index , # required. # optional: num_users = num_users , num_items = num_items , user_index = user_index , session_index = session_index , item_availability = item_availability , # additional keywords of __init__ user_obs = user_obs , item_obs = item_obs , session_obs = session_obs , itemsession_obs = itemsession_obs ) print ( dataset ) ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 25], user_obs=[100, 128], item_obs=[25, 64], session_obs=[500, 10], itemsession_obs=[500, 25, 12], device=cpu)","title":"Creating  ChoiceDataset Object"},{"location":"post_estimation_demos/#conditional-logit-model","text":"Suppose that we are creating a very complicated dummy model as the following. Please note that model and dataset here are for demonstration purpose only, the model is unlikely to converge if one estimate it on this dataset. \\[ U_{uis} = \\alpha + \\beta_i + \\gamma_u + \\delta_i^\\top \\textbf{x}^{(user)}_u + \\eta^\\top \\textbf{y}^{(item)}_i + \\theta_u^\\top \\textbf{z}^{(session)}_{s} + \\kappa_i^\\top \\textbf{w}^{(itemsession)}_{is} + \\iota_u^\\top \\textbf{w}^{(itemsession)}_{is} + \\epsilon_{uis} \\] model = ConditionalLogitModel ( formula = '(1|constant) + (1|item) + (1|user) + (user_obs|item) + (item_obs|constant) + (session_obs|user) + (itemsession_obs|item) + (itemsession_obs|user)' , dataset = dataset , num_users = num_users , num_items = num_items ) # estimate the model... omitted in this tutorial. model ConditionalLogitModel( (coef_dict): ModuleDict( (intercept[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=1, 1 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=1, 24 trainable parameters in total, device=cpu). (intercept[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=1, 100 trainable parameters in total, device=cpu). (user_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=128, 3072 trainable parameters in total, device=cpu). (item_obs[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=64, 64 trainable parameters in total, device=cpu). (session_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=10, 1000 trainable parameters in total, device=cpu). (itemsession_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=12, 288 trainable parameters in total, device=cpu). (itemsession_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=12, 1200 trainable parameters in total, device=cpu). ) ) Conditional logistic discrete choice model, expects input features: X[intercept[constant]] with 1 parameters, with constant level variation. X[intercept[item]] with 1 parameters, with item level variation. X[intercept[user]] with 1 parameters, with user level variation. X[user_obs[item]] with 128 parameters, with item level variation. X[item_obs[constant]] with 64 parameters, with constant level variation. X[session_obs[user]] with 10 parameters, with user level variation. X[itemsession_obs[item]] with 12 parameters, with item level variation. X[itemsession_obs[user]] with 12 parameters, with user level variation. device=cpu","title":"Conditional Logit Model"},{"location":"post_estimation_demos/#retrieving-model-parameters-with-the-get_coefficient-method","text":"In the model representation above, we can see that the model has coefficients from intercept[constant] to itemsession_obs . The get_coefficient() method allows users to retrieve the coefficient values from the model using the general syntax model.get_coefficient(COEFFICIENT_NAME) . For example, model.get_coefficient('intercept[constant]') will return the value of \\(\\alpha\\) , which is a scalar. model . get_coefficient ( 'intercept[constant]' ) tensor([0.3743]) model.get_coefficient('intercept[user]') returns the array of \\(\\gamma_u\\) 's, which is a 1D array of length num_users . model . get_coefficient ( 'intercept[user]' ) . shape torch.Size([100, 1]) model.get_coefficient('session_obs[user]') returns the corresponding coefficient \\(\\theta_u\\) , which is a 2D array of shape (num_users, num_session_features) . Each row of the returned tensor corresponds to the coefficient vector of a user. model . get_coefficient ( 'session_obs[user]' ) . shape torch.Size([100, 10]) Lastly, the itemsession_obs (a 12-dimensional feature vector for each \\((i, s)\\) pairs) affects the utility through both \\(\\kappa_i\\) and \\(\\iota_u\\) . For each item (except for the first item indexed with 0 , all coefficients of it are 0 ), the get_coefficient() method returns a 2D array of shape (num_items-1, num_itemsession_features) . The first row of the returned tensor corresponds to the coefficient vector of the second item, and so on. model.get_coefficient('itemsession_obs[user]') provides the user-specific relationship between utility and item-session observables, \\(\\iota_u\\) , which is a 2D array of shape (num_users, num_itemsession_features) . Each row of the returned tensor corresponds to the coefficient vector of a user. model . get_coefficient ( 'itemsession_obs[item]' ) . shape torch.Size([24, 12]) model . get_coefficient ( 'itemsession_obs[user]' ) . shape torch.Size([100, 12])","title":"Retrieving Model Parameters with the get_coefficient() method."},{"location":"post_estimation_demos/#visualizing-model-parameters","text":"Researchers can use any plotting library to visualize the model parameters. Here we use matplotlib to demonstrate how to visualize the model parameters. For example, we can plot the distribution of user fixed effect \\(\\gamma_u\\) 's as the following. Researcher can use the get_coefficient() method to retrieve the coefficient values. gamma = model . get_coefficient ( 'intercept[user]' ) After estimating the model with GPU, the coefficient values are stored in the GPU memory. We need move the coefficient values to CPU memory and convert it to a numpy array before plotting. gamma = gamma . cpu () . numpy () The tensor of individual fixed effects has shape (num_users, 1), you can use squeeze() to remove the dimension of size 1. Since we haven't updated the model in this tutorial, the coefficient values are all zeros. gamma = gamma . squeeze () gamma array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32) Researcher can use matplotlib to plot the distribution of the coefficient values. For example, the distribution plot of coefficients is helpful to identify potential groups of users with different preferences. fig , ax = plt . subplots ( figsize = ( 10 , 5 )) ax . hist ( gamma ) plt . show ()","title":"Visualizing Model Parameters"},{"location":"post_estimation_demos/#nested-logit-model","text":"The nested logit model has a very similar interface for coefficient extraction to the conditional logit model demonstrated above. Consider a nested logit model with the same item-level model but with nest-level model incorporating user-fixed effect, category-fixed effect (specified by (1|item) in the nest_formula ), and user-specific coefficient on a 64-dimensional nest-specific observable (specified by (item_obs|user) in the nest_formula ). The only difference is researcher would need to retrieve the coefficients of the nested logit model using the get_coefficient() method with the level argument.","title":"Nested Logit Model"},{"location":"post_estimation_demos/#nestedlogitmodelget_coefficient-method","text":"nest_to_item = { 0 : [ 0 , 1 , 2 , 3 , 4 ], 1 : [ 5 , 6 , 7 , 8 , 9 ], 2 : [ 10 , 11 , 12 , 13 , 14 ], 3 : [ 15 , 16 , 17 , 18 , 19 ], 4 : [ 20 , 21 , 22 , 23 , 24 ] } nest_dataset = ChoiceDataset ( item_index = item_index , user_index = user_index , num_items = len ( nest_to_item ), num_users = num_users , item_obs = torch . randn ( len ( nest_to_item ), 64 )) joint_dataset = JointDataset ( nest = nest_dataset , item = dataset ) joint_dataset No `session_index` is provided, assume each choice instance is in its own session. JointDataset with 2 sub-datasets: ( nest: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[], item_obs=[5, 64], device=cpu) item: ChoiceDataset(label=[], item_index=[10000], user_index=[10000], session_index=[10000], item_availability=[500, 25], user_obs=[100, 128], item_obs=[25, 64], session_obs=[500, 10], itemsession_obs=[500, 25, 12], device=cpu) ) nested_model = NestedLogitModel ( nest_to_item = nest_to_item , nest_formula = '(1|user) + (1|item) + (item_obs|user)' , item_formula = '(1|constant) + (1|item) + (1|user) + (user_obs|item) + (item_obs|constant) + (session_obs|user) + (itemsession_obs|item) + (itemsession_obs|user)' , num_users = num_users , dataset = joint_dataset , shared_lambda = False ) nested_model NestedLogitModel( (nest_coef_dict): ModuleDict( (intercept[user]): Coefficient(variation=user, num_items=5, num_users=100, num_params=1, 100 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=5, num_users=100, num_params=1, 4 trainable parameters in total, device=cpu). (item_obs[user]): Coefficient(variation=user, num_items=5, num_users=100, num_params=64, 6400 trainable parameters in total, device=cpu). ) (item_coef_dict): ModuleDict( (intercept[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=1, 1 trainable parameters in total, device=cpu). (intercept[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=1, 24 trainable parameters in total, device=cpu). (intercept[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=1, 100 trainable parameters in total, device=cpu). (user_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=128, 3072 trainable parameters in total, device=cpu). (item_obs[constant]): Coefficient(variation=constant, num_items=25, num_users=100, num_params=64, 64 trainable parameters in total, device=cpu). (session_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=10, 1000 trainable parameters in total, device=cpu). (itemsession_obs[item]): Coefficient(variation=item, num_items=25, num_users=100, num_params=12, 288 trainable parameters in total, device=cpu). (itemsession_obs[user]): Coefficient(variation=user, num_items=25, num_users=100, num_params=12, 1200 trainable parameters in total, device=cpu). ) ) # estimate the model... omitted in this tutorial. For example, you can use the following code snippet to retrieve the coefficient of the user-fixed effect in the nest level model, which is a vector with num_users elements. nested_model . get_coefficient ( 'intercept[user]' , level = 'nest' ) . shape torch.Size([100, 1]) Similarly, by changing to level='item' , the researcher can obtain the coefficient of user-specific fixed effect in the item level model, which is also a vector with num_users elements. nested_model . get_coefficient ( 'intercept[user]' , level = 'item' ) . shape torch.Size([100, 1]) This API generalizes to all other coefficients listed above such as itemsession_obs[item] and itemsession_obs[user] . One exception is the coefficients for inclusive values, (often denoted as \\(\\lambda\\) ). Researchers can retrieve the coefficient of the inclusive value by using get_coefficient('lambda') without specifying the level argument ( get_coefficient will disregard any level argument if the coefficient name is lambda ). The returned value is a scalar if shared_lambda is True , and a 1D array of length num_nests if shared_lambda is False . In our case, the returned value is an array of length five (we have five nests in this model). nested_model . get_coefficient ( 'lambda' ) tensor([0.5000, 0.5000, 0.5000, 0.5000, 0.5000])","title":"NestedLogitModel.get_coefficient() Method."},{"location":"projects/","text":"Research Projects using this Package Question-Answering Data for Educational Applications Tutorial on Educational Question-Answering","title":"Related Projects"},{"location":"projects/#research-projects-using-this-package","text":"","title":"Research Projects using this Package"},{"location":"projects/#question-answering-data-for-educational-applications","text":"Tutorial on Educational Question-Answering","title":"Question-Answering Data for Educational Applications"},{"location":"regularization/","text":"Regularization: \\(L_1\\) and \\(L_2\\) Author: Tianyu Du Date: Sept. 28, 2022 Also known as weight decay or penalized regression . Adding the regularization loss term would shrink coefficient magnitudes and better prevent over-fitting. Specifically, we add the \\(L_1\\) or \\(L_2\\) norm of coefficients to the loss (negative log-likelihood) function. \\[ \\text{Loss} = \\text{NegativeLogLikelihood} + \\alpha \\sum_{c \\in \\text{model coefficients}} ||c||_p \\quad p \\in \\{1, 2\\} \\] Readers can adjust the \\(\\alpha\\) weight to control the strength of regularization. import numpy as np import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset , utils from torch_choice.model.nested_logit_model import NestedLogitModel from torch_choice.model import ConditionalLogitModel from torch_choice.utils.run_helper import run if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) device = 'cuda' else : print ( 'Running tutorial on CPU.' ) device = 'cpu' CUDA device used: NVIDIA GeForce RTX 3090 Conditional Logit Model df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) df = df . query ( 'noalt == 4' ) . reset_index ( drop = True ) df . sort_values ( by = 'case' , inplace = True ) item_index = df [ df [ 'choice' ] == 1 ] . sort_values ( by = 'case' )[ 'alt' ] . reset_index ( drop = True ) item_names = [ 'air' , 'bus' , 'car' , 'train' ] num_items = 4 encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) price_cost_freq_ovt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = [ 'cost' , 'freq' , 'ovt' ]) price_ivt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = 'ivt' ) session_income = df . groupby ( 'case' )[ 'income' ] . first () session_income = torch . Tensor ( session_income . values ) . view ( - 1 , 1 ) dataset = ChoiceDataset ( item_index = item_index , price_cost_freq_ovt = price_cost_freq_ovt , session_income = session_income , price_ivt = price_ivt ) . to ( device ) print ( dataset ) No `session_index` is provided, assume each choice instance is in its own session. ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) # shuffle the dataset. N = len ( dataset ) shuffle_index = np . random . permutation ( N ) train_index = shuffle_index [: int ( 0.7 * N )] test_index = shuffle_index [ int ( 0.7 * N ):] # splits of dataset. dataset_train , dataset_test = dataset [ train_index ], dataset [ test_index ] conditional_logit_common_arguments = { \"coef_variation_dict\" : { 'price_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'price_ivt' : 'item-full' , 'intercept' : 'item' }, \"num_param_dict\" : { 'price_cost_freq_ovt' : 3 , 'session_income' : 1 , 'price_ivt' : 1 , 'intercept' : 1 }, \"num_items\" : 4 , } def train_conditional_logit_model ( regularization , regularization_weight ): model = ConditionalLogitModel ( ** conditional_logit_common_arguments , regularization = regularization , regularization_weight = regularization_weight ) . to ( device ) run ( model , dataset_train , dataset_test = dataset_test , num_epochs = 50000 , learning_rate = 0.003 , batch_size =- 1 ) # report total model weight print ( 'Total weight L2 norm:' , sum ([ torch . norm ( param , p = 2 ) for param in model . parameters ()])) train_conditional_logit_model ( regularization = None , regularization_weight = None ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-1322.9208984375 Epoch 10000: Log-likelihood=-1322.427490234375 Epoch 15000: Log-likelihood=-1322.361572265625 Epoch 20000: Log-likelihood=-1322.354736328125 Epoch 25000: Log-likelihood=-1322.4718017578125 Epoch 30000: Log-likelihood=-1331.5247802734375 Epoch 35000: Log-likelihood=-1322.3544921875 Epoch 40000: Log-likelihood=-1322.421142578125 Epoch 45000: Log-likelihood=-1322.3602294921875 Epoch 50000: Log-likelihood=-1322.495849609375 Test set log-likelihood: -554.70849609375 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -1322.495849609375 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | -0.0308257 | 0.00839731 | | price_cost_freq_ovt_1 | 0.0945616 | 0.00598799 | | price_cost_freq_ovt_2 | -0.0397223 | 0.00373588 | | session_income_0 | -0.0716898 | 0.0195864 | | session_income_1 | -0.0273578 | 0.00459898 | | session_income_2 | -0.038647 | 0.00484347 | | price_ivt_0 | 0.0564822 | 0.0117201 | | price_ivt_1 | -0.00936753 | 0.00582746 | | price_ivt_2 | -0.00678837 | 0.00222236 | | price_ivt_3 | -0.00175041 | 0.00139018 | | intercept_0 | 0.899362 | 1.53674 | | intercept_1 | 2.24992 | 0.848803 | | intercept_2 | 3.50811 | 0.747974 | Total weight L2 norm: tensor(2.6599, device='cuda:0', grad_fn=<AddBackward0>) train_conditional_logit_model ( regularization = 'L1' , regularization_weight = 5 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-1327.5283203125 Epoch 10000: Log-likelihood=-1327.5472412109375 Epoch 15000: Log-likelihood=-1327.5458984375 Epoch 20000: Log-likelihood=-1327.5452880859375 Epoch 25000: Log-likelihood=-1327.54931640625 Epoch 30000: Log-likelihood=-1327.9013671875 Epoch 35000: Log-likelihood=-1327.5465087890625 Epoch 40000: Log-likelihood=-1327.6224365234375 Epoch 45000: Log-likelihood=-1327.5556640625 Epoch 50000: Log-likelihood=-1333.43359375 Test set log-likelihood: -556.6971435546875 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -1333.43359375 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | -0.0485882 | 0.0084985 | | price_cost_freq_ovt_1 | 0.0963804 | 0.00600474 | | price_cost_freq_ovt_2 | -0.0381796 | 0.00383793 | | session_income_0 | -0.0766308 | 0.0208468 | | session_income_1 | -0.0225714 | 0.00444105 | | session_income_2 | -0.0326763 | 0.00488883 | | price_ivt_0 | 0.0531795 | 0.0118078 | | price_ivt_1 | -0.0166434 | 0.0080002 | | price_ivt_2 | -0.00397061 | 0.00221348 | | price_ivt_3 | -0.00189491 | 0.00140921 | | intercept_0 | 0.000167495 | 1.69499 | | intercept_1 | 0.000309494 | 0.833982 | | intercept_2 | 1.2901 | 0.729501 | Total weight L2 norm: tensor(1.3817, device='cuda:0', grad_fn=<AddBackward0>) train_conditional_logit_model ( regularization = 'L2' , regularization_weight = 5 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-1327.98876953125 Epoch 10000: Log-likelihood=-1327.377197265625 Epoch 15000: Log-likelihood=-1327.3466796875 Epoch 20000: Log-likelihood=-1327.345458984375 Epoch 25000: Log-likelihood=-1327.433349609375 Epoch 30000: Log-likelihood=-1327.3453369140625 Epoch 35000: Log-likelihood=-1327.34521484375 Epoch 40000: Log-likelihood=-1327.3885498046875 Epoch 45000: Log-likelihood=-1327.3486328125 Epoch 50000: Log-likelihood=-1327.34765625 Test set log-likelihood: -555.1453857421875 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -1327.34765625 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | -0.0482729 | 0.0083645 | | price_cost_freq_ovt_1 | 0.0967298 | 0.00595309 | | price_cost_freq_ovt_2 | -0.0376925 | 0.0037188 | | session_income_0 | -0.0749973 | 0.019634 | | session_income_1 | -0.0231255 | 0.00446823 | | session_income_2 | -0.032398 | 0.00475483 | | price_ivt_0 | 0.0534635 | 0.0117147 | | price_ivt_1 | -0.0153539 | 0.00731768 | | price_ivt_2 | -0.00426721 | 0.00219745 | | price_ivt_3 | -0.00154632 | 0.00138443 | | intercept_0 | -0.201299 | 1.60544 | | intercept_1 | 0.00875631 | 0.823289 | | intercept_2 | 1.29872 | 0.715818 | Total weight L2 norm: tensor(1.5968, device='cuda:0', grad_fn=<AddBackward0>) train_conditional_logit_model ( regularization = 'L1' , regularization_weight = 1E5 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-2680.06005859375 Epoch 10000: Log-likelihood=-2431.19091796875 Epoch 15000: Log-likelihood=-2651.45849609375 Epoch 20000: Log-likelihood=-2578.85107421875 Epoch 25000: Log-likelihood=-2525.41650390625 Epoch 30000: Log-likelihood=-2554.415283203125 Epoch 35000: Log-likelihood=-2570.41845703125 Epoch 40000: Log-likelihood=-2658.0556640625 Epoch 45000: Log-likelihood=-2560.906005859375 Epoch 50000: Log-likelihood=-2677.46826171875 Test set log-likelihood: -1136.294921875 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -2677.46826171875 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | 0.000446639 | 0.00574829 | | price_cost_freq_ovt_1 | -0.000407603 | 0.00415769 | | price_cost_freq_ovt_2 | 0.000226522 | 0.0021607 | | session_income_0 | -4.7971e-05 | 0.00383794 | | session_income_1 | 0.00117954 | 0.00375016 | | session_income_2 | 0.00041626 | 0.00359678 | | price_ivt_0 | -0.000192594 | 0.00875022 | | price_ivt_1 | -0.000618745 | 0.000871537 | | price_ivt_2 | -0.000398202 | 0.00165723 | | price_ivt_3 | 0.000407054 | 0.00104901 | | intercept_0 | -0.000648632 | 0.567814 | | intercept_1 | -0.000525868 | 0.580968 | | intercept_2 | -0.000405973 | 0.505175 | Total weight L2 norm: tensor(1.3426, device='cuda:0', grad_fn=<AddBackward0>) On Nested Logit Model df = pd . read_csv ( './public_datasets/HC.csv' , index_col = 0 ) df = df . reset_index ( drop = True ) df . head () # what was actually chosen. item_index = df [ df [ 'depvar' ] == True ] . sort_values ( by = 'idx.id1' )[ 'idx.id2' ] . reset_index ( drop = True ) item_names = [ 'ec' , 'ecc' , 'er' , 'erc' , 'gc' , 'gcc' , 'hpc' ] num_items = df [ 'idx.id2' ] . nunique () # cardinal encoder. encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) # category feature: no category feature, all features are item-level. category_dataset = ChoiceDataset ( item_index = item_index . clone ()) . to ( device ) # item feature. item_feat_cols = [ 'ich' , 'och' , 'icca' , 'occa' , 'inc.room' , 'inc.cooling' , 'int.cooling' ] price_obs = utils . pivot3d ( df , dim0 = 'idx.id1' , dim1 = 'idx.id2' , values = item_feat_cols ) item_dataset = ChoiceDataset ( item_index = item_index , price_obs = price_obs ) . to ( device ) dataset = JointDataset ( category = category_dataset , item = item_dataset ) category_to_item = { 0 : [ 'gcc' , 'ecc' , 'erc' , 'hpc' ], 1 : [ 'gc' , 'ec' , 'er' ]} # encode items to integers. for k , v in category_to_item . items (): v = [ encoder [ item ] for item in v ] category_to_item [ k ] = sorted ( v ) No `session_index` is provided, assume each choice instance is in its own session. No `session_index` is provided, assume each choice instance is in its own session. def train_nested_logit_model ( regularization , regularization_weight ): model = NestedLogitModel ( category_to_item = category_to_item , category_coef_variation_dict = {}, category_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, regularization = regularization , regularization_weight = regularization_weight , shared_lambda = True ) . to ( device ) run ( model , dataset , num_epochs = 10000 ) train_nested_logit_model ( None , None ) ==================== received model ==================== NestedLogitModel( (category_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cuda:0). ) ) ==================== received dataset ==================== JointDataset with 2 sub-datasets: ( category: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cuda:0) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cuda:0) ) ==================== training the model ==================== Epoch 1000: Log-likelihood=-226.63345336914062 Epoch 2000: Log-likelihood=-189.08030700683594 Epoch 3000: Log-likelihood=-181.08639526367188 Epoch 4000: Log-likelihood=-179.11544799804688 Epoch 5000: Log-likelihood=-178.78994750976562 Epoch 6000: Log-likelihood=-178.64102172851562 Epoch 7000: Log-likelihood=-178.50711059570312 Epoch 8000: Log-likelihood=-178.36279296875 Epoch 9000: Log-likelihood=-178.23562622070312 Epoch 10000: Log-likelihood=-178.15724182128906 ==================== model results ==================== Training Epochs: 10000 Learning Rate: 0.01 Batch Size: 250 out of 250 observations in total Final Log-likelihood: -178.15724182128906 Coefficients: | Coefficient | Estimation | Std. Err. | |:-----------------|-------------:|------------:| | lambda_weight_0 | 0.569814 | 0.163447 | | item_price_obs_0 | -0.5397 | 0.141929 | | item_price_obs_1 | -0.834805 | 0.233345 | | item_price_obs_2 | -0.242956 | 0.110592 | | item_price_obs_3 | -1.27541 | 1.03548 | | item_price_obs_4 | -0.368249 | 0.0986935 | | item_price_obs_5 | 0.247266 | 0.0513082 | | item_price_obs_6 | -4.78207 | 4.7152 | train_nested_logit_model ( \"L1\" , 10 ) ==================== received model ==================== NestedLogitModel( (category_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cuda:0). ) ) ==================== received dataset ==================== JointDataset with 2 sub-datasets: ( category: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cuda:0) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cuda:0) ) ==================== training the model ==================== Epoch 1000: Log-likelihood=-186.81593322753906 Epoch 2000: Log-likelihood=-187.0428924560547 Epoch 3000: Log-likelihood=-188.46871948242188 Epoch 4000: Log-likelihood=-187.3245849609375 Epoch 5000: Log-likelihood=-187.10488891601562 Epoch 6000: Log-likelihood=-187.18087768554688 Epoch 7000: Log-likelihood=-187.34005737304688 Epoch 8000: Log-likelihood=-187.11846923828125 Epoch 9000: Log-likelihood=-187.3697509765625 Epoch 10000: Log-likelihood=-187.0865478515625 ==================== model results ==================== Training Epochs: 10000 Learning Rate: 0.01 Batch Size: 250 out of 250 observations in total Final Log-likelihood: -187.0865478515625 Coefficients: | Coefficient | Estimation | Std. Err. | |:-----------------|-------------:|------------:| | lambda_weight_0 | 0.0530321 | 0.0531535 | | item_price_obs_0 | -0.0512223 | 0.0514528 | | item_price_obs_1 | -0.0779116 | 0.078385 | | item_price_obs_2 | -0.187379 | 0.087971 | | item_price_obs_3 | -0.00119437 | 0.863954 | | item_price_obs_4 | -0.0346545 | 0.0350824 | | item_price_obs_5 | 0.183375 | 0.034789 | | item_price_obs_6 | 0.000892786 | 3.57438 | train_nested_logit_model ( \"L2\" , 10 ) ==================== received model ==================== NestedLogitModel( (category_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cuda:0). ) ) ==================== received dataset ==================== JointDataset with 2 sub-datasets: ( category: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cuda:0) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cuda:0) ) ==================== training the model ==================== Epoch 1000: Log-likelihood=-219.621826171875 Epoch 2000: Log-likelihood=-200.87660217285156 Epoch 3000: Log-likelihood=-192.0721435546875 Epoch 4000: Log-likelihood=-183.12820434570312 Epoch 5000: Log-likelihood=-182.87225341796875 Epoch 6000: Log-likelihood=-183.52407836914062 Epoch 7000: Log-likelihood=-183.50723266601562 Epoch 8000: Log-likelihood=-183.5075225830078 Epoch 9000: Log-likelihood=-183.50465393066406 Epoch 10000: Log-likelihood=-183.5073699951172 ==================== model results ==================== Training Epochs: 10000 Learning Rate: 0.01 Batch Size: 250 out of 250 observations in total Final Log-likelihood: -183.5073699951172 Coefficients: | Coefficient | Estimation | Std. Err. | |:-----------------|-------------:|------------:| | lambda_weight_0 | 0.181474 | 0.108225 | | item_price_obs_0 | -0.174871 | 0.102564 | | item_price_obs_1 | -0.265047 | 0.156401 | | item_price_obs_2 | -0.258935 | 0.0949367 | | item_price_obs_3 | -0.151668 | 0.898396 | | item_price_obs_4 | -0.118241 | 0.0697575 | | item_price_obs_5 | 0.193267 | 0.0380327 | | item_price_obs_6 | -0.0374295 | 3.90292 |","title":"Regularization: $L_1$ and $L_2$"},{"location":"regularization/#regularization-l_1-and-l_2","text":"Author: Tianyu Du Date: Sept. 28, 2022 Also known as weight decay or penalized regression . Adding the regularization loss term would shrink coefficient magnitudes and better prevent over-fitting. Specifically, we add the \\(L_1\\) or \\(L_2\\) norm of coefficients to the loss (negative log-likelihood) function. \\[ \\text{Loss} = \\text{NegativeLogLikelihood} + \\alpha \\sum_{c \\in \\text{model coefficients}} ||c||_p \\quad p \\in \\{1, 2\\} \\] Readers can adjust the \\(\\alpha\\) weight to control the strength of regularization. import numpy as np import pandas as pd import torch from torch_choice.data import ChoiceDataset , JointDataset , utils from torch_choice.model.nested_logit_model import NestedLogitModel from torch_choice.model import ConditionalLogitModel from torch_choice.utils.run_helper import run if torch . cuda . is_available (): print ( f 'CUDA device used: { torch . cuda . get_device_name () } ' ) device = 'cuda' else : print ( 'Running tutorial on CPU.' ) device = 'cpu' CUDA device used: NVIDIA GeForce RTX 3090","title":"Regularization: \\(L_1\\) and \\(L_2\\)"},{"location":"regularization/#conditional-logit-model","text":"df = pd . read_csv ( './public_datasets/ModeCanada.csv' ) df = df . query ( 'noalt == 4' ) . reset_index ( drop = True ) df . sort_values ( by = 'case' , inplace = True ) item_index = df [ df [ 'choice' ] == 1 ] . sort_values ( by = 'case' )[ 'alt' ] . reset_index ( drop = True ) item_names = [ 'air' , 'bus' , 'car' , 'train' ] num_items = 4 encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) price_cost_freq_ovt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = [ 'cost' , 'freq' , 'ovt' ]) price_ivt = utils . pivot3d ( df , dim0 = 'case' , dim1 = 'alt' , values = 'ivt' ) session_income = df . groupby ( 'case' )[ 'income' ] . first () session_income = torch . Tensor ( session_income . values ) . view ( - 1 , 1 ) dataset = ChoiceDataset ( item_index = item_index , price_cost_freq_ovt = price_cost_freq_ovt , session_income = session_income , price_ivt = price_ivt ) . to ( device ) print ( dataset ) No `session_index` is provided, assume each choice instance is in its own session. ChoiceDataset(label=[], item_index=[2779], user_index=[], session_index=[2779], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) # shuffle the dataset. N = len ( dataset ) shuffle_index = np . random . permutation ( N ) train_index = shuffle_index [: int ( 0.7 * N )] test_index = shuffle_index [ int ( 0.7 * N ):] # splits of dataset. dataset_train , dataset_test = dataset [ train_index ], dataset [ test_index ] conditional_logit_common_arguments = { \"coef_variation_dict\" : { 'price_cost_freq_ovt' : 'constant' , 'session_income' : 'item' , 'price_ivt' : 'item-full' , 'intercept' : 'item' }, \"num_param_dict\" : { 'price_cost_freq_ovt' : 3 , 'session_income' : 1 , 'price_ivt' : 1 , 'intercept' : 1 }, \"num_items\" : 4 , } def train_conditional_logit_model ( regularization , regularization_weight ): model = ConditionalLogitModel ( ** conditional_logit_common_arguments , regularization = regularization , regularization_weight = regularization_weight ) . to ( device ) run ( model , dataset_train , dataset_test = dataset_test , num_epochs = 50000 , learning_rate = 0.003 , batch_size =- 1 ) # report total model weight print ( 'Total weight L2 norm:' , sum ([ torch . norm ( param , p = 2 ) for param in model . parameters ()])) train_conditional_logit_model ( regularization = None , regularization_weight = None ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-1322.9208984375 Epoch 10000: Log-likelihood=-1322.427490234375 Epoch 15000: Log-likelihood=-1322.361572265625 Epoch 20000: Log-likelihood=-1322.354736328125 Epoch 25000: Log-likelihood=-1322.4718017578125 Epoch 30000: Log-likelihood=-1331.5247802734375 Epoch 35000: Log-likelihood=-1322.3544921875 Epoch 40000: Log-likelihood=-1322.421142578125 Epoch 45000: Log-likelihood=-1322.3602294921875 Epoch 50000: Log-likelihood=-1322.495849609375 Test set log-likelihood: -554.70849609375 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -1322.495849609375 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | -0.0308257 | 0.00839731 | | price_cost_freq_ovt_1 | 0.0945616 | 0.00598799 | | price_cost_freq_ovt_2 | -0.0397223 | 0.00373588 | | session_income_0 | -0.0716898 | 0.0195864 | | session_income_1 | -0.0273578 | 0.00459898 | | session_income_2 | -0.038647 | 0.00484347 | | price_ivt_0 | 0.0564822 | 0.0117201 | | price_ivt_1 | -0.00936753 | 0.00582746 | | price_ivt_2 | -0.00678837 | 0.00222236 | | price_ivt_3 | -0.00175041 | 0.00139018 | | intercept_0 | 0.899362 | 1.53674 | | intercept_1 | 2.24992 | 0.848803 | | intercept_2 | 3.50811 | 0.747974 | Total weight L2 norm: tensor(2.6599, device='cuda:0', grad_fn=<AddBackward0>) train_conditional_logit_model ( regularization = 'L1' , regularization_weight = 5 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-1327.5283203125 Epoch 10000: Log-likelihood=-1327.5472412109375 Epoch 15000: Log-likelihood=-1327.5458984375 Epoch 20000: Log-likelihood=-1327.5452880859375 Epoch 25000: Log-likelihood=-1327.54931640625 Epoch 30000: Log-likelihood=-1327.9013671875 Epoch 35000: Log-likelihood=-1327.5465087890625 Epoch 40000: Log-likelihood=-1327.6224365234375 Epoch 45000: Log-likelihood=-1327.5556640625 Epoch 50000: Log-likelihood=-1333.43359375 Test set log-likelihood: -556.6971435546875 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -1333.43359375 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | -0.0485882 | 0.0084985 | | price_cost_freq_ovt_1 | 0.0963804 | 0.00600474 | | price_cost_freq_ovt_2 | -0.0381796 | 0.00383793 | | session_income_0 | -0.0766308 | 0.0208468 | | session_income_1 | -0.0225714 | 0.00444105 | | session_income_2 | -0.0326763 | 0.00488883 | | price_ivt_0 | 0.0531795 | 0.0118078 | | price_ivt_1 | -0.0166434 | 0.0080002 | | price_ivt_2 | -0.00397061 | 0.00221348 | | price_ivt_3 | -0.00189491 | 0.00140921 | | intercept_0 | 0.000167495 | 1.69499 | | intercept_1 | 0.000309494 | 0.833982 | | intercept_2 | 1.2901 | 0.729501 | Total weight L2 norm: tensor(1.3817, device='cuda:0', grad_fn=<AddBackward0>) train_conditional_logit_model ( regularization = 'L2' , regularization_weight = 5 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-1327.98876953125 Epoch 10000: Log-likelihood=-1327.377197265625 Epoch 15000: Log-likelihood=-1327.3466796875 Epoch 20000: Log-likelihood=-1327.345458984375 Epoch 25000: Log-likelihood=-1327.433349609375 Epoch 30000: Log-likelihood=-1327.3453369140625 Epoch 35000: Log-likelihood=-1327.34521484375 Epoch 40000: Log-likelihood=-1327.3885498046875 Epoch 45000: Log-likelihood=-1327.3486328125 Epoch 50000: Log-likelihood=-1327.34765625 Test set log-likelihood: -555.1453857421875 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -1327.34765625 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | -0.0482729 | 0.0083645 | | price_cost_freq_ovt_1 | 0.0967298 | 0.00595309 | | price_cost_freq_ovt_2 | -0.0376925 | 0.0037188 | | session_income_0 | -0.0749973 | 0.019634 | | session_income_1 | -0.0231255 | 0.00446823 | | session_income_2 | -0.032398 | 0.00475483 | | price_ivt_0 | 0.0534635 | 0.0117147 | | price_ivt_1 | -0.0153539 | 0.00731768 | | price_ivt_2 | -0.00426721 | 0.00219745 | | price_ivt_3 | -0.00154632 | 0.00138443 | | intercept_0 | -0.201299 | 1.60544 | | intercept_1 | 0.00875631 | 0.823289 | | intercept_2 | 1.29872 | 0.715818 | Total weight L2 norm: tensor(1.5968, device='cuda:0', grad_fn=<AddBackward0>) train_conditional_logit_model ( regularization = 'L1' , regularization_weight = 1E5 ) ==================== received model ==================== ConditionalLogitModel( (coef_dict): ModuleDict( (price_cost_freq_ovt): Coefficient(variation=constant, num_items=4, num_users=None, num_params=3, 3 trainable parameters in total, device=cuda:0). (session_income): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). (price_ivt): Coefficient(variation=item-full, num_items=4, num_users=None, num_params=1, 4 trainable parameters in total, device=cuda:0). (intercept): Coefficient(variation=item, num_items=4, num_users=None, num_params=1, 3 trainable parameters in total, device=cuda:0). ) ) Conditional logistic discrete choice model, expects input features: X[price_cost_freq_ovt] with 3 parameters, with constant level variation. X[session_income] with 1 parameters, with item level variation. X[price_ivt] with 1 parameters, with item-full level variation. X[intercept] with 1 parameters, with item level variation. device=cuda:0 ==================== received dataset ==================== ChoiceDataset(label=[], item_index=[1945], user_index=[], session_index=[1945], item_availability=[], price_cost_freq_ovt=[2779, 4, 3], session_income=[2779, 1], price_ivt=[2779, 4, 1], device=cuda:0) ==================== training the model ==================== Epoch 5000: Log-likelihood=-2680.06005859375 Epoch 10000: Log-likelihood=-2431.19091796875 Epoch 15000: Log-likelihood=-2651.45849609375 Epoch 20000: Log-likelihood=-2578.85107421875 Epoch 25000: Log-likelihood=-2525.41650390625 Epoch 30000: Log-likelihood=-2554.415283203125 Epoch 35000: Log-likelihood=-2570.41845703125 Epoch 40000: Log-likelihood=-2658.0556640625 Epoch 45000: Log-likelihood=-2560.906005859375 Epoch 50000: Log-likelihood=-2677.46826171875 Test set log-likelihood: -1136.294921875 ==================== model results ==================== Training Epochs: 50000 Learning Rate: 0.003 Batch Size: 1945 out of 1945 observations in total Final Log-likelihood: -2677.46826171875 Coefficients: | Coefficient | Estimation | Std. Err. | |:----------------------|-------------:|------------:| | price_cost_freq_ovt_0 | 0.000446639 | 0.00574829 | | price_cost_freq_ovt_1 | -0.000407603 | 0.00415769 | | price_cost_freq_ovt_2 | 0.000226522 | 0.0021607 | | session_income_0 | -4.7971e-05 | 0.00383794 | | session_income_1 | 0.00117954 | 0.00375016 | | session_income_2 | 0.00041626 | 0.00359678 | | price_ivt_0 | -0.000192594 | 0.00875022 | | price_ivt_1 | -0.000618745 | 0.000871537 | | price_ivt_2 | -0.000398202 | 0.00165723 | | price_ivt_3 | 0.000407054 | 0.00104901 | | intercept_0 | -0.000648632 | 0.567814 | | intercept_1 | -0.000525868 | 0.580968 | | intercept_2 | -0.000405973 | 0.505175 | Total weight L2 norm: tensor(1.3426, device='cuda:0', grad_fn=<AddBackward0>)","title":"Conditional Logit Model"},{"location":"regularization/#on-nested-logit-model","text":"df = pd . read_csv ( './public_datasets/HC.csv' , index_col = 0 ) df = df . reset_index ( drop = True ) df . head () # what was actually chosen. item_index = df [ df [ 'depvar' ] == True ] . sort_values ( by = 'idx.id1' )[ 'idx.id2' ] . reset_index ( drop = True ) item_names = [ 'ec' , 'ecc' , 'er' , 'erc' , 'gc' , 'gcc' , 'hpc' ] num_items = df [ 'idx.id2' ] . nunique () # cardinal encoder. encoder = dict ( zip ( item_names , range ( num_items ))) item_index = item_index . map ( lambda x : encoder [ x ]) item_index = torch . LongTensor ( item_index ) # category feature: no category feature, all features are item-level. category_dataset = ChoiceDataset ( item_index = item_index . clone ()) . to ( device ) # item feature. item_feat_cols = [ 'ich' , 'och' , 'icca' , 'occa' , 'inc.room' , 'inc.cooling' , 'int.cooling' ] price_obs = utils . pivot3d ( df , dim0 = 'idx.id1' , dim1 = 'idx.id2' , values = item_feat_cols ) item_dataset = ChoiceDataset ( item_index = item_index , price_obs = price_obs ) . to ( device ) dataset = JointDataset ( category = category_dataset , item = item_dataset ) category_to_item = { 0 : [ 'gcc' , 'ecc' , 'erc' , 'hpc' ], 1 : [ 'gc' , 'ec' , 'er' ]} # encode items to integers. for k , v in category_to_item . items (): v = [ encoder [ item ] for item in v ] category_to_item [ k ] = sorted ( v ) No `session_index` is provided, assume each choice instance is in its own session. No `session_index` is provided, assume each choice instance is in its own session. def train_nested_logit_model ( regularization , regularization_weight ): model = NestedLogitModel ( category_to_item = category_to_item , category_coef_variation_dict = {}, category_num_param_dict = {}, item_coef_variation_dict = { 'price_obs' : 'constant' }, item_num_param_dict = { 'price_obs' : 7 }, regularization = regularization , regularization_weight = regularization_weight , shared_lambda = True ) . to ( device ) run ( model , dataset , num_epochs = 10000 ) train_nested_logit_model ( None , None ) ==================== received model ==================== NestedLogitModel( (category_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cuda:0). ) ) ==================== received dataset ==================== JointDataset with 2 sub-datasets: ( category: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cuda:0) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cuda:0) ) ==================== training the model ==================== Epoch 1000: Log-likelihood=-226.63345336914062 Epoch 2000: Log-likelihood=-189.08030700683594 Epoch 3000: Log-likelihood=-181.08639526367188 Epoch 4000: Log-likelihood=-179.11544799804688 Epoch 5000: Log-likelihood=-178.78994750976562 Epoch 6000: Log-likelihood=-178.64102172851562 Epoch 7000: Log-likelihood=-178.50711059570312 Epoch 8000: Log-likelihood=-178.36279296875 Epoch 9000: Log-likelihood=-178.23562622070312 Epoch 10000: Log-likelihood=-178.15724182128906 ==================== model results ==================== Training Epochs: 10000 Learning Rate: 0.01 Batch Size: 250 out of 250 observations in total Final Log-likelihood: -178.15724182128906 Coefficients: | Coefficient | Estimation | Std. Err. | |:-----------------|-------------:|------------:| | lambda_weight_0 | 0.569814 | 0.163447 | | item_price_obs_0 | -0.5397 | 0.141929 | | item_price_obs_1 | -0.834805 | 0.233345 | | item_price_obs_2 | -0.242956 | 0.110592 | | item_price_obs_3 | -1.27541 | 1.03548 | | item_price_obs_4 | -0.368249 | 0.0986935 | | item_price_obs_5 | 0.247266 | 0.0513082 | | item_price_obs_6 | -4.78207 | 4.7152 | train_nested_logit_model ( \"L1\" , 10 ) ==================== received model ==================== NestedLogitModel( (category_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cuda:0). ) ) ==================== received dataset ==================== JointDataset with 2 sub-datasets: ( category: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cuda:0) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cuda:0) ) ==================== training the model ==================== Epoch 1000: Log-likelihood=-186.81593322753906 Epoch 2000: Log-likelihood=-187.0428924560547 Epoch 3000: Log-likelihood=-188.46871948242188 Epoch 4000: Log-likelihood=-187.3245849609375 Epoch 5000: Log-likelihood=-187.10488891601562 Epoch 6000: Log-likelihood=-187.18087768554688 Epoch 7000: Log-likelihood=-187.34005737304688 Epoch 8000: Log-likelihood=-187.11846923828125 Epoch 9000: Log-likelihood=-187.3697509765625 Epoch 10000: Log-likelihood=-187.0865478515625 ==================== model results ==================== Training Epochs: 10000 Learning Rate: 0.01 Batch Size: 250 out of 250 observations in total Final Log-likelihood: -187.0865478515625 Coefficients: | Coefficient | Estimation | Std. Err. | |:-----------------|-------------:|------------:| | lambda_weight_0 | 0.0530321 | 0.0531535 | | item_price_obs_0 | -0.0512223 | 0.0514528 | | item_price_obs_1 | -0.0779116 | 0.078385 | | item_price_obs_2 | -0.187379 | 0.087971 | | item_price_obs_3 | -0.00119437 | 0.863954 | | item_price_obs_4 | -0.0346545 | 0.0350824 | | item_price_obs_5 | 0.183375 | 0.034789 | | item_price_obs_6 | 0.000892786 | 3.57438 | train_nested_logit_model ( \"L2\" , 10 ) ==================== received model ==================== NestedLogitModel( (category_coef_dict): ModuleDict() (item_coef_dict): ModuleDict( (price_obs): Coefficient(variation=constant, num_items=7, num_users=None, num_params=7, 7 trainable parameters in total, device=cuda:0). ) ) ==================== received dataset ==================== JointDataset with 2 sub-datasets: ( category: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], device=cuda:0) item: ChoiceDataset(label=[], item_index=[250], user_index=[], session_index=[250], item_availability=[], price_obs=[250, 7, 7], device=cuda:0) ) ==================== training the model ==================== Epoch 1000: Log-likelihood=-219.621826171875 Epoch 2000: Log-likelihood=-200.87660217285156 Epoch 3000: Log-likelihood=-192.0721435546875 Epoch 4000: Log-likelihood=-183.12820434570312 Epoch 5000: Log-likelihood=-182.87225341796875 Epoch 6000: Log-likelihood=-183.52407836914062 Epoch 7000: Log-likelihood=-183.50723266601562 Epoch 8000: Log-likelihood=-183.5075225830078 Epoch 9000: Log-likelihood=-183.50465393066406 Epoch 10000: Log-likelihood=-183.5073699951172 ==================== model results ==================== Training Epochs: 10000 Learning Rate: 0.01 Batch Size: 250 out of 250 observations in total Final Log-likelihood: -183.5073699951172 Coefficients: | Coefficient | Estimation | Std. Err. | |:-----------------|-------------:|------------:| | lambda_weight_0 | 0.181474 | 0.108225 | | item_price_obs_0 | -0.174871 | 0.102564 | | item_price_obs_1 | -0.265047 | 0.156401 | | item_price_obs_2 | -0.258935 | 0.0949367 | | item_price_obs_3 | -0.151668 | 0.898396 | | item_price_obs_4 | -0.118241 | 0.0697575 | | item_price_obs_5 | 0.193267 | 0.0380327 | | item_price_obs_6 | -0.0374295 | 3.90292 |","title":"On Nested Logit Model"},{"location":"test/","text":"Compatibility Check List We have tested the tutorials using the following environments, please let us know if there is any issue with our packages on other systems. Tutorial Platform Versions CPU GPU Device Tested Data Management MacOS 12.2 Python 3.9.7 PyTorch 1.10.0 M1 Max N/A cpu Data Management Ubuntu 20.04 Python 3.8.10 PyTorch 1.10.1 CUDA 11.3 11700F RTX3090 cpu and cuda Conditional Logit Model MacOS 12.2 Python 3.9 PyTorch 1.10.0 M1 Max N/A cpu Conditional Logit Model Ubuntu 20.04 Python 3.8.10 PyTorch 1.10.1 CUDA 11.3 11700F RTX3090 cpu and cuda Nested Logit Model MacOS 12.2 Python 3.9.7 PyTorch 1.10.0 M1 Max N/A cpu Nested Logit Model Ubuntu 20.04 Python 3.8.10 PyTorch 1.10.1 CUDA 11.3 11700F RTX3090 cpu and cuda","title":"Compatibility Tests"},{"location":"test/#compatibility-check-list","text":"We have tested the tutorials using the following environments, please let us know if there is any issue with our packages on other systems. Tutorial Platform Versions CPU GPU Device Tested Data Management MacOS 12.2 Python 3.9.7 PyTorch 1.10.0 M1 Max N/A cpu Data Management Ubuntu 20.04 Python 3.8.10 PyTorch 1.10.1 CUDA 11.3 11700F RTX3090 cpu and cuda Conditional Logit Model MacOS 12.2 Python 3.9 PyTorch 1.10.0 M1 Max N/A cpu Conditional Logit Model Ubuntu 20.04 Python 3.8.10 PyTorch 1.10.1 CUDA 11.3 11700F RTX3090 cpu and cuda Nested Logit Model MacOS 12.2 Python 3.9.7 PyTorch 1.10.0 M1 Max N/A cpu Nested Logit Model Ubuntu 20.04 Python 3.8.10 PyTorch 1.10.1 CUDA 11.3 11700F RTX3090 cpu and cuda","title":"Compatibility Check List"}]}